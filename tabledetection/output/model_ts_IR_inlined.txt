graph(%self : __torch__.ScriptableAdapter,
      %inputs.1 : (Dict(str, Tensor))):
  %2 : bool = prim::Constant[value=1]() # src/export_model.py:86:23
  %3 : None = prim::Constant()
  %4 : bool = prim::Constant[value=0]() # src/export_model.py:85:72
  %5 : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN = prim::GetAttr[name="model"](%self)
  %6 : Dict(str, Tensor) = prim::TupleUnpack(%inputs.1)
  %7 : Dict(str, Tensor)[] = prim::ListConstruct(%6)
  %15 : str = prim::Constant[value="Empty Instances does not support __len__!"]() # /tmp/detectron2vmennprg/tmp68ws7m9z.py:173:34
  %16 : str = prim::Constant[value="unequal value, x[0] batch dim 0 is {}, but box_list has length {}"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:213:11
  %17 : str = prim::Constant[value="unequal value, num_level_assignments={}, but x is list of {} Tensors"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:207:11
  %18 : float = prim::Constant[value=1e-08]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:53:70
  %19 : str = prim::Constant[value="AssertionError: The boxes tensor shape is not correct as Tensor[K, 5]"]()
  %20 : str = prim::Constant[value="AssertionError: proposal_boxes is None and cannot be accessed!"]()
  %21 : int = prim::Constant[value=6]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:42:65
  %22 : str = prim::Constant[value="Indexing on Boxes with {} failed to return a matrix!"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:29
  %23 : str = prim::Constant[value="AssertionError: Box tensor contains infinite or NaN!"]()
  %24 : int = prim::Constant[value=40000]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:19:20
  %25 : int = prim::Constant[value=11]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:23:56
  %26 : (str, str, str, str, str, str, str, str) = prim::Constant[value=("proposal_boxes", "objectness_logits", "pred_boxes", "scores", "pred_classes", "pred_masks", "pred_keypoints", "pred_keypoint_heatmaps")]()
  %27 : float = prim::Constant[value=0.5]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:93:30
  %28 : int = prim::Constant[value=-4]()
  %29 : int = prim::Constant[value=-3]()
  %30 : str = prim::Constant[value="nearest"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:140:88
  %31 : float = prim::Constant[value=2.]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:140:78
  %32 : int = prim::Constant[value=3]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:358:40
  %33 : float = prim::Constant[value=0.10000000000000001]()
  %34 : str = prim::Constant[value="ResNet takes an input of shape (N, C, H, W). Got {} instead!"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:29
  %35 : str = prim::Constant[value="stem"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:446:11
  %36 : str = prim::Constant[value="area"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3443:27
  %37 : str = prim::Constant[value="Default upsampling behavior when mode={} is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details."]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3452:16
  %38 : int = prim::Constant[value=9223372036854775807]()
  %39 : str = prim::Constant[value="The default behavior for interpolate/upsample with float scale_factor changed in 1.6.0 to align with other frameworks/libraries, and now uses scale_factor directly, instead of relying on the computed output size. If you wish to restore the old behavior, please set recompute_scale_factor=True. See the documentation of nn.Upsample for details. "]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3500:24
  %40 : int = prim::Constant[value=5]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3533:22
  %41 : str = prim::Constant[value="Input Error: Only 3D, 4D and 5D input Tensors supported (got {}D) for the modes: nearest | linear | bilinear | bicubic | trilinear (got {})"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3573:8
  %42 : float = prim::Constant[value=0.]()
  %43 : int = prim::Constant[value=1]()
  %44 : bool = prim::Constant[value=0]()
  %45 : str = prim::Constant[value="image"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:20
  %46 : int = prim::Constant[value=2]()
  %47 : str = prim::Constant[value="AssertionError: Padding length too large"]()
  %48 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:75:30
  %49 : str = prim::Constant[value="AssertionError: "]()
  %50 : int = prim::Constant[value=-2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:79:28
  %51 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:81:47
  %52 : int = prim::Constant[value=4]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:92:52
  %53 : None = prim::Constant() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:202:33
  %54 : bool = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:211:33
  %55 : str = prim::Constant[value="AssertionError: Scripting is not supported for postprocess."]()
  %56 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::Uninitialized()
  %images.1 : Tensor[] = prim::ListConstruct()
  %58 : int = aten::len(%7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:17
   = prim::Loop(%58, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:17
    block0(%59 : int):
      %x.123 : Dict(str, Tensor) = aten::__getitem__(%7, %59) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:17
      %61 : Tensor = aten::__getitem__(%x.123, %45) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:18
      %62 : Tensor = prim::GetAttr[name="pixel_mean"](%5)
      %63 : Device = prim::device(%62)
      %64 : Tensor = aten::to(%61, %63, %53, %44, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:18
      %65 : Tensor[] = aten::append(%images.1, %64) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:17
      -> (%54)
  %images.3 : Tensor[] = prim::ListConstruct()
  %67 : int = aten::len(%images.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:225:17
   = prim::Loop(%67, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:225:17
    block0(%68 : int):
      %x.119 : Tensor = aten::__getitem__(%images.1, %68) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:225:17
      %70 : Tensor = prim::GetAttr[name="pixel_mean"](%5)
      %71 : Tensor = aten::sub(%x.119, %70, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:225:19
      %72 : Tensor = prim::GetAttr[name="pixel_std"](%5)
      %73 : Tensor = aten::div(%71, %72) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:225:19
      %74 : Tensor[] = aten::append(%images.3, %73) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:225:17
      -> (%54)
  %75 : __torch__.detectron2.modeling.backbone.fpn.FPN = prim::GetAttr[name="backbone"](%5)
  %76 : int = prim::GetAttr[name="_size_divisibility"](%75)
  %77 : int = aten::len(%images.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:75:15
  %78 : bool = aten::gt(%77, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:75:15
   = prim::If(%78) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:75:8
    block0():
      -> ()
    block1():
       = prim::RaiseException(%49) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:75:8
      -> ()
  %79 : int = aten::len(%images.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:77:8
   = prim::Loop(%79, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:77:8
    block0(%80 : int):
      %t.12 : Tensor = aten::__getitem__(%images.3, %80) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:77:8
      %82 : int[] = aten::size(%t.12) # <string>:7:9
      %83 : int[] = aten::slice(%82, %48, %50, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:79:19
      %84 : Tensor = aten::__getitem__(%images.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:79:35
      %85 : int[] = aten::size(%84) # <string>:7:9
      %86 : int[] = aten::slice(%85, %48, %50, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:79:35
      %87 : bool = aten::eq(%83, %86) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:79:19
       = prim::If(%87) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:79:12
        block0():
          -> ()
        block1():
          %88 : int[] = aten::size(%t.12) # <string>:7:9
          %89 : str = aten::str(%88) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:79:12
          %90 : str = aten::add(%49, %89) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:79:12
           = prim::RaiseException(%90) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:79:12
          -> ()
      -> (%54)
  %image_sizes.1 : (int, int)[] = prim::ListConstruct()
  %92 : int = aten::len(%images.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:81:22
   = prim::Loop(%92, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:81:22
    block0(%93 : int):
      %im.1 : Tensor = aten::__getitem__(%images.3, %93) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:81:22
      %95 : int[] = aten::size(%im.1) # <string>:7:9
      %96 : int = aten::__getitem__(%95, %50) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:81:24
      %97 : int[] = aten::size(%im.1) # <string>:7:9
      %98 : int = aten::__getitem__(%97, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:81:38
      %99 : (int, int) = prim::TupleConstruct(%96, %98)
      %100 : (int, int)[] = aten::append(%image_sizes.1, %99) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:81:22
      -> (%54)
  %image_sizes_tensor.1 : Tensor[] = prim::ListConstruct()
  %102 : int = aten::len(%image_sizes.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:82:29
   = prim::Loop(%102, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:82:29
    block0(%103 : int):
      %x.121 : (int, int) = aten::__getitem__(%image_sizes.1, %103) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:82:29
      %105 : int, %106 : int = prim::TupleUnpack(%x.121)
      %107 : int[] = prim::ListConstruct(%105, %106)
      %108 : Tensor = aten::as_tensor(%107, %53, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:25:15
      %109 : Tensor[] = aten::append(%image_sizes_tensor.1, %108) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:82:29
      -> (%54)
  %110 : Tensor = aten::stack(%image_sizes_tensor.1, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:83:19
  %111 : Tensor, %112 : Tensor = aten::max(%110, %48, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:83:19
  %113 : bool = aten::gt(%76, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:85:11
  %max_size : Tensor = prim::If(%113) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:85:8
    block0():
      %115 : int = aten::sub(%76, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:88:36
      %116 : Tensor = aten::add(%111, %115, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:88:24
      %117 : Tensor = aten::floor_divide(%116, %76) # <string>:3:9
      %max_size.3 : Tensor = aten::mul(%117, %76) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:88:24
      -> (%max_size.3)
    block1():
      -> (%111)
  %119 : Tensor = aten::to(%max_size, %52, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:92:34
  %max_size.10 : int[] = prim::tolist(%119, %43, %48)
  %121 : int = aten::len(%images.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:97:11
  %122 : bool = aten::eq(%121, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:97:11
  %batched_imgs : Tensor = prim::If(%122) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:97:8
    block0():
      %image_size.2 : (int, int) = aten::__getitem__(%image_sizes.1, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:100:25
      %125 : int = aten::__getitem__(%max_size.10, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:101:31
      %126 : int = prim::TupleIndex(%image_size.2, %43)
      %127 : int = aten::sub(%125, %126) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:101:31
      %128 : int = aten::__getitem__(%max_size.10, %50) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:101:64
      %129 : int = prim::TupleIndex(%image_size.2, %48)
      %130 : int = aten::sub(%128, %129) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:101:64
      %padding_size.1 : int[] = prim::ListConstruct(%48, %127, %48, %130)
      %132 : Tensor = aten::__getitem__(%images.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:102:33
      %133 : int = aten::dim(%132) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3995:28
      %134 : bool = aten::le(%46, %133) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3995:11
       = prim::If(%134) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3995:4
        block0():
          -> ()
        block1():
           = prim::RaiseException(%47) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3995:4
          -> ()
      %135 : Tensor = aten::constant_pad_nd(%132, %padding_size.1, %42) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3997:15
      %batched_imgs.1 : Tensor = aten::unsqueeze_(%135, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:102:27
      -> (%batched_imgs.1)
    block1():
      %137 : int = aten::len(%images.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:105:27
      %138 : int[] = prim::ListConstruct(%137)
      %139 : Tensor = aten::__getitem__(%images.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:105:48
      %140 : int[] = aten::size(%139) # <string>:7:9
      %141 : int[] = aten::slice(%140, %48, %50, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:105:48
      %142 : int[] = aten::list(%141) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:105:43
      %143 : int[] = aten::add(%138, %142) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:105:26
      %144 : int[] = aten::list(%max_size.10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:105:73
      %batch_shape.1 : int[] = aten::add(%143, %144) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:105:26
      %146 : Tensor = aten::__getitem__(%images.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:106:27
      %batched_imgs.2 : Tensor = aten::new_full(%146, %batch_shape.1, %42, %53, %53, %53, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:106:27
      %148 : int = aten::len(%images.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:107:12
      %149 : int = aten::len(%batched_imgs.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:107:12
      %150 : int[] = prim::ListConstruct(%148, %149)
      %151 : int = prim::min(%150) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:107:12
       = prim::Loop(%151, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:107:12
        block0(%152 : int):
          %img.1 : Tensor = aten::__getitem__(%images.3, %152) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:107:12
          %pad_img.1 : Tensor = aten::select(%batched_imgs.2, %48, %152) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:107:12
          %155 : int[] = aten::size(%img.1) # <string>:7:9
          %156 : int = aten::__getitem__(%155, %50) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:108:31
          %157 : Tensor = aten::slice(%pad_img.1, %50, %48, %156, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:108:16
          %158 : int[] = aten::size(%img.1) # <string>:7:9
          %159 : int = aten::__getitem__(%158, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:108:48
          %160 : Tensor = aten::slice(%157, %51, %48, %159, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:108:16
          %161 : Tensor = aten::copy_(%160, %img.1, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:108:16
          -> (%54)
      -> (%batched_imgs.2)
  %162 : Tensor = aten::contiguous(%batched_imgs, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/image_list.py:110:25
  %images.2 : __torch__.detectron2.structures.image_list.ImageList = prim::CreateObject()
   = prim::SetAttr[name="tensor"](%images.2, %162)
   = prim::SetAttr[name="image_sizes"](%images.2, %image_sizes.1)
  %164 : __torch__.detectron2.modeling.backbone.fpn.FPN = prim::GetAttr[name="backbone"](%5)
  %165 : Tensor = prim::GetAttr[name="tensor"](%images.2)
  %166 : __torch__.detectron2.modeling.backbone.resnet.ResNet = prim::GetAttr[name="bottom_up"](%164)
  %167 : int = aten::dim(%165) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:15
  %168 : bool = aten::eq(%167, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:15
   = prim::If(%168) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:8
    block0():
      -> ()
    block1():
      %169 : int[] = aten::size(%165) # <string>:7:9
      %170 : str = aten::format(%34, %169) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:29
      %171 : str = aten::add(%49, %170) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:8
       = prim::RaiseException(%171) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:8
      -> ()
  %bottom_up_features.1 : Dict(str, Tensor) = prim::DictConstruct()
  %173 : __torch__.detectron2.modeling.backbone.resnet.BasicStem = prim::GetAttr[name="stem"](%166)
  %174 : __torch__.detectron2.layers.wrappers.Conv2d = prim::GetAttr[name="conv1"](%173)
  %175 : Tensor = prim::GetAttr[name="weight"](%174)
  %176 : Tensor? = prim::GetAttr[name="bias"](%174)
  %177 : int[] = prim::ListConstruct(%46, %46)
  %178 : int[] = prim::ListConstruct(%32, %32)
  %179 : int[] = prim::ListConstruct(%43, %43)
  %x.76 : Tensor = aten::conv2d(%165, %175, %176, %177, %178, %179, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %181 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%174)
  %182 : bool = prim::requires_grad(%x.76)
  %x.74 : Tensor = prim::If(%182) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %184 : Tensor = prim::GetAttr[name="weight"](%181)
      %185 : Tensor = prim::GetAttr[name="running_var"](%181)
      %186 : float = prim::GetAttr[name="eps"](%181)
      %187 : Tensor = aten::add(%185, %186, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %188 : Tensor = aten::rsqrt(%187) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.163 : Tensor = aten::mul(%184, %188) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %190 : Tensor = prim::GetAttr[name="bias"](%181)
      %191 : Tensor = prim::GetAttr[name="running_mean"](%181)
      %192 : Tensor = aten::mul(%191, %scale.163) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.163 : Tensor = aten::sub(%190, %192, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %194 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.164 : Tensor = aten::reshape(%scale.163, %194) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %196 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.164 : Tensor = aten::reshape(%bias.163, %196) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.82 : int = prim::dtype(%x.76)
      %199 : Tensor = aten::to(%scale.164, %out_dtype.82, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %200 : Tensor = aten::mul(%x.76, %199) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %201 : Tensor = aten::to(%bias.164, %out_dtype.82, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %202 : Tensor = aten::add(%200, %201, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%202)
    block1():
      %203 : Tensor = prim::GetAttr[name="running_mean"](%181)
      %204 : Tensor = prim::GetAttr[name="running_var"](%181)
      %205 : Tensor = prim::GetAttr[name="weight"](%181)
      %206 : Tensor = prim::GetAttr[name="bias"](%181)
      %207 : float = prim::GetAttr[name="eps"](%181)
      %208 : Tensor = aten::batch_norm(%x.76, %205, %206, %203, %204, %44, %33, %207, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%208)
  %x.75 : Tensor = aten::relu_(%x.74) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:357:12
  %210 : int[] = prim::ListConstruct(%32, %32)
  %211 : int[] = prim::ListConstruct(%46, %46)
  %212 : int[] = prim::ListConstruct(%43, %43)
  %213 : int[] = prim::ListConstruct(%43, %43)
  %x.84 : Tensor = aten::max_pool2d(%x.75, %210, %211, %212, %213, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:659:11
  %215 : str[] = prim::GetAttr[name="_out_features"](%166)
  %216 : bool = aten::__contains__(%215, %35) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:446:11
   = prim::If(%216) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:446:8
    block0():
       = aten::_set_item(%bottom_up_features.1, %35, %x.84) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:447:12
      -> ()
    block1():
      -> ()
  %217 : (str, str, str, str) = prim::GetAttr[name="stage_names"](%166)
  %name.1 : str, %name.4 : str, %name.7 : str, %name.10 : str = prim::TupleUnpack(%217)
  %222 : __torch__.torch.nn.modules.container.ModuleList = prim::GetAttr[name="stages"](%166)
  %223 : __torch__.torch.nn.modules.container.Sequential = prim::GetAttr[name="0"](%222)
  %224 : __torch__.torch.nn.modules.container.___torch_mangle_12.Sequential = prim::GetAttr[name="1"](%222)
  %225 : __torch__.torch.nn.modules.container.___torch_mangle_20.Sequential = prim::GetAttr[name="2"](%222)
  %226 : __torch__.torch.nn.modules.container.___torch_mangle_28.Sequential = prim::GetAttr[name="3"](%222)
  %227 : __torch__.detectron2.modeling.backbone.resnet.BottleneckBlock = prim::GetAttr[name="0"](%223)
  %228 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_4.BottleneckBlock = prim::GetAttr[name="1"](%223)
  %229 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_4.BottleneckBlock = prim::GetAttr[name="2"](%223)
  %230 : __torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d = prim::GetAttr[name="conv1"](%227)
  %231 : Tensor = prim::GetAttr[name="weight"](%230)
  %232 : Tensor? = prim::GetAttr[name="bias"](%230)
  %233 : int[] = prim::ListConstruct(%43, %43)
  %234 : int[] = prim::ListConstruct(%48, %48)
  %235 : int[] = prim::ListConstruct(%43, %43)
  %x.77 : Tensor = aten::conv2d(%x.84, %231, %232, %233, %234, %235, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %237 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%230)
  %238 : bool = prim::requires_grad(%x.77)
  %out.13 : Tensor = prim::If(%238) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %240 : Tensor = prim::GetAttr[name="weight"](%237)
      %241 : Tensor = prim::GetAttr[name="running_var"](%237)
      %242 : float = prim::GetAttr[name="eps"](%237)
      %243 : Tensor = aten::add(%241, %242, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %244 : Tensor = aten::rsqrt(%243) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.165 : Tensor = aten::mul(%240, %244) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %246 : Tensor = prim::GetAttr[name="bias"](%237)
      %247 : Tensor = prim::GetAttr[name="running_mean"](%237)
      %248 : Tensor = aten::mul(%247, %scale.165) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.165 : Tensor = aten::sub(%246, %248, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %250 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.166 : Tensor = aten::reshape(%scale.165, %250) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %252 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.166 : Tensor = aten::reshape(%bias.165, %252) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.83 : int = prim::dtype(%x.77)
      %255 : Tensor = aten::to(%scale.166, %out_dtype.83, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %256 : Tensor = aten::mul(%x.77, %255) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %257 : Tensor = aten::to(%bias.166, %out_dtype.83, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %258 : Tensor = aten::add(%256, %257, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%258)
    block1():
      %259 : Tensor = prim::GetAttr[name="running_mean"](%237)
      %260 : Tensor = prim::GetAttr[name="running_var"](%237)
      %261 : Tensor = prim::GetAttr[name="weight"](%237)
      %262 : Tensor = prim::GetAttr[name="bias"](%237)
      %263 : float = prim::GetAttr[name="eps"](%237)
      %264 : Tensor = aten::batch_norm(%x.77, %261, %262, %259, %260, %44, %33, %263, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%264)
  %out.140 : Tensor = aten::relu_(%out.13) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %266 : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d = prim::GetAttr[name="conv2"](%227)
  %267 : Tensor = prim::GetAttr[name="weight"](%266)
  %268 : Tensor? = prim::GetAttr[name="bias"](%266)
  %269 : int[] = prim::ListConstruct(%43, %43)
  %270 : int[] = prim::ListConstruct(%43, %43)
  %271 : int[] = prim::ListConstruct(%43, %43)
  %x.78 : Tensor = aten::conv2d(%out.140, %267, %268, %269, %270, %271, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %273 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%266)
  %274 : bool = prim::requires_grad(%x.78)
  %out.141 : Tensor = prim::If(%274) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %276 : Tensor = prim::GetAttr[name="weight"](%273)
      %277 : Tensor = prim::GetAttr[name="running_var"](%273)
      %278 : float = prim::GetAttr[name="eps"](%273)
      %279 : Tensor = aten::add(%277, %278, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %280 : Tensor = aten::rsqrt(%279) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.167 : Tensor = aten::mul(%276, %280) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %282 : Tensor = prim::GetAttr[name="bias"](%273)
      %283 : Tensor = prim::GetAttr[name="running_mean"](%273)
      %284 : Tensor = aten::mul(%283, %scale.167) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.167 : Tensor = aten::sub(%282, %284, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %286 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.168 : Tensor = aten::reshape(%scale.167, %286) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %288 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.168 : Tensor = aten::reshape(%bias.167, %288) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.84 : int = prim::dtype(%x.78)
      %291 : Tensor = aten::to(%scale.168, %out_dtype.84, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %292 : Tensor = aten::mul(%x.78, %291) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %293 : Tensor = aten::to(%bias.168, %out_dtype.84, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %294 : Tensor = aten::add(%292, %293, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%294)
    block1():
      %295 : Tensor = prim::GetAttr[name="running_mean"](%273)
      %296 : Tensor = prim::GetAttr[name="running_var"](%273)
      %297 : Tensor = prim::GetAttr[name="weight"](%273)
      %298 : Tensor = prim::GetAttr[name="bias"](%273)
      %299 : float = prim::GetAttr[name="eps"](%273)
      %300 : Tensor = aten::batch_norm(%x.78, %297, %298, %295, %296, %44, %33, %299, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%300)
  %out.142 : Tensor = aten::relu_(%out.141) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %302 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d = prim::GetAttr[name="conv3"](%227)
  %303 : Tensor = prim::GetAttr[name="weight"](%302)
  %304 : Tensor? = prim::GetAttr[name="bias"](%302)
  %305 : int[] = prim::ListConstruct(%43, %43)
  %306 : int[] = prim::ListConstruct(%48, %48)
  %307 : int[] = prim::ListConstruct(%43, %43)
  %x.79 : Tensor = aten::conv2d(%out.142, %303, %304, %305, %306, %307, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %309 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%302)
  %310 : bool = prim::requires_grad(%x.79)
  %out.143 : Tensor = prim::If(%310) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %312 : Tensor = prim::GetAttr[name="weight"](%309)
      %313 : Tensor = prim::GetAttr[name="running_var"](%309)
      %314 : float = prim::GetAttr[name="eps"](%309)
      %315 : Tensor = aten::add(%313, %314, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %316 : Tensor = aten::rsqrt(%315) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.153 : Tensor = aten::mul(%312, %316) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %318 : Tensor = prim::GetAttr[name="bias"](%309)
      %319 : Tensor = prim::GetAttr[name="running_mean"](%309)
      %320 : Tensor = aten::mul(%319, %scale.153) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.153 : Tensor = aten::sub(%318, %320, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %322 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.154 : Tensor = aten::reshape(%scale.153, %322) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %324 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.154 : Tensor = aten::reshape(%bias.153, %324) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.77 : int = prim::dtype(%x.79)
      %327 : Tensor = aten::to(%scale.154, %out_dtype.77, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %328 : Tensor = aten::mul(%x.79, %327) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %329 : Tensor = aten::to(%bias.154, %out_dtype.77, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %330 : Tensor = aten::add(%328, %329, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%330)
    block1():
      %331 : Tensor = prim::GetAttr[name="running_mean"](%309)
      %332 : Tensor = prim::GetAttr[name="running_var"](%309)
      %333 : Tensor = prim::GetAttr[name="weight"](%309)
      %334 : Tensor = prim::GetAttr[name="bias"](%309)
      %335 : float = prim::GetAttr[name="eps"](%309)
      %336 : Tensor = aten::batch_norm(%x.79, %333, %334, %331, %332, %44, %33, %335, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%336)
  %337 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d = prim::GetAttr[name="shortcut"](%227)
  %338 : Tensor = prim::GetAttr[name="weight"](%337)
  %339 : Tensor? = prim::GetAttr[name="bias"](%337)
  %340 : int[] = prim::ListConstruct(%43, %43)
  %341 : int[] = prim::ListConstruct(%48, %48)
  %342 : int[] = prim::ListConstruct(%43, %43)
  %x.80 : Tensor = aten::conv2d(%x.84, %338, %339, %340, %341, %342, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %344 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%337)
  %345 : bool = prim::requires_grad(%x.80)
  %shortcut.2 : Tensor = prim::If(%345) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %347 : Tensor = prim::GetAttr[name="weight"](%344)
      %348 : Tensor = prim::GetAttr[name="running_var"](%344)
      %349 : float = prim::GetAttr[name="eps"](%344)
      %350 : Tensor = aten::add(%348, %349, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %351 : Tensor = aten::rsqrt(%350) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.155 : Tensor = aten::mul(%347, %351) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %353 : Tensor = prim::GetAttr[name="bias"](%344)
      %354 : Tensor = prim::GetAttr[name="running_mean"](%344)
      %355 : Tensor = aten::mul(%354, %scale.155) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.155 : Tensor = aten::sub(%353, %355, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %357 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.156 : Tensor = aten::reshape(%scale.155, %357) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %359 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.156 : Tensor = aten::reshape(%bias.155, %359) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.78 : int = prim::dtype(%x.80)
      %362 : Tensor = aten::to(%scale.156, %out_dtype.78, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %363 : Tensor = aten::mul(%x.80, %362) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %364 : Tensor = aten::to(%bias.156, %out_dtype.78, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %365 : Tensor = aten::add(%363, %364, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%365)
    block1():
      %366 : Tensor = prim::GetAttr[name="running_mean"](%344)
      %367 : Tensor = prim::GetAttr[name="running_var"](%344)
      %368 : Tensor = prim::GetAttr[name="weight"](%344)
      %369 : Tensor = prim::GetAttr[name="bias"](%344)
      %370 : float = prim::GetAttr[name="eps"](%344)
      %371 : Tensor = aten::batch_norm(%x.80, %368, %369, %366, %367, %44, %33, %370, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%371)
  %out.144 : Tensor = aten::add_(%out.143, %shortcut.2, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.28 : Tensor = aten::relu_(%out.144) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %374 : __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d = prim::GetAttr[name="conv1"](%228)
  %375 : Tensor = prim::GetAttr[name="weight"](%374)
  %376 : Tensor? = prim::GetAttr[name="bias"](%374)
  %377 : int[] = prim::ListConstruct(%43, %43)
  %378 : int[] = prim::ListConstruct(%48, %48)
  %379 : int[] = prim::ListConstruct(%43, %43)
  %x.81 : Tensor = aten::conv2d(%input.28, %375, %376, %377, %378, %379, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %381 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%374)
  %382 : bool = prim::requires_grad(%x.81)
  %out.151 : Tensor = prim::If(%382) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %384 : Tensor = prim::GetAttr[name="weight"](%381)
      %385 : Tensor = prim::GetAttr[name="running_var"](%381)
      %386 : float = prim::GetAttr[name="eps"](%381)
      %387 : Tensor = aten::add(%385, %386, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %388 : Tensor = aten::rsqrt(%387) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.157 : Tensor = aten::mul(%384, %388) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %390 : Tensor = prim::GetAttr[name="bias"](%381)
      %391 : Tensor = prim::GetAttr[name="running_mean"](%381)
      %392 : Tensor = aten::mul(%391, %scale.157) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.157 : Tensor = aten::sub(%390, %392, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %394 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.158 : Tensor = aten::reshape(%scale.157, %394) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %396 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.158 : Tensor = aten::reshape(%bias.157, %396) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.79 : int = prim::dtype(%x.81)
      %399 : Tensor = aten::to(%scale.158, %out_dtype.79, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %400 : Tensor = aten::mul(%x.81, %399) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %401 : Tensor = aten::to(%bias.158, %out_dtype.79, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %402 : Tensor = aten::add(%400, %401, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%402)
    block1():
      %403 : Tensor = prim::GetAttr[name="running_mean"](%381)
      %404 : Tensor = prim::GetAttr[name="running_var"](%381)
      %405 : Tensor = prim::GetAttr[name="weight"](%381)
      %406 : Tensor = prim::GetAttr[name="bias"](%381)
      %407 : float = prim::GetAttr[name="eps"](%381)
      %408 : Tensor = aten::batch_norm(%x.81, %405, %406, %403, %404, %44, %33, %407, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%408)
  %out.170 : Tensor = aten::relu_(%out.151) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %410 : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d = prim::GetAttr[name="conv2"](%228)
  %411 : Tensor = prim::GetAttr[name="weight"](%410)
  %412 : Tensor? = prim::GetAttr[name="bias"](%410)
  %413 : int[] = prim::ListConstruct(%43, %43)
  %414 : int[] = prim::ListConstruct(%43, %43)
  %415 : int[] = prim::ListConstruct(%43, %43)
  %x.82 : Tensor = aten::conv2d(%out.170, %411, %412, %413, %414, %415, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %417 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%410)
  %418 : bool = prim::requires_grad(%x.82)
  %out.171 : Tensor = prim::If(%418) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %420 : Tensor = prim::GetAttr[name="weight"](%417)
      %421 : Tensor = prim::GetAttr[name="running_var"](%417)
      %422 : float = prim::GetAttr[name="eps"](%417)
      %423 : Tensor = aten::add(%421, %422, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %424 : Tensor = aten::rsqrt(%423) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.159 : Tensor = aten::mul(%420, %424) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %426 : Tensor = prim::GetAttr[name="bias"](%417)
      %427 : Tensor = prim::GetAttr[name="running_mean"](%417)
      %428 : Tensor = aten::mul(%427, %scale.159) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.159 : Tensor = aten::sub(%426, %428, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %430 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.160 : Tensor = aten::reshape(%scale.159, %430) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %432 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.160 : Tensor = aten::reshape(%bias.159, %432) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.80 : int = prim::dtype(%x.82)
      %435 : Tensor = aten::to(%scale.160, %out_dtype.80, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %436 : Tensor = aten::mul(%x.82, %435) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %437 : Tensor = aten::to(%bias.160, %out_dtype.80, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %438 : Tensor = aten::add(%436, %437, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%438)
    block1():
      %439 : Tensor = prim::GetAttr[name="running_mean"](%417)
      %440 : Tensor = prim::GetAttr[name="running_var"](%417)
      %441 : Tensor = prim::GetAttr[name="weight"](%417)
      %442 : Tensor = prim::GetAttr[name="bias"](%417)
      %443 : float = prim::GetAttr[name="eps"](%417)
      %444 : Tensor = aten::batch_norm(%x.82, %441, %442, %439, %440, %44, %33, %443, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%444)
  %out.172 : Tensor = aten::relu_(%out.171) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %446 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d = prim::GetAttr[name="conv3"](%228)
  %447 : Tensor = prim::GetAttr[name="weight"](%446)
  %448 : Tensor? = prim::GetAttr[name="bias"](%446)
  %449 : int[] = prim::ListConstruct(%43, %43)
  %450 : int[] = prim::ListConstruct(%48, %48)
  %451 : int[] = prim::ListConstruct(%43, %43)
  %x.83 : Tensor = aten::conv2d(%out.172, %447, %448, %449, %450, %451, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %453 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%446)
  %454 : bool = prim::requires_grad(%x.83)
  %out.173 : Tensor = prim::If(%454) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %456 : Tensor = prim::GetAttr[name="weight"](%453)
      %457 : Tensor = prim::GetAttr[name="running_var"](%453)
      %458 : float = prim::GetAttr[name="eps"](%453)
      %459 : Tensor = aten::add(%457, %458, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %460 : Tensor = aten::rsqrt(%459) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.161 : Tensor = aten::mul(%456, %460) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %462 : Tensor = prim::GetAttr[name="bias"](%453)
      %463 : Tensor = prim::GetAttr[name="running_mean"](%453)
      %464 : Tensor = aten::mul(%463, %scale.161) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.161 : Tensor = aten::sub(%462, %464, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %466 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.162 : Tensor = aten::reshape(%scale.161, %466) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %468 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.162 : Tensor = aten::reshape(%bias.161, %468) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.81 : int = prim::dtype(%x.83)
      %471 : Tensor = aten::to(%scale.162, %out_dtype.81, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %472 : Tensor = aten::mul(%x.83, %471) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %473 : Tensor = aten::to(%bias.162, %out_dtype.81, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %474 : Tensor = aten::add(%472, %473, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%474)
    block1():
      %475 : Tensor = prim::GetAttr[name="running_mean"](%453)
      %476 : Tensor = prim::GetAttr[name="running_var"](%453)
      %477 : Tensor = prim::GetAttr[name="weight"](%453)
      %478 : Tensor = prim::GetAttr[name="bias"](%453)
      %479 : float = prim::GetAttr[name="eps"](%453)
      %480 : Tensor = aten::batch_norm(%x.83, %477, %478, %475, %476, %44, %33, %479, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%480)
  %out.174 : Tensor = aten::add_(%out.173, %input.28, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.22 : Tensor = aten::relu_(%out.174) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %483 : __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d = prim::GetAttr[name="conv1"](%229)
  %484 : Tensor = prim::GetAttr[name="weight"](%483)
  %485 : Tensor? = prim::GetAttr[name="bias"](%483)
  %486 : int[] = prim::ListConstruct(%43, %43)
  %487 : int[] = prim::ListConstruct(%48, %48)
  %488 : int[] = prim::ListConstruct(%43, %43)
  %x.87 : Tensor = aten::conv2d(%input.22, %484, %485, %486, %487, %488, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %490 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%483)
  %491 : bool = prim::requires_grad(%x.87)
  %out.157 : Tensor = prim::If(%491) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %493 : Tensor = prim::GetAttr[name="weight"](%490)
      %494 : Tensor = prim::GetAttr[name="running_var"](%490)
      %495 : float = prim::GetAttr[name="eps"](%490)
      %496 : Tensor = aten::add(%494, %495, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %497 : Tensor = aten::rsqrt(%496) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.169 : Tensor = aten::mul(%493, %497) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %499 : Tensor = prim::GetAttr[name="bias"](%490)
      %500 : Tensor = prim::GetAttr[name="running_mean"](%490)
      %501 : Tensor = aten::mul(%500, %scale.169) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.169 : Tensor = aten::sub(%499, %501, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %503 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.170 : Tensor = aten::reshape(%scale.169, %503) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %505 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.170 : Tensor = aten::reshape(%bias.169, %505) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.85 : int = prim::dtype(%x.87)
      %508 : Tensor = aten::to(%scale.170, %out_dtype.85, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %509 : Tensor = aten::mul(%x.87, %508) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %510 : Tensor = aten::to(%bias.170, %out_dtype.85, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %511 : Tensor = aten::add(%509, %510, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%511)
    block1():
      %512 : Tensor = prim::GetAttr[name="running_mean"](%490)
      %513 : Tensor = prim::GetAttr[name="running_var"](%490)
      %514 : Tensor = prim::GetAttr[name="weight"](%490)
      %515 : Tensor = prim::GetAttr[name="bias"](%490)
      %516 : float = prim::GetAttr[name="eps"](%490)
      %517 : Tensor = aten::batch_norm(%x.87, %514, %515, %512, %513, %44, %33, %516, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%517)
  %out.146 : Tensor = aten::relu_(%out.157) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %519 : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d = prim::GetAttr[name="conv2"](%229)
  %520 : Tensor = prim::GetAttr[name="weight"](%519)
  %521 : Tensor? = prim::GetAttr[name="bias"](%519)
  %522 : int[] = prim::ListConstruct(%43, %43)
  %523 : int[] = prim::ListConstruct(%43, %43)
  %524 : int[] = prim::ListConstruct(%43, %43)
  %x.88 : Tensor = aten::conv2d(%out.146, %520, %521, %522, %523, %524, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %526 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%519)
  %527 : bool = prim::requires_grad(%x.88)
  %out.147 : Tensor = prim::If(%527) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %529 : Tensor = prim::GetAttr[name="weight"](%526)
      %530 : Tensor = prim::GetAttr[name="running_var"](%526)
      %531 : float = prim::GetAttr[name="eps"](%526)
      %532 : Tensor = aten::add(%530, %531, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %533 : Tensor = aten::rsqrt(%532) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.171 : Tensor = aten::mul(%529, %533) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %535 : Tensor = prim::GetAttr[name="bias"](%526)
      %536 : Tensor = prim::GetAttr[name="running_mean"](%526)
      %537 : Tensor = aten::mul(%536, %scale.171) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.171 : Tensor = aten::sub(%535, %537, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %539 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.172 : Tensor = aten::reshape(%scale.171, %539) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %541 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.172 : Tensor = aten::reshape(%bias.171, %541) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.86 : int = prim::dtype(%x.88)
      %544 : Tensor = aten::to(%scale.172, %out_dtype.86, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %545 : Tensor = aten::mul(%x.88, %544) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %546 : Tensor = aten::to(%bias.172, %out_dtype.86, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %547 : Tensor = aten::add(%545, %546, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%547)
    block1():
      %548 : Tensor = prim::GetAttr[name="running_mean"](%526)
      %549 : Tensor = prim::GetAttr[name="running_var"](%526)
      %550 : Tensor = prim::GetAttr[name="weight"](%526)
      %551 : Tensor = prim::GetAttr[name="bias"](%526)
      %552 : float = prim::GetAttr[name="eps"](%526)
      %553 : Tensor = aten::batch_norm(%x.88, %550, %551, %548, %549, %44, %33, %552, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%553)
  %out.148 : Tensor = aten::relu_(%out.147) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %555 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d = prim::GetAttr[name="conv3"](%229)
  %556 : Tensor = prim::GetAttr[name="weight"](%555)
  %557 : Tensor? = prim::GetAttr[name="bias"](%555)
  %558 : int[] = prim::ListConstruct(%43, %43)
  %559 : int[] = prim::ListConstruct(%48, %48)
  %560 : int[] = prim::ListConstruct(%43, %43)
  %x.89 : Tensor = aten::conv2d(%out.148, %556, %557, %558, %559, %560, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %562 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%555)
  %563 : bool = prim::requires_grad(%x.89)
  %out.149 : Tensor = prim::If(%563) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %565 : Tensor = prim::GetAttr[name="weight"](%562)
      %566 : Tensor = prim::GetAttr[name="running_var"](%562)
      %567 : float = prim::GetAttr[name="eps"](%562)
      %568 : Tensor = aten::add(%566, %567, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %569 : Tensor = aten::rsqrt(%568) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.173 : Tensor = aten::mul(%565, %569) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %571 : Tensor = prim::GetAttr[name="bias"](%562)
      %572 : Tensor = prim::GetAttr[name="running_mean"](%562)
      %573 : Tensor = aten::mul(%572, %scale.173) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.173 : Tensor = aten::sub(%571, %573, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %575 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.174 : Tensor = aten::reshape(%scale.173, %575) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %577 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.174 : Tensor = aten::reshape(%bias.173, %577) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.87 : int = prim::dtype(%x.89)
      %580 : Tensor = aten::to(%scale.174, %out_dtype.87, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %581 : Tensor = aten::mul(%x.89, %580) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %582 : Tensor = aten::to(%bias.174, %out_dtype.87, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %583 : Tensor = aten::add(%581, %582, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%583)
    block1():
      %584 : Tensor = prim::GetAttr[name="running_mean"](%562)
      %585 : Tensor = prim::GetAttr[name="running_var"](%562)
      %586 : Tensor = prim::GetAttr[name="weight"](%562)
      %587 : Tensor = prim::GetAttr[name="bias"](%562)
      %588 : float = prim::GetAttr[name="eps"](%562)
      %589 : Tensor = aten::batch_norm(%x.89, %586, %587, %584, %585, %44, %33, %588, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%589)
  %out.150 : Tensor = aten::add_(%out.149, %input.22, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %x.100 : Tensor = aten::relu_(%out.150) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %592 : str[] = prim::GetAttr[name="_out_features"](%166)
  %593 : bool = aten::__contains__(%592, %name.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:15
   = prim::If(%593) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:12
    block0():
       = aten::_set_item(%bottom_up_features.1, %name.1, %x.100) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:451:16
      -> ()
    block1():
      -> ()
  %594 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_9.BottleneckBlock = prim::GetAttr[name="0"](%224)
  %595 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock = prim::GetAttr[name="1"](%224)
  %596 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock = prim::GetAttr[name="2"](%224)
  %597 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock = prim::GetAttr[name="3"](%224)
  %598 : __torch__.detectron2.layers.wrappers.___torch_mangle_6.Conv2d = prim::GetAttr[name="conv1"](%594)
  %599 : Tensor = prim::GetAttr[name="weight"](%598)
  %600 : Tensor? = prim::GetAttr[name="bias"](%598)
  %601 : int[] = prim::ListConstruct(%46, %46)
  %602 : int[] = prim::ListConstruct(%48, %48)
  %603 : int[] = prim::ListConstruct(%43, %43)
  %x.90 : Tensor = aten::conv2d(%x.100, %599, %600, %601, %602, %603, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %605 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%598)
  %606 : bool = prim::requires_grad(%x.90)
  %out.163 : Tensor = prim::If(%606) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %608 : Tensor = prim::GetAttr[name="weight"](%605)
      %609 : Tensor = prim::GetAttr[name="running_var"](%605)
      %610 : float = prim::GetAttr[name="eps"](%605)
      %611 : Tensor = aten::add(%609, %610, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %612 : Tensor = aten::rsqrt(%611) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.175 : Tensor = aten::mul(%608, %612) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %614 : Tensor = prim::GetAttr[name="bias"](%605)
      %615 : Tensor = prim::GetAttr[name="running_mean"](%605)
      %616 : Tensor = aten::mul(%615, %scale.175) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.175 : Tensor = aten::sub(%614, %616, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %618 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.176 : Tensor = aten::reshape(%scale.175, %618) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %620 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.176 : Tensor = aten::reshape(%bias.175, %620) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.88 : int = prim::dtype(%x.90)
      %623 : Tensor = aten::to(%scale.176, %out_dtype.88, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %624 : Tensor = aten::mul(%x.90, %623) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %625 : Tensor = aten::to(%bias.176, %out_dtype.88, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %626 : Tensor = aten::add(%624, %625, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%626)
    block1():
      %627 : Tensor = prim::GetAttr[name="running_mean"](%605)
      %628 : Tensor = prim::GetAttr[name="running_var"](%605)
      %629 : Tensor = prim::GetAttr[name="weight"](%605)
      %630 : Tensor = prim::GetAttr[name="bias"](%605)
      %631 : float = prim::GetAttr[name="eps"](%605)
      %632 : Tensor = aten::batch_norm(%x.90, %629, %630, %627, %628, %44, %33, %631, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%632)
  %out.152 : Tensor = aten::relu_(%out.163) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %634 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="conv2"](%594)
  %635 : Tensor = prim::GetAttr[name="weight"](%634)
  %636 : Tensor? = prim::GetAttr[name="bias"](%634)
  %637 : int[] = prim::ListConstruct(%43, %43)
  %638 : int[] = prim::ListConstruct(%43, %43)
  %639 : int[] = prim::ListConstruct(%43, %43)
  %x.91 : Tensor = aten::conv2d(%out.152, %635, %636, %637, %638, %639, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %641 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%634)
  %642 : bool = prim::requires_grad(%x.91)
  %out.153 : Tensor = prim::If(%642) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %644 : Tensor = prim::GetAttr[name="weight"](%641)
      %645 : Tensor = prim::GetAttr[name="running_var"](%641)
      %646 : float = prim::GetAttr[name="eps"](%641)
      %647 : Tensor = aten::add(%645, %646, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %648 : Tensor = aten::rsqrt(%647) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.177 : Tensor = aten::mul(%644, %648) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %650 : Tensor = prim::GetAttr[name="bias"](%641)
      %651 : Tensor = prim::GetAttr[name="running_mean"](%641)
      %652 : Tensor = aten::mul(%651, %scale.177) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.177 : Tensor = aten::sub(%650, %652, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %654 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.178 : Tensor = aten::reshape(%scale.177, %654) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %656 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.178 : Tensor = aten::reshape(%bias.177, %656) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.89 : int = prim::dtype(%x.91)
      %659 : Tensor = aten::to(%scale.178, %out_dtype.89, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %660 : Tensor = aten::mul(%x.91, %659) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %661 : Tensor = aten::to(%bias.178, %out_dtype.89, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %662 : Tensor = aten::add(%660, %661, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%662)
    block1():
      %663 : Tensor = prim::GetAttr[name="running_mean"](%641)
      %664 : Tensor = prim::GetAttr[name="running_var"](%641)
      %665 : Tensor = prim::GetAttr[name="weight"](%641)
      %666 : Tensor = prim::GetAttr[name="bias"](%641)
      %667 : float = prim::GetAttr[name="eps"](%641)
      %668 : Tensor = aten::batch_norm(%x.91, %665, %666, %663, %664, %44, %33, %667, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%668)
  %out.154 : Tensor = aten::relu_(%out.153) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %670 : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d = prim::GetAttr[name="conv3"](%594)
  %671 : Tensor = prim::GetAttr[name="weight"](%670)
  %672 : Tensor? = prim::GetAttr[name="bias"](%670)
  %673 : int[] = prim::ListConstruct(%43, %43)
  %674 : int[] = prim::ListConstruct(%48, %48)
  %675 : int[] = prim::ListConstruct(%43, %43)
  %x.92 : Tensor = aten::conv2d(%out.154, %671, %672, %673, %674, %675, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %677 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%670)
  %678 : bool = prim::requires_grad(%x.92)
  %out.155 : Tensor = prim::If(%678) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %680 : Tensor = prim::GetAttr[name="weight"](%677)
      %681 : Tensor = prim::GetAttr[name="running_var"](%677)
      %682 : float = prim::GetAttr[name="eps"](%677)
      %683 : Tensor = aten::add(%681, %682, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %684 : Tensor = aten::rsqrt(%683) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.179 : Tensor = aten::mul(%680, %684) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %686 : Tensor = prim::GetAttr[name="bias"](%677)
      %687 : Tensor = prim::GetAttr[name="running_mean"](%677)
      %688 : Tensor = aten::mul(%687, %scale.179) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.179 : Tensor = aten::sub(%686, %688, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %690 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.180 : Tensor = aten::reshape(%scale.179, %690) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %692 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.180 : Tensor = aten::reshape(%bias.179, %692) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.90 : int = prim::dtype(%x.92)
      %695 : Tensor = aten::to(%scale.180, %out_dtype.90, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %696 : Tensor = aten::mul(%x.92, %695) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %697 : Tensor = aten::to(%bias.180, %out_dtype.90, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %698 : Tensor = aten::add(%696, %697, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%698)
    block1():
      %699 : Tensor = prim::GetAttr[name="running_mean"](%677)
      %700 : Tensor = prim::GetAttr[name="running_var"](%677)
      %701 : Tensor = prim::GetAttr[name="weight"](%677)
      %702 : Tensor = prim::GetAttr[name="bias"](%677)
      %703 : float = prim::GetAttr[name="eps"](%677)
      %704 : Tensor = aten::batch_norm(%x.92, %701, %702, %699, %700, %44, %33, %703, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%704)
  %705 : __torch__.detectron2.layers.wrappers.___torch_mangle_5.Conv2d = prim::GetAttr[name="shortcut"](%594)
  %706 : Tensor = prim::GetAttr[name="weight"](%705)
  %707 : Tensor? = prim::GetAttr[name="bias"](%705)
  %708 : int[] = prim::ListConstruct(%46, %46)
  %709 : int[] = prim::ListConstruct(%48, %48)
  %710 : int[] = prim::ListConstruct(%43, %43)
  %x.93 : Tensor = aten::conv2d(%x.100, %706, %707, %708, %709, %710, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %712 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%705)
  %713 : bool = prim::requires_grad(%x.93)
  %shortcut.3 : Tensor = prim::If(%713) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %715 : Tensor = prim::GetAttr[name="weight"](%712)
      %716 : Tensor = prim::GetAttr[name="running_var"](%712)
      %717 : float = prim::GetAttr[name="eps"](%712)
      %718 : Tensor = aten::add(%716, %717, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %719 : Tensor = aten::rsqrt(%718) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.181 : Tensor = aten::mul(%715, %719) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %721 : Tensor = prim::GetAttr[name="bias"](%712)
      %722 : Tensor = prim::GetAttr[name="running_mean"](%712)
      %723 : Tensor = aten::mul(%722, %scale.181) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.181 : Tensor = aten::sub(%721, %723, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %725 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.182 : Tensor = aten::reshape(%scale.181, %725) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %727 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.182 : Tensor = aten::reshape(%bias.181, %727) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.91 : int = prim::dtype(%x.93)
      %730 : Tensor = aten::to(%scale.182, %out_dtype.91, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %731 : Tensor = aten::mul(%x.93, %730) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %732 : Tensor = aten::to(%bias.182, %out_dtype.91, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %733 : Tensor = aten::add(%731, %732, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%733)
    block1():
      %734 : Tensor = prim::GetAttr[name="running_mean"](%712)
      %735 : Tensor = prim::GetAttr[name="running_var"](%712)
      %736 : Tensor = prim::GetAttr[name="weight"](%712)
      %737 : Tensor = prim::GetAttr[name="bias"](%712)
      %738 : float = prim::GetAttr[name="eps"](%712)
      %739 : Tensor = aten::batch_norm(%x.93, %736, %737, %734, %735, %44, %33, %738, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%739)
  %out.156 : Tensor = aten::add_(%out.155, %shortcut.3, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.24 : Tensor = aten::relu_(%out.156) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %742 : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d = prim::GetAttr[name="conv1"](%595)
  %743 : Tensor = prim::GetAttr[name="weight"](%742)
  %744 : Tensor? = prim::GetAttr[name="bias"](%742)
  %745 : int[] = prim::ListConstruct(%43, %43)
  %746 : int[] = prim::ListConstruct(%48, %48)
  %747 : int[] = prim::ListConstruct(%43, %43)
  %x.94 : Tensor = aten::conv2d(%input.24, %743, %744, %745, %746, %747, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %749 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%742)
  %750 : bool = prim::requires_grad(%x.94)
  %out.169 : Tensor = prim::If(%750) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %752 : Tensor = prim::GetAttr[name="weight"](%749)
      %753 : Tensor = prim::GetAttr[name="running_var"](%749)
      %754 : float = prim::GetAttr[name="eps"](%749)
      %755 : Tensor = aten::add(%753, %754, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %756 : Tensor = aten::rsqrt(%755) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.141 : Tensor = aten::mul(%752, %756) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %758 : Tensor = prim::GetAttr[name="bias"](%749)
      %759 : Tensor = prim::GetAttr[name="running_mean"](%749)
      %760 : Tensor = aten::mul(%759, %scale.141) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.141 : Tensor = aten::sub(%758, %760, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %762 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.142 : Tensor = aten::reshape(%scale.141, %762) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %764 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.142 : Tensor = aten::reshape(%bias.141, %764) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.71 : int = prim::dtype(%x.94)
      %767 : Tensor = aten::to(%scale.142, %out_dtype.71, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %768 : Tensor = aten::mul(%x.94, %767) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %769 : Tensor = aten::to(%bias.142, %out_dtype.71, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %770 : Tensor = aten::add(%768, %769, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%770)
    block1():
      %771 : Tensor = prim::GetAttr[name="running_mean"](%749)
      %772 : Tensor = prim::GetAttr[name="running_var"](%749)
      %773 : Tensor = prim::GetAttr[name="weight"](%749)
      %774 : Tensor = prim::GetAttr[name="bias"](%749)
      %775 : float = prim::GetAttr[name="eps"](%749)
      %776 : Tensor = aten::batch_norm(%x.94, %773, %774, %771, %772, %44, %33, %775, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%776)
  %out.158 : Tensor = aten::relu_(%out.169) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %778 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="conv2"](%595)
  %779 : Tensor = prim::GetAttr[name="weight"](%778)
  %780 : Tensor? = prim::GetAttr[name="bias"](%778)
  %781 : int[] = prim::ListConstruct(%43, %43)
  %782 : int[] = prim::ListConstruct(%43, %43)
  %783 : int[] = prim::ListConstruct(%43, %43)
  %x.95 : Tensor = aten::conv2d(%out.158, %779, %780, %781, %782, %783, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %785 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%778)
  %786 : bool = prim::requires_grad(%x.95)
  %out.159 : Tensor = prim::If(%786) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %788 : Tensor = prim::GetAttr[name="weight"](%785)
      %789 : Tensor = prim::GetAttr[name="running_var"](%785)
      %790 : float = prim::GetAttr[name="eps"](%785)
      %791 : Tensor = aten::add(%789, %790, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %792 : Tensor = aten::rsqrt(%791) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.143 : Tensor = aten::mul(%788, %792) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %794 : Tensor = prim::GetAttr[name="bias"](%785)
      %795 : Tensor = prim::GetAttr[name="running_mean"](%785)
      %796 : Tensor = aten::mul(%795, %scale.143) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.143 : Tensor = aten::sub(%794, %796, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %798 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.144 : Tensor = aten::reshape(%scale.143, %798) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %800 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.144 : Tensor = aten::reshape(%bias.143, %800) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.72 : int = prim::dtype(%x.95)
      %803 : Tensor = aten::to(%scale.144, %out_dtype.72, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %804 : Tensor = aten::mul(%x.95, %803) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %805 : Tensor = aten::to(%bias.144, %out_dtype.72, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %806 : Tensor = aten::add(%804, %805, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%806)
    block1():
      %807 : Tensor = prim::GetAttr[name="running_mean"](%785)
      %808 : Tensor = prim::GetAttr[name="running_var"](%785)
      %809 : Tensor = prim::GetAttr[name="weight"](%785)
      %810 : Tensor = prim::GetAttr[name="bias"](%785)
      %811 : float = prim::GetAttr[name="eps"](%785)
      %812 : Tensor = aten::batch_norm(%x.95, %809, %810, %807, %808, %44, %33, %811, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%812)
  %out.160 : Tensor = aten::relu_(%out.159) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %814 : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d = prim::GetAttr[name="conv3"](%595)
  %815 : Tensor = prim::GetAttr[name="weight"](%814)
  %816 : Tensor? = prim::GetAttr[name="bias"](%814)
  %817 : int[] = prim::ListConstruct(%43, %43)
  %818 : int[] = prim::ListConstruct(%48, %48)
  %819 : int[] = prim::ListConstruct(%43, %43)
  %x.96 : Tensor = aten::conv2d(%out.160, %815, %816, %817, %818, %819, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %821 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%814)
  %822 : bool = prim::requires_grad(%x.96)
  %out.161 : Tensor = prim::If(%822) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %824 : Tensor = prim::GetAttr[name="weight"](%821)
      %825 : Tensor = prim::GetAttr[name="running_var"](%821)
      %826 : float = prim::GetAttr[name="eps"](%821)
      %827 : Tensor = aten::add(%825, %826, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %828 : Tensor = aten::rsqrt(%827) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.145 : Tensor = aten::mul(%824, %828) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %830 : Tensor = prim::GetAttr[name="bias"](%821)
      %831 : Tensor = prim::GetAttr[name="running_mean"](%821)
      %832 : Tensor = aten::mul(%831, %scale.145) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.145 : Tensor = aten::sub(%830, %832, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %834 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.146 : Tensor = aten::reshape(%scale.145, %834) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %836 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.146 : Tensor = aten::reshape(%bias.145, %836) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.73 : int = prim::dtype(%x.96)
      %839 : Tensor = aten::to(%scale.146, %out_dtype.73, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %840 : Tensor = aten::mul(%x.96, %839) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %841 : Tensor = aten::to(%bias.146, %out_dtype.73, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %842 : Tensor = aten::add(%840, %841, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%842)
    block1():
      %843 : Tensor = prim::GetAttr[name="running_mean"](%821)
      %844 : Tensor = prim::GetAttr[name="running_var"](%821)
      %845 : Tensor = prim::GetAttr[name="weight"](%821)
      %846 : Tensor = prim::GetAttr[name="bias"](%821)
      %847 : float = prim::GetAttr[name="eps"](%821)
      %848 : Tensor = aten::batch_norm(%x.96, %845, %846, %843, %844, %44, %33, %847, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%848)
  %out.162 : Tensor = aten::add_(%out.161, %input.24, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.12 : Tensor = aten::relu_(%out.162) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %851 : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d = prim::GetAttr[name="conv1"](%596)
  %852 : Tensor = prim::GetAttr[name="weight"](%851)
  %853 : Tensor? = prim::GetAttr[name="bias"](%851)
  %854 : int[] = prim::ListConstruct(%43, %43)
  %855 : int[] = prim::ListConstruct(%48, %48)
  %856 : int[] = prim::ListConstruct(%43, %43)
  %x.97 : Tensor = aten::conv2d(%input.12, %852, %853, %854, %855, %856, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %858 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%851)
  %859 : bool = prim::requires_grad(%x.97)
  %out.145 : Tensor = prim::If(%859) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %861 : Tensor = prim::GetAttr[name="weight"](%858)
      %862 : Tensor = prim::GetAttr[name="running_var"](%858)
      %863 : float = prim::GetAttr[name="eps"](%858)
      %864 : Tensor = aten::add(%862, %863, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %865 : Tensor = aten::rsqrt(%864) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.147 : Tensor = aten::mul(%861, %865) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %867 : Tensor = prim::GetAttr[name="bias"](%858)
      %868 : Tensor = prim::GetAttr[name="running_mean"](%858)
      %869 : Tensor = aten::mul(%868, %scale.147) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.147 : Tensor = aten::sub(%867, %869, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %871 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.148 : Tensor = aten::reshape(%scale.147, %871) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %873 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.148 : Tensor = aten::reshape(%bias.147, %873) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.74 : int = prim::dtype(%x.97)
      %876 : Tensor = aten::to(%scale.148, %out_dtype.74, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %877 : Tensor = aten::mul(%x.97, %876) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %878 : Tensor = aten::to(%bias.148, %out_dtype.74, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %879 : Tensor = aten::add(%877, %878, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%879)
    block1():
      %880 : Tensor = prim::GetAttr[name="running_mean"](%858)
      %881 : Tensor = prim::GetAttr[name="running_var"](%858)
      %882 : Tensor = prim::GetAttr[name="weight"](%858)
      %883 : Tensor = prim::GetAttr[name="bias"](%858)
      %884 : float = prim::GetAttr[name="eps"](%858)
      %885 : Tensor = aten::batch_norm(%x.97, %882, %883, %880, %881, %44, %33, %884, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%885)
  %out.164 : Tensor = aten::relu_(%out.145) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %887 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="conv2"](%596)
  %888 : Tensor = prim::GetAttr[name="weight"](%887)
  %889 : Tensor? = prim::GetAttr[name="bias"](%887)
  %890 : int[] = prim::ListConstruct(%43, %43)
  %891 : int[] = prim::ListConstruct(%43, %43)
  %892 : int[] = prim::ListConstruct(%43, %43)
  %x.98 : Tensor = aten::conv2d(%out.164, %888, %889, %890, %891, %892, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %894 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%887)
  %895 : bool = prim::requires_grad(%x.98)
  %out.165 : Tensor = prim::If(%895) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %897 : Tensor = prim::GetAttr[name="weight"](%894)
      %898 : Tensor = prim::GetAttr[name="running_var"](%894)
      %899 : float = prim::GetAttr[name="eps"](%894)
      %900 : Tensor = aten::add(%898, %899, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %901 : Tensor = aten::rsqrt(%900) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.149 : Tensor = aten::mul(%897, %901) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %903 : Tensor = prim::GetAttr[name="bias"](%894)
      %904 : Tensor = prim::GetAttr[name="running_mean"](%894)
      %905 : Tensor = aten::mul(%904, %scale.149) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.149 : Tensor = aten::sub(%903, %905, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %907 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.150 : Tensor = aten::reshape(%scale.149, %907) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %909 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.150 : Tensor = aten::reshape(%bias.149, %909) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.75 : int = prim::dtype(%x.98)
      %912 : Tensor = aten::to(%scale.150, %out_dtype.75, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %913 : Tensor = aten::mul(%x.98, %912) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %914 : Tensor = aten::to(%bias.150, %out_dtype.75, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %915 : Tensor = aten::add(%913, %914, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%915)
    block1():
      %916 : Tensor = prim::GetAttr[name="running_mean"](%894)
      %917 : Tensor = prim::GetAttr[name="running_var"](%894)
      %918 : Tensor = prim::GetAttr[name="weight"](%894)
      %919 : Tensor = prim::GetAttr[name="bias"](%894)
      %920 : float = prim::GetAttr[name="eps"](%894)
      %921 : Tensor = aten::batch_norm(%x.98, %918, %919, %916, %917, %44, %33, %920, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%921)
  %out.166 : Tensor = aten::relu_(%out.165) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %923 : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d = prim::GetAttr[name="conv3"](%596)
  %924 : Tensor = prim::GetAttr[name="weight"](%923)
  %925 : Tensor? = prim::GetAttr[name="bias"](%923)
  %926 : int[] = prim::ListConstruct(%43, %43)
  %927 : int[] = prim::ListConstruct(%48, %48)
  %928 : int[] = prim::ListConstruct(%43, %43)
  %x.99 : Tensor = aten::conv2d(%out.166, %924, %925, %926, %927, %928, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %930 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%923)
  %931 : bool = prim::requires_grad(%x.99)
  %out.167 : Tensor = prim::If(%931) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %933 : Tensor = prim::GetAttr[name="weight"](%930)
      %934 : Tensor = prim::GetAttr[name="running_var"](%930)
      %935 : float = prim::GetAttr[name="eps"](%930)
      %936 : Tensor = aten::add(%934, %935, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %937 : Tensor = aten::rsqrt(%936) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.151 : Tensor = aten::mul(%933, %937) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %939 : Tensor = prim::GetAttr[name="bias"](%930)
      %940 : Tensor = prim::GetAttr[name="running_mean"](%930)
      %941 : Tensor = aten::mul(%940, %scale.151) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.151 : Tensor = aten::sub(%939, %941, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %943 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.152 : Tensor = aten::reshape(%scale.151, %943) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %945 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.152 : Tensor = aten::reshape(%bias.151, %945) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.76 : int = prim::dtype(%x.99)
      %948 : Tensor = aten::to(%scale.152, %out_dtype.76, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %949 : Tensor = aten::mul(%x.99, %948) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %950 : Tensor = aten::to(%bias.152, %out_dtype.76, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %951 : Tensor = aten::add(%949, %950, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%951)
    block1():
      %952 : Tensor = prim::GetAttr[name="running_mean"](%930)
      %953 : Tensor = prim::GetAttr[name="running_var"](%930)
      %954 : Tensor = prim::GetAttr[name="weight"](%930)
      %955 : Tensor = prim::GetAttr[name="bias"](%930)
      %956 : float = prim::GetAttr[name="eps"](%930)
      %957 : Tensor = aten::batch_norm(%x.99, %954, %955, %952, %953, %44, %33, %956, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%957)
  %out.168 : Tensor = aten::add_(%out.167, %input.12, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.10 : Tensor = aten::relu_(%out.168) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %960 : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d = prim::GetAttr[name="conv1"](%597)
  %961 : Tensor = prim::GetAttr[name="weight"](%960)
  %962 : Tensor? = prim::GetAttr[name="bias"](%960)
  %963 : int[] = prim::ListConstruct(%43, %43)
  %964 : int[] = prim::ListConstruct(%48, %48)
  %965 : int[] = prim::ListConstruct(%43, %43)
  %x.101 : Tensor = aten::conv2d(%input.10, %961, %962, %963, %964, %965, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %967 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%960)
  %968 : bool = prim::requires_grad(%x.101)
  %out.175 : Tensor = prim::If(%968) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %970 : Tensor = prim::GetAttr[name="weight"](%967)
      %971 : Tensor = prim::GetAttr[name="running_var"](%967)
      %972 : float = prim::GetAttr[name="eps"](%967)
      %973 : Tensor = aten::add(%971, %972, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %974 : Tensor = aten::rsqrt(%973) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.183 : Tensor = aten::mul(%970, %974) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %976 : Tensor = prim::GetAttr[name="bias"](%967)
      %977 : Tensor = prim::GetAttr[name="running_mean"](%967)
      %978 : Tensor = aten::mul(%977, %scale.183) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.183 : Tensor = aten::sub(%976, %978, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %980 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.184 : Tensor = aten::reshape(%scale.183, %980) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %982 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.184 : Tensor = aten::reshape(%bias.183, %982) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.92 : int = prim::dtype(%x.101)
      %985 : Tensor = aten::to(%scale.184, %out_dtype.92, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %986 : Tensor = aten::mul(%x.101, %985) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %987 : Tensor = aten::to(%bias.184, %out_dtype.92, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %988 : Tensor = aten::add(%986, %987, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%988)
    block1():
      %989 : Tensor = prim::GetAttr[name="running_mean"](%967)
      %990 : Tensor = prim::GetAttr[name="running_var"](%967)
      %991 : Tensor = prim::GetAttr[name="weight"](%967)
      %992 : Tensor = prim::GetAttr[name="bias"](%967)
      %993 : float = prim::GetAttr[name="eps"](%967)
      %994 : Tensor = aten::batch_norm(%x.101, %991, %992, %989, %990, %44, %33, %993, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%994)
  %out.176 : Tensor = aten::relu_(%out.175) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %996 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="conv2"](%597)
  %997 : Tensor = prim::GetAttr[name="weight"](%996)
  %998 : Tensor? = prim::GetAttr[name="bias"](%996)
  %999 : int[] = prim::ListConstruct(%43, %43)
  %1000 : int[] = prim::ListConstruct(%43, %43)
  %1001 : int[] = prim::ListConstruct(%43, %43)
  %x.102 : Tensor = aten::conv2d(%out.176, %997, %998, %999, %1000, %1001, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1003 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%996)
  %1004 : bool = prim::requires_grad(%x.102)
  %out.177 : Tensor = prim::If(%1004) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1006 : Tensor = prim::GetAttr[name="weight"](%1003)
      %1007 : Tensor = prim::GetAttr[name="running_var"](%1003)
      %1008 : float = prim::GetAttr[name="eps"](%1003)
      %1009 : Tensor = aten::add(%1007, %1008, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1010 : Tensor = aten::rsqrt(%1009) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.185 : Tensor = aten::mul(%1006, %1010) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1012 : Tensor = prim::GetAttr[name="bias"](%1003)
      %1013 : Tensor = prim::GetAttr[name="running_mean"](%1003)
      %1014 : Tensor = aten::mul(%1013, %scale.185) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.185 : Tensor = aten::sub(%1012, %1014, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1016 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.186 : Tensor = aten::reshape(%scale.185, %1016) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1018 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.186 : Tensor = aten::reshape(%bias.185, %1018) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.93 : int = prim::dtype(%x.102)
      %1021 : Tensor = aten::to(%scale.186, %out_dtype.93, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1022 : Tensor = aten::mul(%x.102, %1021) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1023 : Tensor = aten::to(%bias.186, %out_dtype.93, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1024 : Tensor = aten::add(%1022, %1023, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1024)
    block1():
      %1025 : Tensor = prim::GetAttr[name="running_mean"](%1003)
      %1026 : Tensor = prim::GetAttr[name="running_var"](%1003)
      %1027 : Tensor = prim::GetAttr[name="weight"](%1003)
      %1028 : Tensor = prim::GetAttr[name="bias"](%1003)
      %1029 : float = prim::GetAttr[name="eps"](%1003)
      %1030 : Tensor = aten::batch_norm(%x.102, %1027, %1028, %1025, %1026, %44, %33, %1029, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1030)
  %out.178 : Tensor = aten::relu_(%out.177) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %1032 : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d = prim::GetAttr[name="conv3"](%597)
  %1033 : Tensor = prim::GetAttr[name="weight"](%1032)
  %1034 : Tensor? = prim::GetAttr[name="bias"](%1032)
  %1035 : int[] = prim::ListConstruct(%43, %43)
  %1036 : int[] = prim::ListConstruct(%48, %48)
  %1037 : int[] = prim::ListConstruct(%43, %43)
  %x.103 : Tensor = aten::conv2d(%out.178, %1033, %1034, %1035, %1036, %1037, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1039 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1032)
  %1040 : bool = prim::requires_grad(%x.103)
  %out.179 : Tensor = prim::If(%1040) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1042 : Tensor = prim::GetAttr[name="weight"](%1039)
      %1043 : Tensor = prim::GetAttr[name="running_var"](%1039)
      %1044 : float = prim::GetAttr[name="eps"](%1039)
      %1045 : Tensor = aten::add(%1043, %1044, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1046 : Tensor = aten::rsqrt(%1045) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.187 : Tensor = aten::mul(%1042, %1046) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1048 : Tensor = prim::GetAttr[name="bias"](%1039)
      %1049 : Tensor = prim::GetAttr[name="running_mean"](%1039)
      %1050 : Tensor = aten::mul(%1049, %scale.187) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.187 : Tensor = aten::sub(%1048, %1050, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1052 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.188 : Tensor = aten::reshape(%scale.187, %1052) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1054 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.188 : Tensor = aten::reshape(%bias.187, %1054) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.94 : int = prim::dtype(%x.103)
      %1057 : Tensor = aten::to(%scale.188, %out_dtype.94, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1058 : Tensor = aten::mul(%x.103, %1057) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1059 : Tensor = aten::to(%bias.188, %out_dtype.94, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1060 : Tensor = aten::add(%1058, %1059, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1060)
    block1():
      %1061 : Tensor = prim::GetAttr[name="running_mean"](%1039)
      %1062 : Tensor = prim::GetAttr[name="running_var"](%1039)
      %1063 : Tensor = prim::GetAttr[name="weight"](%1039)
      %1064 : Tensor = prim::GetAttr[name="bias"](%1039)
      %1065 : float = prim::GetAttr[name="eps"](%1039)
      %1066 : Tensor = aten::batch_norm(%x.103, %1063, %1064, %1061, %1062, %44, %33, %1065, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1066)
  %out.180 : Tensor = aten::add_(%out.179, %input.10, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %x.86 : Tensor = aten::relu_(%out.180) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %1069 : str[] = prim::GetAttr[name="_out_features"](%166)
  %1070 : bool = aten::__contains__(%1069, %name.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:15
   = prim::If(%1070) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:12
    block0():
       = aten::_set_item(%bottom_up_features.1, %name.4, %x.86) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:451:16
      -> ()
    block1():
      -> ()
  %1071 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_17.BottleneckBlock = prim::GetAttr[name="0"](%225)
  %1072 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="1"](%225)
  %1073 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="2"](%225)
  %1074 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="3"](%225)
  %1075 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="4"](%225)
  %1076 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="5"](%225)
  %1077 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="6"](%225)
  %1078 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="7"](%225)
  %1079 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="8"](%225)
  %1080 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="9"](%225)
  %1081 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="10"](%225)
  %1082 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="11"](%225)
  %1083 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="12"](%225)
  %1084 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="13"](%225)
  %1085 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="14"](%225)
  %1086 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="15"](%225)
  %1087 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="16"](%225)
  %1088 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="17"](%225)
  %1089 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="18"](%225)
  %1090 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="19"](%225)
  %1091 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="20"](%225)
  %1092 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="21"](%225)
  %1093 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="22"](%225)
  %1094 : __torch__.detectron2.layers.wrappers.___torch_mangle_14.Conv2d = prim::GetAttr[name="conv1"](%1071)
  %1095 : Tensor = prim::GetAttr[name="weight"](%1094)
  %1096 : Tensor? = prim::GetAttr[name="bias"](%1094)
  %1097 : int[] = prim::ListConstruct(%46, %46)
  %1098 : int[] = prim::ListConstruct(%48, %48)
  %1099 : int[] = prim::ListConstruct(%43, %43)
  %x.104 : Tensor = aten::conv2d(%x.86, %1095, %1096, %1097, %1098, %1099, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1101 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1094)
  %1102 : bool = prim::requires_grad(%x.104)
  %out.181 : Tensor = prim::If(%1102) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1104 : Tensor = prim::GetAttr[name="weight"](%1101)
      %1105 : Tensor = prim::GetAttr[name="running_var"](%1101)
      %1106 : float = prim::GetAttr[name="eps"](%1101)
      %1107 : Tensor = aten::add(%1105, %1106, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1108 : Tensor = aten::rsqrt(%1107) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.189 : Tensor = aten::mul(%1104, %1108) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1110 : Tensor = prim::GetAttr[name="bias"](%1101)
      %1111 : Tensor = prim::GetAttr[name="running_mean"](%1101)
      %1112 : Tensor = aten::mul(%1111, %scale.189) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.189 : Tensor = aten::sub(%1110, %1112, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1114 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.190 : Tensor = aten::reshape(%scale.189, %1114) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1116 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.190 : Tensor = aten::reshape(%bias.189, %1116) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.95 : int = prim::dtype(%x.104)
      %1119 : Tensor = aten::to(%scale.190, %out_dtype.95, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1120 : Tensor = aten::mul(%x.104, %1119) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1121 : Tensor = aten::to(%bias.190, %out_dtype.95, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1122 : Tensor = aten::add(%1120, %1121, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1122)
    block1():
      %1123 : Tensor = prim::GetAttr[name="running_mean"](%1101)
      %1124 : Tensor = prim::GetAttr[name="running_var"](%1101)
      %1125 : Tensor = prim::GetAttr[name="weight"](%1101)
      %1126 : Tensor = prim::GetAttr[name="bias"](%1101)
      %1127 : float = prim::GetAttr[name="eps"](%1101)
      %1128 : Tensor = aten::batch_norm(%x.104, %1125, %1126, %1123, %1124, %44, %33, %1127, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1128)
  %out.182 : Tensor = aten::relu_(%out.181) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %1130 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1071)
  %1131 : Tensor = prim::GetAttr[name="weight"](%1130)
  %1132 : Tensor? = prim::GetAttr[name="bias"](%1130)
  %1133 : int[] = prim::ListConstruct(%43, %43)
  %1134 : int[] = prim::ListConstruct(%43, %43)
  %1135 : int[] = prim::ListConstruct(%43, %43)
  %x.105 : Tensor = aten::conv2d(%out.182, %1131, %1132, %1133, %1134, %1135, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1137 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1130)
  %1138 : bool = prim::requires_grad(%x.105)
  %out.183 : Tensor = prim::If(%1138) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1140 : Tensor = prim::GetAttr[name="weight"](%1137)
      %1141 : Tensor = prim::GetAttr[name="running_var"](%1137)
      %1142 : float = prim::GetAttr[name="eps"](%1137)
      %1143 : Tensor = aten::add(%1141, %1142, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1144 : Tensor = aten::rsqrt(%1143) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.191 : Tensor = aten::mul(%1140, %1144) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1146 : Tensor = prim::GetAttr[name="bias"](%1137)
      %1147 : Tensor = prim::GetAttr[name="running_mean"](%1137)
      %1148 : Tensor = aten::mul(%1147, %scale.191) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.191 : Tensor = aten::sub(%1146, %1148, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1150 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.192 : Tensor = aten::reshape(%scale.191, %1150) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1152 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.192 : Tensor = aten::reshape(%bias.191, %1152) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.96 : int = prim::dtype(%x.105)
      %1155 : Tensor = aten::to(%scale.192, %out_dtype.96, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1156 : Tensor = aten::mul(%x.105, %1155) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1157 : Tensor = aten::to(%bias.192, %out_dtype.96, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1158 : Tensor = aten::add(%1156, %1157, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1158)
    block1():
      %1159 : Tensor = prim::GetAttr[name="running_mean"](%1137)
      %1160 : Tensor = prim::GetAttr[name="running_var"](%1137)
      %1161 : Tensor = prim::GetAttr[name="weight"](%1137)
      %1162 : Tensor = prim::GetAttr[name="bias"](%1137)
      %1163 : float = prim::GetAttr[name="eps"](%1137)
      %1164 : Tensor = aten::batch_norm(%x.105, %1161, %1162, %1159, %1160, %44, %33, %1163, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1164)
  %out.184 : Tensor = aten::relu_(%out.183) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %1166 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1071)
  %1167 : Tensor = prim::GetAttr[name="weight"](%1166)
  %1168 : Tensor? = prim::GetAttr[name="bias"](%1166)
  %1169 : int[] = prim::ListConstruct(%43, %43)
  %1170 : int[] = prim::ListConstruct(%48, %48)
  %1171 : int[] = prim::ListConstruct(%43, %43)
  %x.106 : Tensor = aten::conv2d(%out.184, %1167, %1168, %1169, %1170, %1171, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1173 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1166)
  %1174 : bool = prim::requires_grad(%x.106)
  %out.185 : Tensor = prim::If(%1174) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1176 : Tensor = prim::GetAttr[name="weight"](%1173)
      %1177 : Tensor = prim::GetAttr[name="running_var"](%1173)
      %1178 : float = prim::GetAttr[name="eps"](%1173)
      %1179 : Tensor = aten::add(%1177, %1178, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1180 : Tensor = aten::rsqrt(%1179) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.193 : Tensor = aten::mul(%1176, %1180) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1182 : Tensor = prim::GetAttr[name="bias"](%1173)
      %1183 : Tensor = prim::GetAttr[name="running_mean"](%1173)
      %1184 : Tensor = aten::mul(%1183, %scale.193) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.193 : Tensor = aten::sub(%1182, %1184, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1186 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.194 : Tensor = aten::reshape(%scale.193, %1186) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1188 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.194 : Tensor = aten::reshape(%bias.193, %1188) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.97 : int = prim::dtype(%x.106)
      %1191 : Tensor = aten::to(%scale.194, %out_dtype.97, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1192 : Tensor = aten::mul(%x.106, %1191) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1193 : Tensor = aten::to(%bias.194, %out_dtype.97, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1194 : Tensor = aten::add(%1192, %1193, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1194)
    block1():
      %1195 : Tensor = prim::GetAttr[name="running_mean"](%1173)
      %1196 : Tensor = prim::GetAttr[name="running_var"](%1173)
      %1197 : Tensor = prim::GetAttr[name="weight"](%1173)
      %1198 : Tensor = prim::GetAttr[name="bias"](%1173)
      %1199 : float = prim::GetAttr[name="eps"](%1173)
      %1200 : Tensor = aten::batch_norm(%x.106, %1197, %1198, %1195, %1196, %44, %33, %1199, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1200)
  %1201 : __torch__.detectron2.layers.wrappers.___torch_mangle_13.Conv2d = prim::GetAttr[name="shortcut"](%1071)
  %1202 : Tensor = prim::GetAttr[name="weight"](%1201)
  %1203 : Tensor? = prim::GetAttr[name="bias"](%1201)
  %1204 : int[] = prim::ListConstruct(%46, %46)
  %1205 : int[] = prim::ListConstruct(%48, %48)
  %1206 : int[] = prim::ListConstruct(%43, %43)
  %x.107 : Tensor = aten::conv2d(%x.86, %1202, %1203, %1204, %1205, %1206, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1208 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1201)
  %1209 : bool = prim::requires_grad(%x.107)
  %shortcut.4 : Tensor = prim::If(%1209) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1211 : Tensor = prim::GetAttr[name="weight"](%1208)
      %1212 : Tensor = prim::GetAttr[name="running_var"](%1208)
      %1213 : float = prim::GetAttr[name="eps"](%1208)
      %1214 : Tensor = aten::add(%1212, %1213, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1215 : Tensor = aten::rsqrt(%1214) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.195 : Tensor = aten::mul(%1211, %1215) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1217 : Tensor = prim::GetAttr[name="bias"](%1208)
      %1218 : Tensor = prim::GetAttr[name="running_mean"](%1208)
      %1219 : Tensor = aten::mul(%1218, %scale.195) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.195 : Tensor = aten::sub(%1217, %1219, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1221 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.196 : Tensor = aten::reshape(%scale.195, %1221) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1223 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.196 : Tensor = aten::reshape(%bias.195, %1223) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.98 : int = prim::dtype(%x.107)
      %1226 : Tensor = aten::to(%scale.196, %out_dtype.98, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1227 : Tensor = aten::mul(%x.107, %1226) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1228 : Tensor = aten::to(%bias.196, %out_dtype.98, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1229 : Tensor = aten::add(%1227, %1228, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1229)
    block1():
      %1230 : Tensor = prim::GetAttr[name="running_mean"](%1208)
      %1231 : Tensor = prim::GetAttr[name="running_var"](%1208)
      %1232 : Tensor = prim::GetAttr[name="weight"](%1208)
      %1233 : Tensor = prim::GetAttr[name="bias"](%1208)
      %1234 : float = prim::GetAttr[name="eps"](%1208)
      %1235 : Tensor = aten::batch_norm(%x.107, %1232, %1233, %1230, %1231, %44, %33, %1234, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1235)
  %out.186 : Tensor = aten::add_(%out.185, %shortcut.4, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.14 : Tensor = aten::relu_(%out.186) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %1238 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1072)
  %1239 : Tensor = prim::GetAttr[name="weight"](%1238)
  %1240 : Tensor? = prim::GetAttr[name="bias"](%1238)
  %1241 : int[] = prim::ListConstruct(%43, %43)
  %1242 : int[] = prim::ListConstruct(%48, %48)
  %1243 : int[] = prim::ListConstruct(%43, %43)
  %x.108 : Tensor = aten::conv2d(%input.14, %1239, %1240, %1241, %1242, %1243, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1245 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1238)
  %1246 : bool = prim::requires_grad(%x.108)
  %out.187 : Tensor = prim::If(%1246) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1248 : Tensor = prim::GetAttr[name="weight"](%1245)
      %1249 : Tensor = prim::GetAttr[name="running_var"](%1245)
      %1250 : float = prim::GetAttr[name="eps"](%1245)
      %1251 : Tensor = aten::add(%1249, %1250, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1252 : Tensor = aten::rsqrt(%1251) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.197 : Tensor = aten::mul(%1248, %1252) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1254 : Tensor = prim::GetAttr[name="bias"](%1245)
      %1255 : Tensor = prim::GetAttr[name="running_mean"](%1245)
      %1256 : Tensor = aten::mul(%1255, %scale.197) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.197 : Tensor = aten::sub(%1254, %1256, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1258 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.198 : Tensor = aten::reshape(%scale.197, %1258) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1260 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.198 : Tensor = aten::reshape(%bias.197, %1260) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.99 : int = prim::dtype(%x.108)
      %1263 : Tensor = aten::to(%scale.198, %out_dtype.99, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1264 : Tensor = aten::mul(%x.108, %1263) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1265 : Tensor = aten::to(%bias.198, %out_dtype.99, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1266 : Tensor = aten::add(%1264, %1265, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1266)
    block1():
      %1267 : Tensor = prim::GetAttr[name="running_mean"](%1245)
      %1268 : Tensor = prim::GetAttr[name="running_var"](%1245)
      %1269 : Tensor = prim::GetAttr[name="weight"](%1245)
      %1270 : Tensor = prim::GetAttr[name="bias"](%1245)
      %1271 : float = prim::GetAttr[name="eps"](%1245)
      %1272 : Tensor = aten::batch_norm(%x.108, %1269, %1270, %1267, %1268, %44, %33, %1271, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1272)
  %out.188 : Tensor = aten::relu_(%out.187) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %1274 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1072)
  %1275 : Tensor = prim::GetAttr[name="weight"](%1274)
  %1276 : Tensor? = prim::GetAttr[name="bias"](%1274)
  %1277 : int[] = prim::ListConstruct(%43, %43)
  %1278 : int[] = prim::ListConstruct(%43, %43)
  %1279 : int[] = prim::ListConstruct(%43, %43)
  %x.109 : Tensor = aten::conv2d(%out.188, %1275, %1276, %1277, %1278, %1279, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1281 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1274)
  %1282 : bool = prim::requires_grad(%x.109)
  %out.189 : Tensor = prim::If(%1282) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1284 : Tensor = prim::GetAttr[name="weight"](%1281)
      %1285 : Tensor = prim::GetAttr[name="running_var"](%1281)
      %1286 : float = prim::GetAttr[name="eps"](%1281)
      %1287 : Tensor = aten::add(%1285, %1286, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1288 : Tensor = aten::rsqrt(%1287) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.199 : Tensor = aten::mul(%1284, %1288) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1290 : Tensor = prim::GetAttr[name="bias"](%1281)
      %1291 : Tensor = prim::GetAttr[name="running_mean"](%1281)
      %1292 : Tensor = aten::mul(%1291, %scale.199) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.199 : Tensor = aten::sub(%1290, %1292, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1294 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.200 : Tensor = aten::reshape(%scale.199, %1294) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1296 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.200 : Tensor = aten::reshape(%bias.199, %1296) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.100 : int = prim::dtype(%x.109)
      %1299 : Tensor = aten::to(%scale.200, %out_dtype.100, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1300 : Tensor = aten::mul(%x.109, %1299) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1301 : Tensor = aten::to(%bias.200, %out_dtype.100, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1302 : Tensor = aten::add(%1300, %1301, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1302)
    block1():
      %1303 : Tensor = prim::GetAttr[name="running_mean"](%1281)
      %1304 : Tensor = prim::GetAttr[name="running_var"](%1281)
      %1305 : Tensor = prim::GetAttr[name="weight"](%1281)
      %1306 : Tensor = prim::GetAttr[name="bias"](%1281)
      %1307 : float = prim::GetAttr[name="eps"](%1281)
      %1308 : Tensor = aten::batch_norm(%x.109, %1305, %1306, %1303, %1304, %44, %33, %1307, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1308)
  %out.190 : Tensor = aten::relu_(%out.189) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %1310 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1072)
  %1311 : Tensor = prim::GetAttr[name="weight"](%1310)
  %1312 : Tensor? = prim::GetAttr[name="bias"](%1310)
  %1313 : int[] = prim::ListConstruct(%43, %43)
  %1314 : int[] = prim::ListConstruct(%48, %48)
  %1315 : int[] = prim::ListConstruct(%43, %43)
  %x.110 : Tensor = aten::conv2d(%out.190, %1311, %1312, %1313, %1314, %1315, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1317 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1310)
  %1318 : bool = prim::requires_grad(%x.110)
  %out.191 : Tensor = prim::If(%1318) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1320 : Tensor = prim::GetAttr[name="weight"](%1317)
      %1321 : Tensor = prim::GetAttr[name="running_var"](%1317)
      %1322 : float = prim::GetAttr[name="eps"](%1317)
      %1323 : Tensor = aten::add(%1321, %1322, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1324 : Tensor = aten::rsqrt(%1323) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.201 : Tensor = aten::mul(%1320, %1324) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1326 : Tensor = prim::GetAttr[name="bias"](%1317)
      %1327 : Tensor = prim::GetAttr[name="running_mean"](%1317)
      %1328 : Tensor = aten::mul(%1327, %scale.201) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.201 : Tensor = aten::sub(%1326, %1328, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1330 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.202 : Tensor = aten::reshape(%scale.201, %1330) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1332 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.202 : Tensor = aten::reshape(%bias.201, %1332) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.101 : int = prim::dtype(%x.110)
      %1335 : Tensor = aten::to(%scale.202, %out_dtype.101, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1336 : Tensor = aten::mul(%x.110, %1335) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1337 : Tensor = aten::to(%bias.202, %out_dtype.101, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1338 : Tensor = aten::add(%1336, %1337, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1338)
    block1():
      %1339 : Tensor = prim::GetAttr[name="running_mean"](%1317)
      %1340 : Tensor = prim::GetAttr[name="running_var"](%1317)
      %1341 : Tensor = prim::GetAttr[name="weight"](%1317)
      %1342 : Tensor = prim::GetAttr[name="bias"](%1317)
      %1343 : float = prim::GetAttr[name="eps"](%1317)
      %1344 : Tensor = aten::batch_norm(%x.110, %1341, %1342, %1339, %1340, %44, %33, %1343, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1344)
  %out.192 : Tensor = aten::add_(%out.191, %input.14, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.16 : Tensor = aten::relu_(%out.192) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %1347 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1073)
  %1348 : Tensor = prim::GetAttr[name="weight"](%1347)
  %1349 : Tensor? = prim::GetAttr[name="bias"](%1347)
  %1350 : int[] = prim::ListConstruct(%43, %43)
  %1351 : int[] = prim::ListConstruct(%48, %48)
  %1352 : int[] = prim::ListConstruct(%43, %43)
  %x.13 : Tensor = aten::conv2d(%input.16, %1348, %1349, %1350, %1351, %1352, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1354 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1347)
  %1355 : bool = prim::requires_grad(%x.13)
  %out.25 : Tensor = prim::If(%1355) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1357 : Tensor = prim::GetAttr[name="weight"](%1354)
      %1358 : Tensor = prim::GetAttr[name="running_var"](%1354)
      %1359 : float = prim::GetAttr[name="eps"](%1354)
      %1360 : Tensor = aten::add(%1358, %1359, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1361 : Tensor = aten::rsqrt(%1360) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.21 : Tensor = aten::mul(%1357, %1361) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1363 : Tensor = prim::GetAttr[name="bias"](%1354)
      %1364 : Tensor = prim::GetAttr[name="running_mean"](%1354)
      %1365 : Tensor = aten::mul(%1364, %scale.21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.21 : Tensor = aten::sub(%1363, %1365, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1367 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.22 : Tensor = aten::reshape(%scale.21, %1367) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1369 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.22 : Tensor = aten::reshape(%bias.21, %1369) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.11 : int = prim::dtype(%x.13)
      %1372 : Tensor = aten::to(%scale.22, %out_dtype.11, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1373 : Tensor = aten::mul(%x.13, %1372) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1374 : Tensor = aten::to(%bias.22, %out_dtype.11, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1375 : Tensor = aten::add(%1373, %1374, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1375)
    block1():
      %1376 : Tensor = prim::GetAttr[name="running_mean"](%1354)
      %1377 : Tensor = prim::GetAttr[name="running_var"](%1354)
      %1378 : Tensor = prim::GetAttr[name="weight"](%1354)
      %1379 : Tensor = prim::GetAttr[name="bias"](%1354)
      %1380 : float = prim::GetAttr[name="eps"](%1354)
      %1381 : Tensor = aten::batch_norm(%x.13, %1378, %1379, %1376, %1377, %44, %33, %1380, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1381)
  %out.20 : Tensor = aten::relu_(%out.25) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %1383 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1073)
  %1384 : Tensor = prim::GetAttr[name="weight"](%1383)
  %1385 : Tensor? = prim::GetAttr[name="bias"](%1383)
  %1386 : int[] = prim::ListConstruct(%43, %43)
  %1387 : int[] = prim::ListConstruct(%43, %43)
  %1388 : int[] = prim::ListConstruct(%43, %43)
  %x.14 : Tensor = aten::conv2d(%out.20, %1384, %1385, %1386, %1387, %1388, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1390 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1383)
  %1391 : bool = prim::requires_grad(%x.14)
  %out.21 : Tensor = prim::If(%1391) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1393 : Tensor = prim::GetAttr[name="weight"](%1390)
      %1394 : Tensor = prim::GetAttr[name="running_var"](%1390)
      %1395 : float = prim::GetAttr[name="eps"](%1390)
      %1396 : Tensor = aten::add(%1394, %1395, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1397 : Tensor = aten::rsqrt(%1396) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.23 : Tensor = aten::mul(%1393, %1397) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1399 : Tensor = prim::GetAttr[name="bias"](%1390)
      %1400 : Tensor = prim::GetAttr[name="running_mean"](%1390)
      %1401 : Tensor = aten::mul(%1400, %scale.23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.23 : Tensor = aten::sub(%1399, %1401, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1403 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.24 : Tensor = aten::reshape(%scale.23, %1403) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1405 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.24 : Tensor = aten::reshape(%bias.23, %1405) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.12 : int = prim::dtype(%x.14)
      %1408 : Tensor = aten::to(%scale.24, %out_dtype.12, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1409 : Tensor = aten::mul(%x.14, %1408) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1410 : Tensor = aten::to(%bias.24, %out_dtype.12, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1411 : Tensor = aten::add(%1409, %1410, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1411)
    block1():
      %1412 : Tensor = prim::GetAttr[name="running_mean"](%1390)
      %1413 : Tensor = prim::GetAttr[name="running_var"](%1390)
      %1414 : Tensor = prim::GetAttr[name="weight"](%1390)
      %1415 : Tensor = prim::GetAttr[name="bias"](%1390)
      %1416 : float = prim::GetAttr[name="eps"](%1390)
      %1417 : Tensor = aten::batch_norm(%x.14, %1414, %1415, %1412, %1413, %44, %33, %1416, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1417)
  %out.22 : Tensor = aten::relu_(%out.21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %1419 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1073)
  %1420 : Tensor = prim::GetAttr[name="weight"](%1419)
  %1421 : Tensor? = prim::GetAttr[name="bias"](%1419)
  %1422 : int[] = prim::ListConstruct(%43, %43)
  %1423 : int[] = prim::ListConstruct(%48, %48)
  %1424 : int[] = prim::ListConstruct(%43, %43)
  %x.15 : Tensor = aten::conv2d(%out.22, %1420, %1421, %1422, %1423, %1424, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1426 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1419)
  %1427 : bool = prim::requires_grad(%x.15)
  %out.23 : Tensor = prim::If(%1427) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1429 : Tensor = prim::GetAttr[name="weight"](%1426)
      %1430 : Tensor = prim::GetAttr[name="running_var"](%1426)
      %1431 : float = prim::GetAttr[name="eps"](%1426)
      %1432 : Tensor = aten::add(%1430, %1431, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1433 : Tensor = aten::rsqrt(%1432) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.25 : Tensor = aten::mul(%1429, %1433) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1435 : Tensor = prim::GetAttr[name="bias"](%1426)
      %1436 : Tensor = prim::GetAttr[name="running_mean"](%1426)
      %1437 : Tensor = aten::mul(%1436, %scale.25) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.25 : Tensor = aten::sub(%1435, %1437, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1439 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.26 : Tensor = aten::reshape(%scale.25, %1439) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1441 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.26 : Tensor = aten::reshape(%bias.25, %1441) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.13 : int = prim::dtype(%x.15)
      %1444 : Tensor = aten::to(%scale.26, %out_dtype.13, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1445 : Tensor = aten::mul(%x.15, %1444) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1446 : Tensor = aten::to(%bias.26, %out_dtype.13, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1447 : Tensor = aten::add(%1445, %1446, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1447)
    block1():
      %1448 : Tensor = prim::GetAttr[name="running_mean"](%1426)
      %1449 : Tensor = prim::GetAttr[name="running_var"](%1426)
      %1450 : Tensor = prim::GetAttr[name="weight"](%1426)
      %1451 : Tensor = prim::GetAttr[name="bias"](%1426)
      %1452 : float = prim::GetAttr[name="eps"](%1426)
      %1453 : Tensor = aten::batch_norm(%x.15, %1450, %1451, %1448, %1449, %44, %33, %1452, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1453)
  %out.24 : Tensor = aten::add_(%out.23, %input.16, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.18 : Tensor = aten::relu_(%out.24) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %1456 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1074)
  %1457 : Tensor = prim::GetAttr[name="weight"](%1456)
  %1458 : Tensor? = prim::GetAttr[name="bias"](%1456)
  %1459 : int[] = prim::ListConstruct(%43, %43)
  %1460 : int[] = prim::ListConstruct(%48, %48)
  %1461 : int[] = prim::ListConstruct(%43, %43)
  %x.16 : Tensor = aten::conv2d(%input.18, %1457, %1458, %1459, %1460, %1461, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1463 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1456)
  %1464 : bool = prim::requires_grad(%x.16)
  %out.31 : Tensor = prim::If(%1464) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1466 : Tensor = prim::GetAttr[name="weight"](%1463)
      %1467 : Tensor = prim::GetAttr[name="running_var"](%1463)
      %1468 : float = prim::GetAttr[name="eps"](%1463)
      %1469 : Tensor = aten::add(%1467, %1468, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1470 : Tensor = aten::rsqrt(%1469) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.27 : Tensor = aten::mul(%1466, %1470) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1472 : Tensor = prim::GetAttr[name="bias"](%1463)
      %1473 : Tensor = prim::GetAttr[name="running_mean"](%1463)
      %1474 : Tensor = aten::mul(%1473, %scale.27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.27 : Tensor = aten::sub(%1472, %1474, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1476 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.28 : Tensor = aten::reshape(%scale.27, %1476) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1478 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.28 : Tensor = aten::reshape(%bias.27, %1478) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.14 : int = prim::dtype(%x.16)
      %1481 : Tensor = aten::to(%scale.28, %out_dtype.14, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1482 : Tensor = aten::mul(%x.16, %1481) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1483 : Tensor = aten::to(%bias.28, %out_dtype.14, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1484 : Tensor = aten::add(%1482, %1483, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1484)
    block1():
      %1485 : Tensor = prim::GetAttr[name="running_mean"](%1463)
      %1486 : Tensor = prim::GetAttr[name="running_var"](%1463)
      %1487 : Tensor = prim::GetAttr[name="weight"](%1463)
      %1488 : Tensor = prim::GetAttr[name="bias"](%1463)
      %1489 : float = prim::GetAttr[name="eps"](%1463)
      %1490 : Tensor = aten::batch_norm(%x.16, %1487, %1488, %1485, %1486, %44, %33, %1489, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1490)
  %out.26 : Tensor = aten::relu_(%out.31) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %1492 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1074)
  %1493 : Tensor = prim::GetAttr[name="weight"](%1492)
  %1494 : Tensor? = prim::GetAttr[name="bias"](%1492)
  %1495 : int[] = prim::ListConstruct(%43, %43)
  %1496 : int[] = prim::ListConstruct(%43, %43)
  %1497 : int[] = prim::ListConstruct(%43, %43)
  %x.17 : Tensor = aten::conv2d(%out.26, %1493, %1494, %1495, %1496, %1497, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1499 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1492)
  %1500 : bool = prim::requires_grad(%x.17)
  %out.27 : Tensor = prim::If(%1500) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1502 : Tensor = prim::GetAttr[name="weight"](%1499)
      %1503 : Tensor = prim::GetAttr[name="running_var"](%1499)
      %1504 : float = prim::GetAttr[name="eps"](%1499)
      %1505 : Tensor = aten::add(%1503, %1504, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1506 : Tensor = aten::rsqrt(%1505) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.29 : Tensor = aten::mul(%1502, %1506) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1508 : Tensor = prim::GetAttr[name="bias"](%1499)
      %1509 : Tensor = prim::GetAttr[name="running_mean"](%1499)
      %1510 : Tensor = aten::mul(%1509, %scale.29) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.29 : Tensor = aten::sub(%1508, %1510, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1512 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.30 : Tensor = aten::reshape(%scale.29, %1512) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1514 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.30 : Tensor = aten::reshape(%bias.29, %1514) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.15 : int = prim::dtype(%x.17)
      %1517 : Tensor = aten::to(%scale.30, %out_dtype.15, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1518 : Tensor = aten::mul(%x.17, %1517) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1519 : Tensor = aten::to(%bias.30, %out_dtype.15, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1520 : Tensor = aten::add(%1518, %1519, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1520)
    block1():
      %1521 : Tensor = prim::GetAttr[name="running_mean"](%1499)
      %1522 : Tensor = prim::GetAttr[name="running_var"](%1499)
      %1523 : Tensor = prim::GetAttr[name="weight"](%1499)
      %1524 : Tensor = prim::GetAttr[name="bias"](%1499)
      %1525 : float = prim::GetAttr[name="eps"](%1499)
      %1526 : Tensor = aten::batch_norm(%x.17, %1523, %1524, %1521, %1522, %44, %33, %1525, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1526)
  %out.28 : Tensor = aten::relu_(%out.27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %1528 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1074)
  %1529 : Tensor = prim::GetAttr[name="weight"](%1528)
  %1530 : Tensor? = prim::GetAttr[name="bias"](%1528)
  %1531 : int[] = prim::ListConstruct(%43, %43)
  %1532 : int[] = prim::ListConstruct(%48, %48)
  %1533 : int[] = prim::ListConstruct(%43, %43)
  %x.18 : Tensor = aten::conv2d(%out.28, %1529, %1530, %1531, %1532, %1533, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1535 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1528)
  %1536 : bool = prim::requires_grad(%x.18)
  %out.29 : Tensor = prim::If(%1536) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1538 : Tensor = prim::GetAttr[name="weight"](%1535)
      %1539 : Tensor = prim::GetAttr[name="running_var"](%1535)
      %1540 : float = prim::GetAttr[name="eps"](%1535)
      %1541 : Tensor = aten::add(%1539, %1540, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1542 : Tensor = aten::rsqrt(%1541) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.31 : Tensor = aten::mul(%1538, %1542) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1544 : Tensor = prim::GetAttr[name="bias"](%1535)
      %1545 : Tensor = prim::GetAttr[name="running_mean"](%1535)
      %1546 : Tensor = aten::mul(%1545, %scale.31) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.31 : Tensor = aten::sub(%1544, %1546, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1548 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.32 : Tensor = aten::reshape(%scale.31, %1548) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1550 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.32 : Tensor = aten::reshape(%bias.31, %1550) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.16 : int = prim::dtype(%x.18)
      %1553 : Tensor = aten::to(%scale.32, %out_dtype.16, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1554 : Tensor = aten::mul(%x.18, %1553) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1555 : Tensor = aten::to(%bias.32, %out_dtype.16, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1556 : Tensor = aten::add(%1554, %1555, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1556)
    block1():
      %1557 : Tensor = prim::GetAttr[name="running_mean"](%1535)
      %1558 : Tensor = prim::GetAttr[name="running_var"](%1535)
      %1559 : Tensor = prim::GetAttr[name="weight"](%1535)
      %1560 : Tensor = prim::GetAttr[name="bias"](%1535)
      %1561 : float = prim::GetAttr[name="eps"](%1535)
      %1562 : Tensor = aten::batch_norm(%x.18, %1559, %1560, %1557, %1558, %44, %33, %1561, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1562)
  %out.30 : Tensor = aten::add_(%out.29, %input.18, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.26 : Tensor = aten::relu_(%out.30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %1565 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1075)
  %1566 : Tensor = prim::GetAttr[name="weight"](%1565)
  %1567 : Tensor? = prim::GetAttr[name="bias"](%1565)
  %1568 : int[] = prim::ListConstruct(%43, %43)
  %1569 : int[] = prim::ListConstruct(%48, %48)
  %1570 : int[] = prim::ListConstruct(%43, %43)
  %x.19 : Tensor = aten::conv2d(%input.26, %1566, %1567, %1568, %1569, %1570, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1572 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1565)
  %1573 : bool = prim::requires_grad(%x.19)
  %out.37 : Tensor = prim::If(%1573) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1575 : Tensor = prim::GetAttr[name="weight"](%1572)
      %1576 : Tensor = prim::GetAttr[name="running_var"](%1572)
      %1577 : float = prim::GetAttr[name="eps"](%1572)
      %1578 : Tensor = aten::add(%1576, %1577, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1579 : Tensor = aten::rsqrt(%1578) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.33 : Tensor = aten::mul(%1575, %1579) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1581 : Tensor = prim::GetAttr[name="bias"](%1572)
      %1582 : Tensor = prim::GetAttr[name="running_mean"](%1572)
      %1583 : Tensor = aten::mul(%1582, %scale.33) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.33 : Tensor = aten::sub(%1581, %1583, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1585 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.34 : Tensor = aten::reshape(%scale.33, %1585) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1587 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.34 : Tensor = aten::reshape(%bias.33, %1587) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.17 : int = prim::dtype(%x.19)
      %1590 : Tensor = aten::to(%scale.34, %out_dtype.17, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1591 : Tensor = aten::mul(%x.19, %1590) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1592 : Tensor = aten::to(%bias.34, %out_dtype.17, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1593 : Tensor = aten::add(%1591, %1592, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1593)
    block1():
      %1594 : Tensor = prim::GetAttr[name="running_mean"](%1572)
      %1595 : Tensor = prim::GetAttr[name="running_var"](%1572)
      %1596 : Tensor = prim::GetAttr[name="weight"](%1572)
      %1597 : Tensor = prim::GetAttr[name="bias"](%1572)
      %1598 : float = prim::GetAttr[name="eps"](%1572)
      %1599 : Tensor = aten::batch_norm(%x.19, %1596, %1597, %1594, %1595, %44, %33, %1598, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1599)
  %out.32 : Tensor = aten::relu_(%out.37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %1601 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1075)
  %1602 : Tensor = prim::GetAttr[name="weight"](%1601)
  %1603 : Tensor? = prim::GetAttr[name="bias"](%1601)
  %1604 : int[] = prim::ListConstruct(%43, %43)
  %1605 : int[] = prim::ListConstruct(%43, %43)
  %1606 : int[] = prim::ListConstruct(%43, %43)
  %x.20 : Tensor = aten::conv2d(%out.32, %1602, %1603, %1604, %1605, %1606, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1608 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1601)
  %1609 : bool = prim::requires_grad(%x.20)
  %out.33 : Tensor = prim::If(%1609) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1611 : Tensor = prim::GetAttr[name="weight"](%1608)
      %1612 : Tensor = prim::GetAttr[name="running_var"](%1608)
      %1613 : float = prim::GetAttr[name="eps"](%1608)
      %1614 : Tensor = aten::add(%1612, %1613, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1615 : Tensor = aten::rsqrt(%1614) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.35 : Tensor = aten::mul(%1611, %1615) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1617 : Tensor = prim::GetAttr[name="bias"](%1608)
      %1618 : Tensor = prim::GetAttr[name="running_mean"](%1608)
      %1619 : Tensor = aten::mul(%1618, %scale.35) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.35 : Tensor = aten::sub(%1617, %1619, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1621 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.36 : Tensor = aten::reshape(%scale.35, %1621) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1623 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.36 : Tensor = aten::reshape(%bias.35, %1623) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.18 : int = prim::dtype(%x.20)
      %1626 : Tensor = aten::to(%scale.36, %out_dtype.18, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1627 : Tensor = aten::mul(%x.20, %1626) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1628 : Tensor = aten::to(%bias.36, %out_dtype.18, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1629 : Tensor = aten::add(%1627, %1628, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1629)
    block1():
      %1630 : Tensor = prim::GetAttr[name="running_mean"](%1608)
      %1631 : Tensor = prim::GetAttr[name="running_var"](%1608)
      %1632 : Tensor = prim::GetAttr[name="weight"](%1608)
      %1633 : Tensor = prim::GetAttr[name="bias"](%1608)
      %1634 : float = prim::GetAttr[name="eps"](%1608)
      %1635 : Tensor = aten::batch_norm(%x.20, %1632, %1633, %1630, %1631, %44, %33, %1634, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1635)
  %out.34 : Tensor = aten::relu_(%out.33) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %1637 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1075)
  %1638 : Tensor = prim::GetAttr[name="weight"](%1637)
  %1639 : Tensor? = prim::GetAttr[name="bias"](%1637)
  %1640 : int[] = prim::ListConstruct(%43, %43)
  %1641 : int[] = prim::ListConstruct(%48, %48)
  %1642 : int[] = prim::ListConstruct(%43, %43)
  %x.21 : Tensor = aten::conv2d(%out.34, %1638, %1639, %1640, %1641, %1642, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1644 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1637)
  %1645 : bool = prim::requires_grad(%x.21)
  %out.35 : Tensor = prim::If(%1645) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1647 : Tensor = prim::GetAttr[name="weight"](%1644)
      %1648 : Tensor = prim::GetAttr[name="running_var"](%1644)
      %1649 : float = prim::GetAttr[name="eps"](%1644)
      %1650 : Tensor = aten::add(%1648, %1649, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1651 : Tensor = aten::rsqrt(%1650) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.37 : Tensor = aten::mul(%1647, %1651) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1653 : Tensor = prim::GetAttr[name="bias"](%1644)
      %1654 : Tensor = prim::GetAttr[name="running_mean"](%1644)
      %1655 : Tensor = aten::mul(%1654, %scale.37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.37 : Tensor = aten::sub(%1653, %1655, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1657 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.38 : Tensor = aten::reshape(%scale.37, %1657) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1659 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.38 : Tensor = aten::reshape(%bias.37, %1659) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.19 : int = prim::dtype(%x.21)
      %1662 : Tensor = aten::to(%scale.38, %out_dtype.19, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1663 : Tensor = aten::mul(%x.21, %1662) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1664 : Tensor = aten::to(%bias.38, %out_dtype.19, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1665 : Tensor = aten::add(%1663, %1664, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1665)
    block1():
      %1666 : Tensor = prim::GetAttr[name="running_mean"](%1644)
      %1667 : Tensor = prim::GetAttr[name="running_var"](%1644)
      %1668 : Tensor = prim::GetAttr[name="weight"](%1644)
      %1669 : Tensor = prim::GetAttr[name="bias"](%1644)
      %1670 : float = prim::GetAttr[name="eps"](%1644)
      %1671 : Tensor = aten::batch_norm(%x.21, %1668, %1669, %1666, %1667, %44, %33, %1670, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1671)
  %out.36 : Tensor = aten::add_(%out.35, %input.26, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.11 : Tensor = aten::relu_(%out.36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %1674 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1076)
  %1675 : Tensor = prim::GetAttr[name="weight"](%1674)
  %1676 : Tensor? = prim::GetAttr[name="bias"](%1674)
  %1677 : int[] = prim::ListConstruct(%43, %43)
  %1678 : int[] = prim::ListConstruct(%48, %48)
  %1679 : int[] = prim::ListConstruct(%43, %43)
  %x.22 : Tensor = aten::conv2d(%input.11, %1675, %1676, %1677, %1678, %1679, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1681 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1674)
  %1682 : bool = prim::requires_grad(%x.22)
  %out.43 : Tensor = prim::If(%1682) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1684 : Tensor = prim::GetAttr[name="weight"](%1681)
      %1685 : Tensor = prim::GetAttr[name="running_var"](%1681)
      %1686 : float = prim::GetAttr[name="eps"](%1681)
      %1687 : Tensor = aten::add(%1685, %1686, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1688 : Tensor = aten::rsqrt(%1687) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.39 : Tensor = aten::mul(%1684, %1688) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1690 : Tensor = prim::GetAttr[name="bias"](%1681)
      %1691 : Tensor = prim::GetAttr[name="running_mean"](%1681)
      %1692 : Tensor = aten::mul(%1691, %scale.39) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.39 : Tensor = aten::sub(%1690, %1692, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1694 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.40 : Tensor = aten::reshape(%scale.39, %1694) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1696 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.40 : Tensor = aten::reshape(%bias.39, %1696) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.20 : int = prim::dtype(%x.22)
      %1699 : Tensor = aten::to(%scale.40, %out_dtype.20, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1700 : Tensor = aten::mul(%x.22, %1699) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1701 : Tensor = aten::to(%bias.40, %out_dtype.20, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1702 : Tensor = aten::add(%1700, %1701, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1702)
    block1():
      %1703 : Tensor = prim::GetAttr[name="running_mean"](%1681)
      %1704 : Tensor = prim::GetAttr[name="running_var"](%1681)
      %1705 : Tensor = prim::GetAttr[name="weight"](%1681)
      %1706 : Tensor = prim::GetAttr[name="bias"](%1681)
      %1707 : float = prim::GetAttr[name="eps"](%1681)
      %1708 : Tensor = aten::batch_norm(%x.22, %1705, %1706, %1703, %1704, %44, %33, %1707, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1708)
  %out.38 : Tensor = aten::relu_(%out.43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %1710 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1076)
  %1711 : Tensor = prim::GetAttr[name="weight"](%1710)
  %1712 : Tensor? = prim::GetAttr[name="bias"](%1710)
  %1713 : int[] = prim::ListConstruct(%43, %43)
  %1714 : int[] = prim::ListConstruct(%43, %43)
  %1715 : int[] = prim::ListConstruct(%43, %43)
  %x.23 : Tensor = aten::conv2d(%out.38, %1711, %1712, %1713, %1714, %1715, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1717 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1710)
  %1718 : bool = prim::requires_grad(%x.23)
  %out.39 : Tensor = prim::If(%1718) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1720 : Tensor = prim::GetAttr[name="weight"](%1717)
      %1721 : Tensor = prim::GetAttr[name="running_var"](%1717)
      %1722 : float = prim::GetAttr[name="eps"](%1717)
      %1723 : Tensor = aten::add(%1721, %1722, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1724 : Tensor = aten::rsqrt(%1723) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.41 : Tensor = aten::mul(%1720, %1724) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1726 : Tensor = prim::GetAttr[name="bias"](%1717)
      %1727 : Tensor = prim::GetAttr[name="running_mean"](%1717)
      %1728 : Tensor = aten::mul(%1727, %scale.41) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.41 : Tensor = aten::sub(%1726, %1728, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1730 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.42 : Tensor = aten::reshape(%scale.41, %1730) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1732 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.42 : Tensor = aten::reshape(%bias.41, %1732) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.21 : int = prim::dtype(%x.23)
      %1735 : Tensor = aten::to(%scale.42, %out_dtype.21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1736 : Tensor = aten::mul(%x.23, %1735) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1737 : Tensor = aten::to(%bias.42, %out_dtype.21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1738 : Tensor = aten::add(%1736, %1737, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1738)
    block1():
      %1739 : Tensor = prim::GetAttr[name="running_mean"](%1717)
      %1740 : Tensor = prim::GetAttr[name="running_var"](%1717)
      %1741 : Tensor = prim::GetAttr[name="weight"](%1717)
      %1742 : Tensor = prim::GetAttr[name="bias"](%1717)
      %1743 : float = prim::GetAttr[name="eps"](%1717)
      %1744 : Tensor = aten::batch_norm(%x.23, %1741, %1742, %1739, %1740, %44, %33, %1743, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1744)
  %out.40 : Tensor = aten::relu_(%out.39) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %1746 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1076)
  %1747 : Tensor = prim::GetAttr[name="weight"](%1746)
  %1748 : Tensor? = prim::GetAttr[name="bias"](%1746)
  %1749 : int[] = prim::ListConstruct(%43, %43)
  %1750 : int[] = prim::ListConstruct(%48, %48)
  %1751 : int[] = prim::ListConstruct(%43, %43)
  %x.24 : Tensor = aten::conv2d(%out.40, %1747, %1748, %1749, %1750, %1751, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1753 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1746)
  %1754 : bool = prim::requires_grad(%x.24)
  %out.41 : Tensor = prim::If(%1754) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1756 : Tensor = prim::GetAttr[name="weight"](%1753)
      %1757 : Tensor = prim::GetAttr[name="running_var"](%1753)
      %1758 : float = prim::GetAttr[name="eps"](%1753)
      %1759 : Tensor = aten::add(%1757, %1758, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1760 : Tensor = aten::rsqrt(%1759) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.43 : Tensor = aten::mul(%1756, %1760) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1762 : Tensor = prim::GetAttr[name="bias"](%1753)
      %1763 : Tensor = prim::GetAttr[name="running_mean"](%1753)
      %1764 : Tensor = aten::mul(%1763, %scale.43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.43 : Tensor = aten::sub(%1762, %1764, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1766 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.44 : Tensor = aten::reshape(%scale.43, %1766) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1768 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.44 : Tensor = aten::reshape(%bias.43, %1768) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.22 : int = prim::dtype(%x.24)
      %1771 : Tensor = aten::to(%scale.44, %out_dtype.22, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1772 : Tensor = aten::mul(%x.24, %1771) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1773 : Tensor = aten::to(%bias.44, %out_dtype.22, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1774 : Tensor = aten::add(%1772, %1773, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1774)
    block1():
      %1775 : Tensor = prim::GetAttr[name="running_mean"](%1753)
      %1776 : Tensor = prim::GetAttr[name="running_var"](%1753)
      %1777 : Tensor = prim::GetAttr[name="weight"](%1753)
      %1778 : Tensor = prim::GetAttr[name="bias"](%1753)
      %1779 : float = prim::GetAttr[name="eps"](%1753)
      %1780 : Tensor = aten::batch_norm(%x.24, %1777, %1778, %1775, %1776, %44, %33, %1779, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1780)
  %out.42 : Tensor = aten::add_(%out.41, %input.11, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.13 : Tensor = aten::relu_(%out.42) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %1783 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1077)
  %1784 : Tensor = prim::GetAttr[name="weight"](%1783)
  %1785 : Tensor? = prim::GetAttr[name="bias"](%1783)
  %1786 : int[] = prim::ListConstruct(%43, %43)
  %1787 : int[] = prim::ListConstruct(%48, %48)
  %1788 : int[] = prim::ListConstruct(%43, %43)
  %x.25 : Tensor = aten::conv2d(%input.13, %1784, %1785, %1786, %1787, %1788, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1790 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1783)
  %1791 : bool = prim::requires_grad(%x.25)
  %out.49 : Tensor = prim::If(%1791) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1793 : Tensor = prim::GetAttr[name="weight"](%1790)
      %1794 : Tensor = prim::GetAttr[name="running_var"](%1790)
      %1795 : float = prim::GetAttr[name="eps"](%1790)
      %1796 : Tensor = aten::add(%1794, %1795, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1797 : Tensor = aten::rsqrt(%1796) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.45 : Tensor = aten::mul(%1793, %1797) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1799 : Tensor = prim::GetAttr[name="bias"](%1790)
      %1800 : Tensor = prim::GetAttr[name="running_mean"](%1790)
      %1801 : Tensor = aten::mul(%1800, %scale.45) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.45 : Tensor = aten::sub(%1799, %1801, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1803 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.46 : Tensor = aten::reshape(%scale.45, %1803) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1805 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.46 : Tensor = aten::reshape(%bias.45, %1805) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.23 : int = prim::dtype(%x.25)
      %1808 : Tensor = aten::to(%scale.46, %out_dtype.23, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1809 : Tensor = aten::mul(%x.25, %1808) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1810 : Tensor = aten::to(%bias.46, %out_dtype.23, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1811 : Tensor = aten::add(%1809, %1810, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1811)
    block1():
      %1812 : Tensor = prim::GetAttr[name="running_mean"](%1790)
      %1813 : Tensor = prim::GetAttr[name="running_var"](%1790)
      %1814 : Tensor = prim::GetAttr[name="weight"](%1790)
      %1815 : Tensor = prim::GetAttr[name="bias"](%1790)
      %1816 : float = prim::GetAttr[name="eps"](%1790)
      %1817 : Tensor = aten::batch_norm(%x.25, %1814, %1815, %1812, %1813, %44, %33, %1816, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1817)
  %out.44 : Tensor = aten::relu_(%out.49) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %1819 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1077)
  %1820 : Tensor = prim::GetAttr[name="weight"](%1819)
  %1821 : Tensor? = prim::GetAttr[name="bias"](%1819)
  %1822 : int[] = prim::ListConstruct(%43, %43)
  %1823 : int[] = prim::ListConstruct(%43, %43)
  %1824 : int[] = prim::ListConstruct(%43, %43)
  %x.26 : Tensor = aten::conv2d(%out.44, %1820, %1821, %1822, %1823, %1824, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1826 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1819)
  %1827 : bool = prim::requires_grad(%x.26)
  %out.45 : Tensor = prim::If(%1827) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1829 : Tensor = prim::GetAttr[name="weight"](%1826)
      %1830 : Tensor = prim::GetAttr[name="running_var"](%1826)
      %1831 : float = prim::GetAttr[name="eps"](%1826)
      %1832 : Tensor = aten::add(%1830, %1831, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1833 : Tensor = aten::rsqrt(%1832) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.47 : Tensor = aten::mul(%1829, %1833) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1835 : Tensor = prim::GetAttr[name="bias"](%1826)
      %1836 : Tensor = prim::GetAttr[name="running_mean"](%1826)
      %1837 : Tensor = aten::mul(%1836, %scale.47) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.47 : Tensor = aten::sub(%1835, %1837, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1839 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.48 : Tensor = aten::reshape(%scale.47, %1839) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1841 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.48 : Tensor = aten::reshape(%bias.47, %1841) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.24 : int = prim::dtype(%x.26)
      %1844 : Tensor = aten::to(%scale.48, %out_dtype.24, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1845 : Tensor = aten::mul(%x.26, %1844) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1846 : Tensor = aten::to(%bias.48, %out_dtype.24, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1847 : Tensor = aten::add(%1845, %1846, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1847)
    block1():
      %1848 : Tensor = prim::GetAttr[name="running_mean"](%1826)
      %1849 : Tensor = prim::GetAttr[name="running_var"](%1826)
      %1850 : Tensor = prim::GetAttr[name="weight"](%1826)
      %1851 : Tensor = prim::GetAttr[name="bias"](%1826)
      %1852 : float = prim::GetAttr[name="eps"](%1826)
      %1853 : Tensor = aten::batch_norm(%x.26, %1850, %1851, %1848, %1849, %44, %33, %1852, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1853)
  %out.46 : Tensor = aten::relu_(%out.45) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %1855 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1077)
  %1856 : Tensor = prim::GetAttr[name="weight"](%1855)
  %1857 : Tensor? = prim::GetAttr[name="bias"](%1855)
  %1858 : int[] = prim::ListConstruct(%43, %43)
  %1859 : int[] = prim::ListConstruct(%48, %48)
  %1860 : int[] = prim::ListConstruct(%43, %43)
  %x.27 : Tensor = aten::conv2d(%out.46, %1856, %1857, %1858, %1859, %1860, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1862 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1855)
  %1863 : bool = prim::requires_grad(%x.27)
  %out.47 : Tensor = prim::If(%1863) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1865 : Tensor = prim::GetAttr[name="weight"](%1862)
      %1866 : Tensor = prim::GetAttr[name="running_var"](%1862)
      %1867 : float = prim::GetAttr[name="eps"](%1862)
      %1868 : Tensor = aten::add(%1866, %1867, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1869 : Tensor = aten::rsqrt(%1868) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.49 : Tensor = aten::mul(%1865, %1869) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1871 : Tensor = prim::GetAttr[name="bias"](%1862)
      %1872 : Tensor = prim::GetAttr[name="running_mean"](%1862)
      %1873 : Tensor = aten::mul(%1872, %scale.49) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.49 : Tensor = aten::sub(%1871, %1873, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1875 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.50 : Tensor = aten::reshape(%scale.49, %1875) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1877 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.50 : Tensor = aten::reshape(%bias.49, %1877) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.25 : int = prim::dtype(%x.27)
      %1880 : Tensor = aten::to(%scale.50, %out_dtype.25, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1881 : Tensor = aten::mul(%x.27, %1880) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1882 : Tensor = aten::to(%bias.50, %out_dtype.25, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1883 : Tensor = aten::add(%1881, %1882, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1883)
    block1():
      %1884 : Tensor = prim::GetAttr[name="running_mean"](%1862)
      %1885 : Tensor = prim::GetAttr[name="running_var"](%1862)
      %1886 : Tensor = prim::GetAttr[name="weight"](%1862)
      %1887 : Tensor = prim::GetAttr[name="bias"](%1862)
      %1888 : float = prim::GetAttr[name="eps"](%1862)
      %1889 : Tensor = aten::batch_norm(%x.27, %1886, %1887, %1884, %1885, %44, %33, %1888, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1889)
  %out.48 : Tensor = aten::add_(%out.47, %input.13, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.15 : Tensor = aten::relu_(%out.48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %1892 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1078)
  %1893 : Tensor = prim::GetAttr[name="weight"](%1892)
  %1894 : Tensor? = prim::GetAttr[name="bias"](%1892)
  %1895 : int[] = prim::ListConstruct(%43, %43)
  %1896 : int[] = prim::ListConstruct(%48, %48)
  %1897 : int[] = prim::ListConstruct(%43, %43)
  %x.28 : Tensor = aten::conv2d(%input.15, %1893, %1894, %1895, %1896, %1897, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1899 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1892)
  %1900 : bool = prim::requires_grad(%x.28)
  %out.55 : Tensor = prim::If(%1900) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1902 : Tensor = prim::GetAttr[name="weight"](%1899)
      %1903 : Tensor = prim::GetAttr[name="running_var"](%1899)
      %1904 : float = prim::GetAttr[name="eps"](%1899)
      %1905 : Tensor = aten::add(%1903, %1904, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1906 : Tensor = aten::rsqrt(%1905) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.51 : Tensor = aten::mul(%1902, %1906) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1908 : Tensor = prim::GetAttr[name="bias"](%1899)
      %1909 : Tensor = prim::GetAttr[name="running_mean"](%1899)
      %1910 : Tensor = aten::mul(%1909, %scale.51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.51 : Tensor = aten::sub(%1908, %1910, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1912 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.52 : Tensor = aten::reshape(%scale.51, %1912) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1914 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.52 : Tensor = aten::reshape(%bias.51, %1914) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.26 : int = prim::dtype(%x.28)
      %1917 : Tensor = aten::to(%scale.52, %out_dtype.26, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1918 : Tensor = aten::mul(%x.28, %1917) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1919 : Tensor = aten::to(%bias.52, %out_dtype.26, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1920 : Tensor = aten::add(%1918, %1919, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1920)
    block1():
      %1921 : Tensor = prim::GetAttr[name="running_mean"](%1899)
      %1922 : Tensor = prim::GetAttr[name="running_var"](%1899)
      %1923 : Tensor = prim::GetAttr[name="weight"](%1899)
      %1924 : Tensor = prim::GetAttr[name="bias"](%1899)
      %1925 : float = prim::GetAttr[name="eps"](%1899)
      %1926 : Tensor = aten::batch_norm(%x.28, %1923, %1924, %1921, %1922, %44, %33, %1925, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1926)
  %out.50 : Tensor = aten::relu_(%out.55) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %1928 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1078)
  %1929 : Tensor = prim::GetAttr[name="weight"](%1928)
  %1930 : Tensor? = prim::GetAttr[name="bias"](%1928)
  %1931 : int[] = prim::ListConstruct(%43, %43)
  %1932 : int[] = prim::ListConstruct(%43, %43)
  %1933 : int[] = prim::ListConstruct(%43, %43)
  %x.29 : Tensor = aten::conv2d(%out.50, %1929, %1930, %1931, %1932, %1933, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1935 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1928)
  %1936 : bool = prim::requires_grad(%x.29)
  %out.51 : Tensor = prim::If(%1936) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1938 : Tensor = prim::GetAttr[name="weight"](%1935)
      %1939 : Tensor = prim::GetAttr[name="running_var"](%1935)
      %1940 : float = prim::GetAttr[name="eps"](%1935)
      %1941 : Tensor = aten::add(%1939, %1940, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1942 : Tensor = aten::rsqrt(%1941) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.53 : Tensor = aten::mul(%1938, %1942) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1944 : Tensor = prim::GetAttr[name="bias"](%1935)
      %1945 : Tensor = prim::GetAttr[name="running_mean"](%1935)
      %1946 : Tensor = aten::mul(%1945, %scale.53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.53 : Tensor = aten::sub(%1944, %1946, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1948 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.54 : Tensor = aten::reshape(%scale.53, %1948) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1950 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.54 : Tensor = aten::reshape(%bias.53, %1950) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.27 : int = prim::dtype(%x.29)
      %1953 : Tensor = aten::to(%scale.54, %out_dtype.27, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1954 : Tensor = aten::mul(%x.29, %1953) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1955 : Tensor = aten::to(%bias.54, %out_dtype.27, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1956 : Tensor = aten::add(%1954, %1955, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1956)
    block1():
      %1957 : Tensor = prim::GetAttr[name="running_mean"](%1935)
      %1958 : Tensor = prim::GetAttr[name="running_var"](%1935)
      %1959 : Tensor = prim::GetAttr[name="weight"](%1935)
      %1960 : Tensor = prim::GetAttr[name="bias"](%1935)
      %1961 : float = prim::GetAttr[name="eps"](%1935)
      %1962 : Tensor = aten::batch_norm(%x.29, %1959, %1960, %1957, %1958, %44, %33, %1961, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1962)
  %out.52 : Tensor = aten::relu_(%out.51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %1964 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1078)
  %1965 : Tensor = prim::GetAttr[name="weight"](%1964)
  %1966 : Tensor? = prim::GetAttr[name="bias"](%1964)
  %1967 : int[] = prim::ListConstruct(%43, %43)
  %1968 : int[] = prim::ListConstruct(%48, %48)
  %1969 : int[] = prim::ListConstruct(%43, %43)
  %x.30 : Tensor = aten::conv2d(%out.52, %1965, %1966, %1967, %1968, %1969, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %1971 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%1964)
  %1972 : bool = prim::requires_grad(%x.30)
  %out.53 : Tensor = prim::If(%1972) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %1974 : Tensor = prim::GetAttr[name="weight"](%1971)
      %1975 : Tensor = prim::GetAttr[name="running_var"](%1971)
      %1976 : float = prim::GetAttr[name="eps"](%1971)
      %1977 : Tensor = aten::add(%1975, %1976, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %1978 : Tensor = aten::rsqrt(%1977) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.55 : Tensor = aten::mul(%1974, %1978) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %1980 : Tensor = prim::GetAttr[name="bias"](%1971)
      %1981 : Tensor = prim::GetAttr[name="running_mean"](%1971)
      %1982 : Tensor = aten::mul(%1981, %scale.55) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.55 : Tensor = aten::sub(%1980, %1982, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %1984 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.56 : Tensor = aten::reshape(%scale.55, %1984) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %1986 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.56 : Tensor = aten::reshape(%bias.55, %1986) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.28 : int = prim::dtype(%x.30)
      %1989 : Tensor = aten::to(%scale.56, %out_dtype.28, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %1990 : Tensor = aten::mul(%x.30, %1989) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %1991 : Tensor = aten::to(%bias.56, %out_dtype.28, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %1992 : Tensor = aten::add(%1990, %1991, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%1992)
    block1():
      %1993 : Tensor = prim::GetAttr[name="running_mean"](%1971)
      %1994 : Tensor = prim::GetAttr[name="running_var"](%1971)
      %1995 : Tensor = prim::GetAttr[name="weight"](%1971)
      %1996 : Tensor = prim::GetAttr[name="bias"](%1971)
      %1997 : float = prim::GetAttr[name="eps"](%1971)
      %1998 : Tensor = aten::batch_norm(%x.30, %1995, %1996, %1993, %1994, %44, %33, %1997, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%1998)
  %out.54 : Tensor = aten::add_(%out.53, %input.15, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.17 : Tensor = aten::relu_(%out.54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %2001 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1079)
  %2002 : Tensor = prim::GetAttr[name="weight"](%2001)
  %2003 : Tensor? = prim::GetAttr[name="bias"](%2001)
  %2004 : int[] = prim::ListConstruct(%43, %43)
  %2005 : int[] = prim::ListConstruct(%48, %48)
  %2006 : int[] = prim::ListConstruct(%43, %43)
  %x.31 : Tensor = aten::conv2d(%input.17, %2002, %2003, %2004, %2005, %2006, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2008 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2001)
  %2009 : bool = prim::requires_grad(%x.31)
  %out.61 : Tensor = prim::If(%2009) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2011 : Tensor = prim::GetAttr[name="weight"](%2008)
      %2012 : Tensor = prim::GetAttr[name="running_var"](%2008)
      %2013 : float = prim::GetAttr[name="eps"](%2008)
      %2014 : Tensor = aten::add(%2012, %2013, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2015 : Tensor = aten::rsqrt(%2014) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.57 : Tensor = aten::mul(%2011, %2015) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2017 : Tensor = prim::GetAttr[name="bias"](%2008)
      %2018 : Tensor = prim::GetAttr[name="running_mean"](%2008)
      %2019 : Tensor = aten::mul(%2018, %scale.57) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.57 : Tensor = aten::sub(%2017, %2019, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2021 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.58 : Tensor = aten::reshape(%scale.57, %2021) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2023 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.58 : Tensor = aten::reshape(%bias.57, %2023) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.29 : int = prim::dtype(%x.31)
      %2026 : Tensor = aten::to(%scale.58, %out_dtype.29, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2027 : Tensor = aten::mul(%x.31, %2026) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2028 : Tensor = aten::to(%bias.58, %out_dtype.29, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2029 : Tensor = aten::add(%2027, %2028, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2029)
    block1():
      %2030 : Tensor = prim::GetAttr[name="running_mean"](%2008)
      %2031 : Tensor = prim::GetAttr[name="running_var"](%2008)
      %2032 : Tensor = prim::GetAttr[name="weight"](%2008)
      %2033 : Tensor = prim::GetAttr[name="bias"](%2008)
      %2034 : float = prim::GetAttr[name="eps"](%2008)
      %2035 : Tensor = aten::batch_norm(%x.31, %2032, %2033, %2030, %2031, %44, %33, %2034, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2035)
  %out.56 : Tensor = aten::relu_(%out.61) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %2037 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1079)
  %2038 : Tensor = prim::GetAttr[name="weight"](%2037)
  %2039 : Tensor? = prim::GetAttr[name="bias"](%2037)
  %2040 : int[] = prim::ListConstruct(%43, %43)
  %2041 : int[] = prim::ListConstruct(%43, %43)
  %2042 : int[] = prim::ListConstruct(%43, %43)
  %x.32 : Tensor = aten::conv2d(%out.56, %2038, %2039, %2040, %2041, %2042, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2044 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2037)
  %2045 : bool = prim::requires_grad(%x.32)
  %out.57 : Tensor = prim::If(%2045) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2047 : Tensor = prim::GetAttr[name="weight"](%2044)
      %2048 : Tensor = prim::GetAttr[name="running_var"](%2044)
      %2049 : float = prim::GetAttr[name="eps"](%2044)
      %2050 : Tensor = aten::add(%2048, %2049, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2051 : Tensor = aten::rsqrt(%2050) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.59 : Tensor = aten::mul(%2047, %2051) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2053 : Tensor = prim::GetAttr[name="bias"](%2044)
      %2054 : Tensor = prim::GetAttr[name="running_mean"](%2044)
      %2055 : Tensor = aten::mul(%2054, %scale.59) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.59 : Tensor = aten::sub(%2053, %2055, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2057 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.60 : Tensor = aten::reshape(%scale.59, %2057) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2059 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.60 : Tensor = aten::reshape(%bias.59, %2059) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.30 : int = prim::dtype(%x.32)
      %2062 : Tensor = aten::to(%scale.60, %out_dtype.30, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2063 : Tensor = aten::mul(%x.32, %2062) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2064 : Tensor = aten::to(%bias.60, %out_dtype.30, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2065 : Tensor = aten::add(%2063, %2064, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2065)
    block1():
      %2066 : Tensor = prim::GetAttr[name="running_mean"](%2044)
      %2067 : Tensor = prim::GetAttr[name="running_var"](%2044)
      %2068 : Tensor = prim::GetAttr[name="weight"](%2044)
      %2069 : Tensor = prim::GetAttr[name="bias"](%2044)
      %2070 : float = prim::GetAttr[name="eps"](%2044)
      %2071 : Tensor = aten::batch_norm(%x.32, %2068, %2069, %2066, %2067, %44, %33, %2070, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2071)
  %out.58 : Tensor = aten::relu_(%out.57) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %2073 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1079)
  %2074 : Tensor = prim::GetAttr[name="weight"](%2073)
  %2075 : Tensor? = prim::GetAttr[name="bias"](%2073)
  %2076 : int[] = prim::ListConstruct(%43, %43)
  %2077 : int[] = prim::ListConstruct(%48, %48)
  %2078 : int[] = prim::ListConstruct(%43, %43)
  %x.33 : Tensor = aten::conv2d(%out.58, %2074, %2075, %2076, %2077, %2078, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2080 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2073)
  %2081 : bool = prim::requires_grad(%x.33)
  %out.59 : Tensor = prim::If(%2081) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2083 : Tensor = prim::GetAttr[name="weight"](%2080)
      %2084 : Tensor = prim::GetAttr[name="running_var"](%2080)
      %2085 : float = prim::GetAttr[name="eps"](%2080)
      %2086 : Tensor = aten::add(%2084, %2085, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2087 : Tensor = aten::rsqrt(%2086) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.61 : Tensor = aten::mul(%2083, %2087) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2089 : Tensor = prim::GetAttr[name="bias"](%2080)
      %2090 : Tensor = prim::GetAttr[name="running_mean"](%2080)
      %2091 : Tensor = aten::mul(%2090, %scale.61) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.61 : Tensor = aten::sub(%2089, %2091, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2093 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.62 : Tensor = aten::reshape(%scale.61, %2093) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2095 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.62 : Tensor = aten::reshape(%bias.61, %2095) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.31 : int = prim::dtype(%x.33)
      %2098 : Tensor = aten::to(%scale.62, %out_dtype.31, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2099 : Tensor = aten::mul(%x.33, %2098) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2100 : Tensor = aten::to(%bias.62, %out_dtype.31, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2101 : Tensor = aten::add(%2099, %2100, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2101)
    block1():
      %2102 : Tensor = prim::GetAttr[name="running_mean"](%2080)
      %2103 : Tensor = prim::GetAttr[name="running_var"](%2080)
      %2104 : Tensor = prim::GetAttr[name="weight"](%2080)
      %2105 : Tensor = prim::GetAttr[name="bias"](%2080)
      %2106 : float = prim::GetAttr[name="eps"](%2080)
      %2107 : Tensor = aten::batch_norm(%x.33, %2104, %2105, %2102, %2103, %44, %33, %2106, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2107)
  %out.60 : Tensor = aten::add_(%out.59, %input.17, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.19 : Tensor = aten::relu_(%out.60) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %2110 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1080)
  %2111 : Tensor = prim::GetAttr[name="weight"](%2110)
  %2112 : Tensor? = prim::GetAttr[name="bias"](%2110)
  %2113 : int[] = prim::ListConstruct(%43, %43)
  %2114 : int[] = prim::ListConstruct(%48, %48)
  %2115 : int[] = prim::ListConstruct(%43, %43)
  %x.34 : Tensor = aten::conv2d(%input.19, %2111, %2112, %2113, %2114, %2115, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2117 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2110)
  %2118 : bool = prim::requires_grad(%x.34)
  %out.67 : Tensor = prim::If(%2118) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2120 : Tensor = prim::GetAttr[name="weight"](%2117)
      %2121 : Tensor = prim::GetAttr[name="running_var"](%2117)
      %2122 : float = prim::GetAttr[name="eps"](%2117)
      %2123 : Tensor = aten::add(%2121, %2122, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2124 : Tensor = aten::rsqrt(%2123) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.63 : Tensor = aten::mul(%2120, %2124) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2126 : Tensor = prim::GetAttr[name="bias"](%2117)
      %2127 : Tensor = prim::GetAttr[name="running_mean"](%2117)
      %2128 : Tensor = aten::mul(%2127, %scale.63) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.63 : Tensor = aten::sub(%2126, %2128, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2130 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.64 : Tensor = aten::reshape(%scale.63, %2130) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2132 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.64 : Tensor = aten::reshape(%bias.63, %2132) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.32 : int = prim::dtype(%x.34)
      %2135 : Tensor = aten::to(%scale.64, %out_dtype.32, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2136 : Tensor = aten::mul(%x.34, %2135) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2137 : Tensor = aten::to(%bias.64, %out_dtype.32, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2138 : Tensor = aten::add(%2136, %2137, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2138)
    block1():
      %2139 : Tensor = prim::GetAttr[name="running_mean"](%2117)
      %2140 : Tensor = prim::GetAttr[name="running_var"](%2117)
      %2141 : Tensor = prim::GetAttr[name="weight"](%2117)
      %2142 : Tensor = prim::GetAttr[name="bias"](%2117)
      %2143 : float = prim::GetAttr[name="eps"](%2117)
      %2144 : Tensor = aten::batch_norm(%x.34, %2141, %2142, %2139, %2140, %44, %33, %2143, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2144)
  %out.62 : Tensor = aten::relu_(%out.67) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %2146 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1080)
  %2147 : Tensor = prim::GetAttr[name="weight"](%2146)
  %2148 : Tensor? = prim::GetAttr[name="bias"](%2146)
  %2149 : int[] = prim::ListConstruct(%43, %43)
  %2150 : int[] = prim::ListConstruct(%43, %43)
  %2151 : int[] = prim::ListConstruct(%43, %43)
  %x.35 : Tensor = aten::conv2d(%out.62, %2147, %2148, %2149, %2150, %2151, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2153 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2146)
  %2154 : bool = prim::requires_grad(%x.35)
  %out.63 : Tensor = prim::If(%2154) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2156 : Tensor = prim::GetAttr[name="weight"](%2153)
      %2157 : Tensor = prim::GetAttr[name="running_var"](%2153)
      %2158 : float = prim::GetAttr[name="eps"](%2153)
      %2159 : Tensor = aten::add(%2157, %2158, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2160 : Tensor = aten::rsqrt(%2159) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.65 : Tensor = aten::mul(%2156, %2160) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2162 : Tensor = prim::GetAttr[name="bias"](%2153)
      %2163 : Tensor = prim::GetAttr[name="running_mean"](%2153)
      %2164 : Tensor = aten::mul(%2163, %scale.65) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.65 : Tensor = aten::sub(%2162, %2164, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2166 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.66 : Tensor = aten::reshape(%scale.65, %2166) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2168 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.66 : Tensor = aten::reshape(%bias.65, %2168) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.33 : int = prim::dtype(%x.35)
      %2171 : Tensor = aten::to(%scale.66, %out_dtype.33, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2172 : Tensor = aten::mul(%x.35, %2171) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2173 : Tensor = aten::to(%bias.66, %out_dtype.33, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2174 : Tensor = aten::add(%2172, %2173, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2174)
    block1():
      %2175 : Tensor = prim::GetAttr[name="running_mean"](%2153)
      %2176 : Tensor = prim::GetAttr[name="running_var"](%2153)
      %2177 : Tensor = prim::GetAttr[name="weight"](%2153)
      %2178 : Tensor = prim::GetAttr[name="bias"](%2153)
      %2179 : float = prim::GetAttr[name="eps"](%2153)
      %2180 : Tensor = aten::batch_norm(%x.35, %2177, %2178, %2175, %2176, %44, %33, %2179, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2180)
  %out.64 : Tensor = aten::relu_(%out.63) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %2182 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1080)
  %2183 : Tensor = prim::GetAttr[name="weight"](%2182)
  %2184 : Tensor? = prim::GetAttr[name="bias"](%2182)
  %2185 : int[] = prim::ListConstruct(%43, %43)
  %2186 : int[] = prim::ListConstruct(%48, %48)
  %2187 : int[] = prim::ListConstruct(%43, %43)
  %x.36 : Tensor = aten::conv2d(%out.64, %2183, %2184, %2185, %2186, %2187, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2189 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2182)
  %2190 : bool = prim::requires_grad(%x.36)
  %out.65 : Tensor = prim::If(%2190) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2192 : Tensor = prim::GetAttr[name="weight"](%2189)
      %2193 : Tensor = prim::GetAttr[name="running_var"](%2189)
      %2194 : float = prim::GetAttr[name="eps"](%2189)
      %2195 : Tensor = aten::add(%2193, %2194, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2196 : Tensor = aten::rsqrt(%2195) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.67 : Tensor = aten::mul(%2192, %2196) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2198 : Tensor = prim::GetAttr[name="bias"](%2189)
      %2199 : Tensor = prim::GetAttr[name="running_mean"](%2189)
      %2200 : Tensor = aten::mul(%2199, %scale.67) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.67 : Tensor = aten::sub(%2198, %2200, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2202 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.68 : Tensor = aten::reshape(%scale.67, %2202) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2204 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.68 : Tensor = aten::reshape(%bias.67, %2204) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.34 : int = prim::dtype(%x.36)
      %2207 : Tensor = aten::to(%scale.68, %out_dtype.34, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2208 : Tensor = aten::mul(%x.36, %2207) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2209 : Tensor = aten::to(%bias.68, %out_dtype.34, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2210 : Tensor = aten::add(%2208, %2209, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2210)
    block1():
      %2211 : Tensor = prim::GetAttr[name="running_mean"](%2189)
      %2212 : Tensor = prim::GetAttr[name="running_var"](%2189)
      %2213 : Tensor = prim::GetAttr[name="weight"](%2189)
      %2214 : Tensor = prim::GetAttr[name="bias"](%2189)
      %2215 : float = prim::GetAttr[name="eps"](%2189)
      %2216 : Tensor = aten::batch_norm(%x.36, %2213, %2214, %2211, %2212, %44, %33, %2215, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2216)
  %out.66 : Tensor = aten::add_(%out.65, %input.19, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.21 : Tensor = aten::relu_(%out.66) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %2219 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1081)
  %2220 : Tensor = prim::GetAttr[name="weight"](%2219)
  %2221 : Tensor? = prim::GetAttr[name="bias"](%2219)
  %2222 : int[] = prim::ListConstruct(%43, %43)
  %2223 : int[] = prim::ListConstruct(%48, %48)
  %2224 : int[] = prim::ListConstruct(%43, %43)
  %x.37 : Tensor = aten::conv2d(%input.21, %2220, %2221, %2222, %2223, %2224, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2226 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2219)
  %2227 : bool = prim::requires_grad(%x.37)
  %out.73 : Tensor = prim::If(%2227) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2229 : Tensor = prim::GetAttr[name="weight"](%2226)
      %2230 : Tensor = prim::GetAttr[name="running_var"](%2226)
      %2231 : float = prim::GetAttr[name="eps"](%2226)
      %2232 : Tensor = aten::add(%2230, %2231, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2233 : Tensor = aten::rsqrt(%2232) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.69 : Tensor = aten::mul(%2229, %2233) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2235 : Tensor = prim::GetAttr[name="bias"](%2226)
      %2236 : Tensor = prim::GetAttr[name="running_mean"](%2226)
      %2237 : Tensor = aten::mul(%2236, %scale.69) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.69 : Tensor = aten::sub(%2235, %2237, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2239 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.70 : Tensor = aten::reshape(%scale.69, %2239) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2241 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.70 : Tensor = aten::reshape(%bias.69, %2241) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.35 : int = prim::dtype(%x.37)
      %2244 : Tensor = aten::to(%scale.70, %out_dtype.35, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2245 : Tensor = aten::mul(%x.37, %2244) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2246 : Tensor = aten::to(%bias.70, %out_dtype.35, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2247 : Tensor = aten::add(%2245, %2246, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2247)
    block1():
      %2248 : Tensor = prim::GetAttr[name="running_mean"](%2226)
      %2249 : Tensor = prim::GetAttr[name="running_var"](%2226)
      %2250 : Tensor = prim::GetAttr[name="weight"](%2226)
      %2251 : Tensor = prim::GetAttr[name="bias"](%2226)
      %2252 : float = prim::GetAttr[name="eps"](%2226)
      %2253 : Tensor = aten::batch_norm(%x.37, %2250, %2251, %2248, %2249, %44, %33, %2252, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2253)
  %out.68 : Tensor = aten::relu_(%out.73) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %2255 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1081)
  %2256 : Tensor = prim::GetAttr[name="weight"](%2255)
  %2257 : Tensor? = prim::GetAttr[name="bias"](%2255)
  %2258 : int[] = prim::ListConstruct(%43, %43)
  %2259 : int[] = prim::ListConstruct(%43, %43)
  %2260 : int[] = prim::ListConstruct(%43, %43)
  %x.38 : Tensor = aten::conv2d(%out.68, %2256, %2257, %2258, %2259, %2260, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2262 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2255)
  %2263 : bool = prim::requires_grad(%x.38)
  %out.69 : Tensor = prim::If(%2263) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2265 : Tensor = prim::GetAttr[name="weight"](%2262)
      %2266 : Tensor = prim::GetAttr[name="running_var"](%2262)
      %2267 : float = prim::GetAttr[name="eps"](%2262)
      %2268 : Tensor = aten::add(%2266, %2267, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2269 : Tensor = aten::rsqrt(%2268) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.71 : Tensor = aten::mul(%2265, %2269) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2271 : Tensor = prim::GetAttr[name="bias"](%2262)
      %2272 : Tensor = prim::GetAttr[name="running_mean"](%2262)
      %2273 : Tensor = aten::mul(%2272, %scale.71) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.71 : Tensor = aten::sub(%2271, %2273, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2275 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.72 : Tensor = aten::reshape(%scale.71, %2275) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2277 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.72 : Tensor = aten::reshape(%bias.71, %2277) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.36 : int = prim::dtype(%x.38)
      %2280 : Tensor = aten::to(%scale.72, %out_dtype.36, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2281 : Tensor = aten::mul(%x.38, %2280) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2282 : Tensor = aten::to(%bias.72, %out_dtype.36, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2283 : Tensor = aten::add(%2281, %2282, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2283)
    block1():
      %2284 : Tensor = prim::GetAttr[name="running_mean"](%2262)
      %2285 : Tensor = prim::GetAttr[name="running_var"](%2262)
      %2286 : Tensor = prim::GetAttr[name="weight"](%2262)
      %2287 : Tensor = prim::GetAttr[name="bias"](%2262)
      %2288 : float = prim::GetAttr[name="eps"](%2262)
      %2289 : Tensor = aten::batch_norm(%x.38, %2286, %2287, %2284, %2285, %44, %33, %2288, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2289)
  %out.70 : Tensor = aten::relu_(%out.69) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %2291 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1081)
  %2292 : Tensor = prim::GetAttr[name="weight"](%2291)
  %2293 : Tensor? = prim::GetAttr[name="bias"](%2291)
  %2294 : int[] = prim::ListConstruct(%43, %43)
  %2295 : int[] = prim::ListConstruct(%48, %48)
  %2296 : int[] = prim::ListConstruct(%43, %43)
  %x.39 : Tensor = aten::conv2d(%out.70, %2292, %2293, %2294, %2295, %2296, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2298 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2291)
  %2299 : bool = prim::requires_grad(%x.39)
  %out.71 : Tensor = prim::If(%2299) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2301 : Tensor = prim::GetAttr[name="weight"](%2298)
      %2302 : Tensor = prim::GetAttr[name="running_var"](%2298)
      %2303 : float = prim::GetAttr[name="eps"](%2298)
      %2304 : Tensor = aten::add(%2302, %2303, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2305 : Tensor = aten::rsqrt(%2304) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.73 : Tensor = aten::mul(%2301, %2305) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2307 : Tensor = prim::GetAttr[name="bias"](%2298)
      %2308 : Tensor = prim::GetAttr[name="running_mean"](%2298)
      %2309 : Tensor = aten::mul(%2308, %scale.73) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.73 : Tensor = aten::sub(%2307, %2309, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2311 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.74 : Tensor = aten::reshape(%scale.73, %2311) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2313 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.74 : Tensor = aten::reshape(%bias.73, %2313) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.37 : int = prim::dtype(%x.39)
      %2316 : Tensor = aten::to(%scale.74, %out_dtype.37, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2317 : Tensor = aten::mul(%x.39, %2316) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2318 : Tensor = aten::to(%bias.74, %out_dtype.37, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2319 : Tensor = aten::add(%2317, %2318, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2319)
    block1():
      %2320 : Tensor = prim::GetAttr[name="running_mean"](%2298)
      %2321 : Tensor = prim::GetAttr[name="running_var"](%2298)
      %2322 : Tensor = prim::GetAttr[name="weight"](%2298)
      %2323 : Tensor = prim::GetAttr[name="bias"](%2298)
      %2324 : float = prim::GetAttr[name="eps"](%2298)
      %2325 : Tensor = aten::batch_norm(%x.39, %2322, %2323, %2320, %2321, %44, %33, %2324, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2325)
  %out.72 : Tensor = aten::add_(%out.71, %input.21, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.23 : Tensor = aten::relu_(%out.72) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %2328 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1082)
  %2329 : Tensor = prim::GetAttr[name="weight"](%2328)
  %2330 : Tensor? = prim::GetAttr[name="bias"](%2328)
  %2331 : int[] = prim::ListConstruct(%43, %43)
  %2332 : int[] = prim::ListConstruct(%48, %48)
  %2333 : int[] = prim::ListConstruct(%43, %43)
  %x.40 : Tensor = aten::conv2d(%input.23, %2329, %2330, %2331, %2332, %2333, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2335 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2328)
  %2336 : bool = prim::requires_grad(%x.40)
  %out.79 : Tensor = prim::If(%2336) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2338 : Tensor = prim::GetAttr[name="weight"](%2335)
      %2339 : Tensor = prim::GetAttr[name="running_var"](%2335)
      %2340 : float = prim::GetAttr[name="eps"](%2335)
      %2341 : Tensor = aten::add(%2339, %2340, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2342 : Tensor = aten::rsqrt(%2341) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.75 : Tensor = aten::mul(%2338, %2342) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2344 : Tensor = prim::GetAttr[name="bias"](%2335)
      %2345 : Tensor = prim::GetAttr[name="running_mean"](%2335)
      %2346 : Tensor = aten::mul(%2345, %scale.75) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.75 : Tensor = aten::sub(%2344, %2346, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2348 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.76 : Tensor = aten::reshape(%scale.75, %2348) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2350 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.76 : Tensor = aten::reshape(%bias.75, %2350) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.38 : int = prim::dtype(%x.40)
      %2353 : Tensor = aten::to(%scale.76, %out_dtype.38, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2354 : Tensor = aten::mul(%x.40, %2353) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2355 : Tensor = aten::to(%bias.76, %out_dtype.38, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2356 : Tensor = aten::add(%2354, %2355, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2356)
    block1():
      %2357 : Tensor = prim::GetAttr[name="running_mean"](%2335)
      %2358 : Tensor = prim::GetAttr[name="running_var"](%2335)
      %2359 : Tensor = prim::GetAttr[name="weight"](%2335)
      %2360 : Tensor = prim::GetAttr[name="bias"](%2335)
      %2361 : float = prim::GetAttr[name="eps"](%2335)
      %2362 : Tensor = aten::batch_norm(%x.40, %2359, %2360, %2357, %2358, %44, %33, %2361, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2362)
  %out.74 : Tensor = aten::relu_(%out.79) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %2364 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1082)
  %2365 : Tensor = prim::GetAttr[name="weight"](%2364)
  %2366 : Tensor? = prim::GetAttr[name="bias"](%2364)
  %2367 : int[] = prim::ListConstruct(%43, %43)
  %2368 : int[] = prim::ListConstruct(%43, %43)
  %2369 : int[] = prim::ListConstruct(%43, %43)
  %x.41 : Tensor = aten::conv2d(%out.74, %2365, %2366, %2367, %2368, %2369, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2371 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2364)
  %2372 : bool = prim::requires_grad(%x.41)
  %out.75 : Tensor = prim::If(%2372) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2374 : Tensor = prim::GetAttr[name="weight"](%2371)
      %2375 : Tensor = prim::GetAttr[name="running_var"](%2371)
      %2376 : float = prim::GetAttr[name="eps"](%2371)
      %2377 : Tensor = aten::add(%2375, %2376, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2378 : Tensor = aten::rsqrt(%2377) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.77 : Tensor = aten::mul(%2374, %2378) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2380 : Tensor = prim::GetAttr[name="bias"](%2371)
      %2381 : Tensor = prim::GetAttr[name="running_mean"](%2371)
      %2382 : Tensor = aten::mul(%2381, %scale.77) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.77 : Tensor = aten::sub(%2380, %2382, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2384 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.78 : Tensor = aten::reshape(%scale.77, %2384) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2386 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.78 : Tensor = aten::reshape(%bias.77, %2386) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.39 : int = prim::dtype(%x.41)
      %2389 : Tensor = aten::to(%scale.78, %out_dtype.39, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2390 : Tensor = aten::mul(%x.41, %2389) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2391 : Tensor = aten::to(%bias.78, %out_dtype.39, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2392 : Tensor = aten::add(%2390, %2391, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2392)
    block1():
      %2393 : Tensor = prim::GetAttr[name="running_mean"](%2371)
      %2394 : Tensor = prim::GetAttr[name="running_var"](%2371)
      %2395 : Tensor = prim::GetAttr[name="weight"](%2371)
      %2396 : Tensor = prim::GetAttr[name="bias"](%2371)
      %2397 : float = prim::GetAttr[name="eps"](%2371)
      %2398 : Tensor = aten::batch_norm(%x.41, %2395, %2396, %2393, %2394, %44, %33, %2397, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2398)
  %out.76 : Tensor = aten::relu_(%out.75) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %2400 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1082)
  %2401 : Tensor = prim::GetAttr[name="weight"](%2400)
  %2402 : Tensor? = prim::GetAttr[name="bias"](%2400)
  %2403 : int[] = prim::ListConstruct(%43, %43)
  %2404 : int[] = prim::ListConstruct(%48, %48)
  %2405 : int[] = prim::ListConstruct(%43, %43)
  %x.42 : Tensor = aten::conv2d(%out.76, %2401, %2402, %2403, %2404, %2405, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2407 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2400)
  %2408 : bool = prim::requires_grad(%x.42)
  %out.77 : Tensor = prim::If(%2408) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2410 : Tensor = prim::GetAttr[name="weight"](%2407)
      %2411 : Tensor = prim::GetAttr[name="running_var"](%2407)
      %2412 : float = prim::GetAttr[name="eps"](%2407)
      %2413 : Tensor = aten::add(%2411, %2412, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2414 : Tensor = aten::rsqrt(%2413) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.79 : Tensor = aten::mul(%2410, %2414) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2416 : Tensor = prim::GetAttr[name="bias"](%2407)
      %2417 : Tensor = prim::GetAttr[name="running_mean"](%2407)
      %2418 : Tensor = aten::mul(%2417, %scale.79) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.79 : Tensor = aten::sub(%2416, %2418, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2420 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.80 : Tensor = aten::reshape(%scale.79, %2420) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2422 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.80 : Tensor = aten::reshape(%bias.79, %2422) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.40 : int = prim::dtype(%x.42)
      %2425 : Tensor = aten::to(%scale.80, %out_dtype.40, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2426 : Tensor = aten::mul(%x.42, %2425) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2427 : Tensor = aten::to(%bias.80, %out_dtype.40, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2428 : Tensor = aten::add(%2426, %2427, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2428)
    block1():
      %2429 : Tensor = prim::GetAttr[name="running_mean"](%2407)
      %2430 : Tensor = prim::GetAttr[name="running_var"](%2407)
      %2431 : Tensor = prim::GetAttr[name="weight"](%2407)
      %2432 : Tensor = prim::GetAttr[name="bias"](%2407)
      %2433 : float = prim::GetAttr[name="eps"](%2407)
      %2434 : Tensor = aten::batch_norm(%x.42, %2431, %2432, %2429, %2430, %44, %33, %2433, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2434)
  %out.78 : Tensor = aten::add_(%out.77, %input.23, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.25 : Tensor = aten::relu_(%out.78) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %2437 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1083)
  %2438 : Tensor = prim::GetAttr[name="weight"](%2437)
  %2439 : Tensor? = prim::GetAttr[name="bias"](%2437)
  %2440 : int[] = prim::ListConstruct(%43, %43)
  %2441 : int[] = prim::ListConstruct(%48, %48)
  %2442 : int[] = prim::ListConstruct(%43, %43)
  %x.43 : Tensor = aten::conv2d(%input.25, %2438, %2439, %2440, %2441, %2442, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2444 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2437)
  %2445 : bool = prim::requires_grad(%x.43)
  %out.85 : Tensor = prim::If(%2445) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2447 : Tensor = prim::GetAttr[name="weight"](%2444)
      %2448 : Tensor = prim::GetAttr[name="running_var"](%2444)
      %2449 : float = prim::GetAttr[name="eps"](%2444)
      %2450 : Tensor = aten::add(%2448, %2449, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2451 : Tensor = aten::rsqrt(%2450) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.81 : Tensor = aten::mul(%2447, %2451) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2453 : Tensor = prim::GetAttr[name="bias"](%2444)
      %2454 : Tensor = prim::GetAttr[name="running_mean"](%2444)
      %2455 : Tensor = aten::mul(%2454, %scale.81) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.81 : Tensor = aten::sub(%2453, %2455, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2457 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.82 : Tensor = aten::reshape(%scale.81, %2457) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2459 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.82 : Tensor = aten::reshape(%bias.81, %2459) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.41 : int = prim::dtype(%x.43)
      %2462 : Tensor = aten::to(%scale.82, %out_dtype.41, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2463 : Tensor = aten::mul(%x.43, %2462) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2464 : Tensor = aten::to(%bias.82, %out_dtype.41, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2465 : Tensor = aten::add(%2463, %2464, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2465)
    block1():
      %2466 : Tensor = prim::GetAttr[name="running_mean"](%2444)
      %2467 : Tensor = prim::GetAttr[name="running_var"](%2444)
      %2468 : Tensor = prim::GetAttr[name="weight"](%2444)
      %2469 : Tensor = prim::GetAttr[name="bias"](%2444)
      %2470 : float = prim::GetAttr[name="eps"](%2444)
      %2471 : Tensor = aten::batch_norm(%x.43, %2468, %2469, %2466, %2467, %44, %33, %2470, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2471)
  %out.80 : Tensor = aten::relu_(%out.85) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %2473 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1083)
  %2474 : Tensor = prim::GetAttr[name="weight"](%2473)
  %2475 : Tensor? = prim::GetAttr[name="bias"](%2473)
  %2476 : int[] = prim::ListConstruct(%43, %43)
  %2477 : int[] = prim::ListConstruct(%43, %43)
  %2478 : int[] = prim::ListConstruct(%43, %43)
  %x.44 : Tensor = aten::conv2d(%out.80, %2474, %2475, %2476, %2477, %2478, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2480 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2473)
  %2481 : bool = prim::requires_grad(%x.44)
  %out.81 : Tensor = prim::If(%2481) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2483 : Tensor = prim::GetAttr[name="weight"](%2480)
      %2484 : Tensor = prim::GetAttr[name="running_var"](%2480)
      %2485 : float = prim::GetAttr[name="eps"](%2480)
      %2486 : Tensor = aten::add(%2484, %2485, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2487 : Tensor = aten::rsqrt(%2486) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.83 : Tensor = aten::mul(%2483, %2487) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2489 : Tensor = prim::GetAttr[name="bias"](%2480)
      %2490 : Tensor = prim::GetAttr[name="running_mean"](%2480)
      %2491 : Tensor = aten::mul(%2490, %scale.83) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.83 : Tensor = aten::sub(%2489, %2491, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2493 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.84 : Tensor = aten::reshape(%scale.83, %2493) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2495 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.84 : Tensor = aten::reshape(%bias.83, %2495) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.42 : int = prim::dtype(%x.44)
      %2498 : Tensor = aten::to(%scale.84, %out_dtype.42, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2499 : Tensor = aten::mul(%x.44, %2498) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2500 : Tensor = aten::to(%bias.84, %out_dtype.42, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2501 : Tensor = aten::add(%2499, %2500, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2501)
    block1():
      %2502 : Tensor = prim::GetAttr[name="running_mean"](%2480)
      %2503 : Tensor = prim::GetAttr[name="running_var"](%2480)
      %2504 : Tensor = prim::GetAttr[name="weight"](%2480)
      %2505 : Tensor = prim::GetAttr[name="bias"](%2480)
      %2506 : float = prim::GetAttr[name="eps"](%2480)
      %2507 : Tensor = aten::batch_norm(%x.44, %2504, %2505, %2502, %2503, %44, %33, %2506, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2507)
  %out.82 : Tensor = aten::relu_(%out.81) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %2509 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1083)
  %2510 : Tensor = prim::GetAttr[name="weight"](%2509)
  %2511 : Tensor? = prim::GetAttr[name="bias"](%2509)
  %2512 : int[] = prim::ListConstruct(%43, %43)
  %2513 : int[] = prim::ListConstruct(%48, %48)
  %2514 : int[] = prim::ListConstruct(%43, %43)
  %x.45 : Tensor = aten::conv2d(%out.82, %2510, %2511, %2512, %2513, %2514, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2516 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2509)
  %2517 : bool = prim::requires_grad(%x.45)
  %out.83 : Tensor = prim::If(%2517) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2519 : Tensor = prim::GetAttr[name="weight"](%2516)
      %2520 : Tensor = prim::GetAttr[name="running_var"](%2516)
      %2521 : float = prim::GetAttr[name="eps"](%2516)
      %2522 : Tensor = aten::add(%2520, %2521, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2523 : Tensor = aten::rsqrt(%2522) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.85 : Tensor = aten::mul(%2519, %2523) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2525 : Tensor = prim::GetAttr[name="bias"](%2516)
      %2526 : Tensor = prim::GetAttr[name="running_mean"](%2516)
      %2527 : Tensor = aten::mul(%2526, %scale.85) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.85 : Tensor = aten::sub(%2525, %2527, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2529 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.86 : Tensor = aten::reshape(%scale.85, %2529) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2531 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.86 : Tensor = aten::reshape(%bias.85, %2531) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.43 : int = prim::dtype(%x.45)
      %2534 : Tensor = aten::to(%scale.86, %out_dtype.43, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2535 : Tensor = aten::mul(%x.45, %2534) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2536 : Tensor = aten::to(%bias.86, %out_dtype.43, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2537 : Tensor = aten::add(%2535, %2536, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2537)
    block1():
      %2538 : Tensor = prim::GetAttr[name="running_mean"](%2516)
      %2539 : Tensor = prim::GetAttr[name="running_var"](%2516)
      %2540 : Tensor = prim::GetAttr[name="weight"](%2516)
      %2541 : Tensor = prim::GetAttr[name="bias"](%2516)
      %2542 : float = prim::GetAttr[name="eps"](%2516)
      %2543 : Tensor = aten::batch_norm(%x.45, %2540, %2541, %2538, %2539, %44, %33, %2542, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2543)
  %out.84 : Tensor = aten::add_(%out.83, %input.25, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.27 : Tensor = aten::relu_(%out.84) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %2546 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1084)
  %2547 : Tensor = prim::GetAttr[name="weight"](%2546)
  %2548 : Tensor? = prim::GetAttr[name="bias"](%2546)
  %2549 : int[] = prim::ListConstruct(%43, %43)
  %2550 : int[] = prim::ListConstruct(%48, %48)
  %2551 : int[] = prim::ListConstruct(%43, %43)
  %x.46 : Tensor = aten::conv2d(%input.27, %2547, %2548, %2549, %2550, %2551, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2553 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2546)
  %2554 : bool = prim::requires_grad(%x.46)
  %out.91 : Tensor = prim::If(%2554) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2556 : Tensor = prim::GetAttr[name="weight"](%2553)
      %2557 : Tensor = prim::GetAttr[name="running_var"](%2553)
      %2558 : float = prim::GetAttr[name="eps"](%2553)
      %2559 : Tensor = aten::add(%2557, %2558, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2560 : Tensor = aten::rsqrt(%2559) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.87 : Tensor = aten::mul(%2556, %2560) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2562 : Tensor = prim::GetAttr[name="bias"](%2553)
      %2563 : Tensor = prim::GetAttr[name="running_mean"](%2553)
      %2564 : Tensor = aten::mul(%2563, %scale.87) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.87 : Tensor = aten::sub(%2562, %2564, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2566 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.88 : Tensor = aten::reshape(%scale.87, %2566) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2568 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.88 : Tensor = aten::reshape(%bias.87, %2568) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.44 : int = prim::dtype(%x.46)
      %2571 : Tensor = aten::to(%scale.88, %out_dtype.44, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2572 : Tensor = aten::mul(%x.46, %2571) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2573 : Tensor = aten::to(%bias.88, %out_dtype.44, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2574 : Tensor = aten::add(%2572, %2573, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2574)
    block1():
      %2575 : Tensor = prim::GetAttr[name="running_mean"](%2553)
      %2576 : Tensor = prim::GetAttr[name="running_var"](%2553)
      %2577 : Tensor = prim::GetAttr[name="weight"](%2553)
      %2578 : Tensor = prim::GetAttr[name="bias"](%2553)
      %2579 : float = prim::GetAttr[name="eps"](%2553)
      %2580 : Tensor = aten::batch_norm(%x.46, %2577, %2578, %2575, %2576, %44, %33, %2579, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2580)
  %out.86 : Tensor = aten::relu_(%out.91) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %2582 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1084)
  %2583 : Tensor = prim::GetAttr[name="weight"](%2582)
  %2584 : Tensor? = prim::GetAttr[name="bias"](%2582)
  %2585 : int[] = prim::ListConstruct(%43, %43)
  %2586 : int[] = prim::ListConstruct(%43, %43)
  %2587 : int[] = prim::ListConstruct(%43, %43)
  %x.47 : Tensor = aten::conv2d(%out.86, %2583, %2584, %2585, %2586, %2587, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2589 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2582)
  %2590 : bool = prim::requires_grad(%x.47)
  %out.87 : Tensor = prim::If(%2590) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2592 : Tensor = prim::GetAttr[name="weight"](%2589)
      %2593 : Tensor = prim::GetAttr[name="running_var"](%2589)
      %2594 : float = prim::GetAttr[name="eps"](%2589)
      %2595 : Tensor = aten::add(%2593, %2594, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2596 : Tensor = aten::rsqrt(%2595) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.89 : Tensor = aten::mul(%2592, %2596) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2598 : Tensor = prim::GetAttr[name="bias"](%2589)
      %2599 : Tensor = prim::GetAttr[name="running_mean"](%2589)
      %2600 : Tensor = aten::mul(%2599, %scale.89) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.89 : Tensor = aten::sub(%2598, %2600, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2602 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.90 : Tensor = aten::reshape(%scale.89, %2602) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2604 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.90 : Tensor = aten::reshape(%bias.89, %2604) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.45 : int = prim::dtype(%x.47)
      %2607 : Tensor = aten::to(%scale.90, %out_dtype.45, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2608 : Tensor = aten::mul(%x.47, %2607) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2609 : Tensor = aten::to(%bias.90, %out_dtype.45, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2610 : Tensor = aten::add(%2608, %2609, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2610)
    block1():
      %2611 : Tensor = prim::GetAttr[name="running_mean"](%2589)
      %2612 : Tensor = prim::GetAttr[name="running_var"](%2589)
      %2613 : Tensor = prim::GetAttr[name="weight"](%2589)
      %2614 : Tensor = prim::GetAttr[name="bias"](%2589)
      %2615 : float = prim::GetAttr[name="eps"](%2589)
      %2616 : Tensor = aten::batch_norm(%x.47, %2613, %2614, %2611, %2612, %44, %33, %2615, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2616)
  %out.88 : Tensor = aten::relu_(%out.87) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %2618 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1084)
  %2619 : Tensor = prim::GetAttr[name="weight"](%2618)
  %2620 : Tensor? = prim::GetAttr[name="bias"](%2618)
  %2621 : int[] = prim::ListConstruct(%43, %43)
  %2622 : int[] = prim::ListConstruct(%48, %48)
  %2623 : int[] = prim::ListConstruct(%43, %43)
  %x.48 : Tensor = aten::conv2d(%out.88, %2619, %2620, %2621, %2622, %2623, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2625 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2618)
  %2626 : bool = prim::requires_grad(%x.48)
  %out.89 : Tensor = prim::If(%2626) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2628 : Tensor = prim::GetAttr[name="weight"](%2625)
      %2629 : Tensor = prim::GetAttr[name="running_var"](%2625)
      %2630 : float = prim::GetAttr[name="eps"](%2625)
      %2631 : Tensor = aten::add(%2629, %2630, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2632 : Tensor = aten::rsqrt(%2631) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.91 : Tensor = aten::mul(%2628, %2632) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2634 : Tensor = prim::GetAttr[name="bias"](%2625)
      %2635 : Tensor = prim::GetAttr[name="running_mean"](%2625)
      %2636 : Tensor = aten::mul(%2635, %scale.91) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.91 : Tensor = aten::sub(%2634, %2636, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2638 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.92 : Tensor = aten::reshape(%scale.91, %2638) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2640 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.92 : Tensor = aten::reshape(%bias.91, %2640) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.46 : int = prim::dtype(%x.48)
      %2643 : Tensor = aten::to(%scale.92, %out_dtype.46, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2644 : Tensor = aten::mul(%x.48, %2643) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2645 : Tensor = aten::to(%bias.92, %out_dtype.46, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2646 : Tensor = aten::add(%2644, %2645, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2646)
    block1():
      %2647 : Tensor = prim::GetAttr[name="running_mean"](%2625)
      %2648 : Tensor = prim::GetAttr[name="running_var"](%2625)
      %2649 : Tensor = prim::GetAttr[name="weight"](%2625)
      %2650 : Tensor = prim::GetAttr[name="bias"](%2625)
      %2651 : float = prim::GetAttr[name="eps"](%2625)
      %2652 : Tensor = aten::batch_norm(%x.48, %2649, %2650, %2647, %2648, %44, %33, %2651, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2652)
  %out.90 : Tensor = aten::add_(%out.89, %input.27, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.29 : Tensor = aten::relu_(%out.90) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %2655 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1085)
  %2656 : Tensor = prim::GetAttr[name="weight"](%2655)
  %2657 : Tensor? = prim::GetAttr[name="bias"](%2655)
  %2658 : int[] = prim::ListConstruct(%43, %43)
  %2659 : int[] = prim::ListConstruct(%48, %48)
  %2660 : int[] = prim::ListConstruct(%43, %43)
  %x.49 : Tensor = aten::conv2d(%input.29, %2656, %2657, %2658, %2659, %2660, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2662 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2655)
  %2663 : bool = prim::requires_grad(%x.49)
  %out.97 : Tensor = prim::If(%2663) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2665 : Tensor = prim::GetAttr[name="weight"](%2662)
      %2666 : Tensor = prim::GetAttr[name="running_var"](%2662)
      %2667 : float = prim::GetAttr[name="eps"](%2662)
      %2668 : Tensor = aten::add(%2666, %2667, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2669 : Tensor = aten::rsqrt(%2668) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.93 : Tensor = aten::mul(%2665, %2669) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2671 : Tensor = prim::GetAttr[name="bias"](%2662)
      %2672 : Tensor = prim::GetAttr[name="running_mean"](%2662)
      %2673 : Tensor = aten::mul(%2672, %scale.93) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.93 : Tensor = aten::sub(%2671, %2673, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2675 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.94 : Tensor = aten::reshape(%scale.93, %2675) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2677 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.94 : Tensor = aten::reshape(%bias.93, %2677) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.47 : int = prim::dtype(%x.49)
      %2680 : Tensor = aten::to(%scale.94, %out_dtype.47, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2681 : Tensor = aten::mul(%x.49, %2680) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2682 : Tensor = aten::to(%bias.94, %out_dtype.47, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2683 : Tensor = aten::add(%2681, %2682, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2683)
    block1():
      %2684 : Tensor = prim::GetAttr[name="running_mean"](%2662)
      %2685 : Tensor = prim::GetAttr[name="running_var"](%2662)
      %2686 : Tensor = prim::GetAttr[name="weight"](%2662)
      %2687 : Tensor = prim::GetAttr[name="bias"](%2662)
      %2688 : float = prim::GetAttr[name="eps"](%2662)
      %2689 : Tensor = aten::batch_norm(%x.49, %2686, %2687, %2684, %2685, %44, %33, %2688, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2689)
  %out.92 : Tensor = aten::relu_(%out.97) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %2691 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1085)
  %2692 : Tensor = prim::GetAttr[name="weight"](%2691)
  %2693 : Tensor? = prim::GetAttr[name="bias"](%2691)
  %2694 : int[] = prim::ListConstruct(%43, %43)
  %2695 : int[] = prim::ListConstruct(%43, %43)
  %2696 : int[] = prim::ListConstruct(%43, %43)
  %x.50 : Tensor = aten::conv2d(%out.92, %2692, %2693, %2694, %2695, %2696, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2698 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2691)
  %2699 : bool = prim::requires_grad(%x.50)
  %out.93 : Tensor = prim::If(%2699) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2701 : Tensor = prim::GetAttr[name="weight"](%2698)
      %2702 : Tensor = prim::GetAttr[name="running_var"](%2698)
      %2703 : float = prim::GetAttr[name="eps"](%2698)
      %2704 : Tensor = aten::add(%2702, %2703, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2705 : Tensor = aten::rsqrt(%2704) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.95 : Tensor = aten::mul(%2701, %2705) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2707 : Tensor = prim::GetAttr[name="bias"](%2698)
      %2708 : Tensor = prim::GetAttr[name="running_mean"](%2698)
      %2709 : Tensor = aten::mul(%2708, %scale.95) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.95 : Tensor = aten::sub(%2707, %2709, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2711 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.96 : Tensor = aten::reshape(%scale.95, %2711) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2713 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.96 : Tensor = aten::reshape(%bias.95, %2713) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.48 : int = prim::dtype(%x.50)
      %2716 : Tensor = aten::to(%scale.96, %out_dtype.48, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2717 : Tensor = aten::mul(%x.50, %2716) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2718 : Tensor = aten::to(%bias.96, %out_dtype.48, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2719 : Tensor = aten::add(%2717, %2718, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2719)
    block1():
      %2720 : Tensor = prim::GetAttr[name="running_mean"](%2698)
      %2721 : Tensor = prim::GetAttr[name="running_var"](%2698)
      %2722 : Tensor = prim::GetAttr[name="weight"](%2698)
      %2723 : Tensor = prim::GetAttr[name="bias"](%2698)
      %2724 : float = prim::GetAttr[name="eps"](%2698)
      %2725 : Tensor = aten::batch_norm(%x.50, %2722, %2723, %2720, %2721, %44, %33, %2724, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2725)
  %out.94 : Tensor = aten::relu_(%out.93) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %2727 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1085)
  %2728 : Tensor = prim::GetAttr[name="weight"](%2727)
  %2729 : Tensor? = prim::GetAttr[name="bias"](%2727)
  %2730 : int[] = prim::ListConstruct(%43, %43)
  %2731 : int[] = prim::ListConstruct(%48, %48)
  %2732 : int[] = prim::ListConstruct(%43, %43)
  %x.51 : Tensor = aten::conv2d(%out.94, %2728, %2729, %2730, %2731, %2732, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2734 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2727)
  %2735 : bool = prim::requires_grad(%x.51)
  %out.95 : Tensor = prim::If(%2735) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2737 : Tensor = prim::GetAttr[name="weight"](%2734)
      %2738 : Tensor = prim::GetAttr[name="running_var"](%2734)
      %2739 : float = prim::GetAttr[name="eps"](%2734)
      %2740 : Tensor = aten::add(%2738, %2739, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2741 : Tensor = aten::rsqrt(%2740) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.97 : Tensor = aten::mul(%2737, %2741) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2743 : Tensor = prim::GetAttr[name="bias"](%2734)
      %2744 : Tensor = prim::GetAttr[name="running_mean"](%2734)
      %2745 : Tensor = aten::mul(%2744, %scale.97) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.97 : Tensor = aten::sub(%2743, %2745, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2747 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.98 : Tensor = aten::reshape(%scale.97, %2747) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2749 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.98 : Tensor = aten::reshape(%bias.97, %2749) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.49 : int = prim::dtype(%x.51)
      %2752 : Tensor = aten::to(%scale.98, %out_dtype.49, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2753 : Tensor = aten::mul(%x.51, %2752) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2754 : Tensor = aten::to(%bias.98, %out_dtype.49, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2755 : Tensor = aten::add(%2753, %2754, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2755)
    block1():
      %2756 : Tensor = prim::GetAttr[name="running_mean"](%2734)
      %2757 : Tensor = prim::GetAttr[name="running_var"](%2734)
      %2758 : Tensor = prim::GetAttr[name="weight"](%2734)
      %2759 : Tensor = prim::GetAttr[name="bias"](%2734)
      %2760 : float = prim::GetAttr[name="eps"](%2734)
      %2761 : Tensor = aten::batch_norm(%x.51, %2758, %2759, %2756, %2757, %44, %33, %2760, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2761)
  %out.96 : Tensor = aten::add_(%out.95, %input.29, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.31 : Tensor = aten::relu_(%out.96) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %2764 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1086)
  %2765 : Tensor = prim::GetAttr[name="weight"](%2764)
  %2766 : Tensor? = prim::GetAttr[name="bias"](%2764)
  %2767 : int[] = prim::ListConstruct(%43, %43)
  %2768 : int[] = prim::ListConstruct(%48, %48)
  %2769 : int[] = prim::ListConstruct(%43, %43)
  %x.52 : Tensor = aten::conv2d(%input.31, %2765, %2766, %2767, %2768, %2769, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2771 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2764)
  %2772 : bool = prim::requires_grad(%x.52)
  %out.103 : Tensor = prim::If(%2772) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2774 : Tensor = prim::GetAttr[name="weight"](%2771)
      %2775 : Tensor = prim::GetAttr[name="running_var"](%2771)
      %2776 : float = prim::GetAttr[name="eps"](%2771)
      %2777 : Tensor = aten::add(%2775, %2776, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2778 : Tensor = aten::rsqrt(%2777) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.99 : Tensor = aten::mul(%2774, %2778) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2780 : Tensor = prim::GetAttr[name="bias"](%2771)
      %2781 : Tensor = prim::GetAttr[name="running_mean"](%2771)
      %2782 : Tensor = aten::mul(%2781, %scale.99) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.99 : Tensor = aten::sub(%2780, %2782, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2784 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.100 : Tensor = aten::reshape(%scale.99, %2784) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2786 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.100 : Tensor = aten::reshape(%bias.99, %2786) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.50 : int = prim::dtype(%x.52)
      %2789 : Tensor = aten::to(%scale.100, %out_dtype.50, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2790 : Tensor = aten::mul(%x.52, %2789) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2791 : Tensor = aten::to(%bias.100, %out_dtype.50, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2792 : Tensor = aten::add(%2790, %2791, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2792)
    block1():
      %2793 : Tensor = prim::GetAttr[name="running_mean"](%2771)
      %2794 : Tensor = prim::GetAttr[name="running_var"](%2771)
      %2795 : Tensor = prim::GetAttr[name="weight"](%2771)
      %2796 : Tensor = prim::GetAttr[name="bias"](%2771)
      %2797 : float = prim::GetAttr[name="eps"](%2771)
      %2798 : Tensor = aten::batch_norm(%x.52, %2795, %2796, %2793, %2794, %44, %33, %2797, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2798)
  %out.98 : Tensor = aten::relu_(%out.103) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %2800 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1086)
  %2801 : Tensor = prim::GetAttr[name="weight"](%2800)
  %2802 : Tensor? = prim::GetAttr[name="bias"](%2800)
  %2803 : int[] = prim::ListConstruct(%43, %43)
  %2804 : int[] = prim::ListConstruct(%43, %43)
  %2805 : int[] = prim::ListConstruct(%43, %43)
  %x.53 : Tensor = aten::conv2d(%out.98, %2801, %2802, %2803, %2804, %2805, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2807 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2800)
  %2808 : bool = prim::requires_grad(%x.53)
  %out.99 : Tensor = prim::If(%2808) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2810 : Tensor = prim::GetAttr[name="weight"](%2807)
      %2811 : Tensor = prim::GetAttr[name="running_var"](%2807)
      %2812 : float = prim::GetAttr[name="eps"](%2807)
      %2813 : Tensor = aten::add(%2811, %2812, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2814 : Tensor = aten::rsqrt(%2813) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.101 : Tensor = aten::mul(%2810, %2814) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2816 : Tensor = prim::GetAttr[name="bias"](%2807)
      %2817 : Tensor = prim::GetAttr[name="running_mean"](%2807)
      %2818 : Tensor = aten::mul(%2817, %scale.101) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.101 : Tensor = aten::sub(%2816, %2818, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2820 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.102 : Tensor = aten::reshape(%scale.101, %2820) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2822 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.102 : Tensor = aten::reshape(%bias.101, %2822) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.51 : int = prim::dtype(%x.53)
      %2825 : Tensor = aten::to(%scale.102, %out_dtype.51, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2826 : Tensor = aten::mul(%x.53, %2825) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2827 : Tensor = aten::to(%bias.102, %out_dtype.51, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2828 : Tensor = aten::add(%2826, %2827, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2828)
    block1():
      %2829 : Tensor = prim::GetAttr[name="running_mean"](%2807)
      %2830 : Tensor = prim::GetAttr[name="running_var"](%2807)
      %2831 : Tensor = prim::GetAttr[name="weight"](%2807)
      %2832 : Tensor = prim::GetAttr[name="bias"](%2807)
      %2833 : float = prim::GetAttr[name="eps"](%2807)
      %2834 : Tensor = aten::batch_norm(%x.53, %2831, %2832, %2829, %2830, %44, %33, %2833, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2834)
  %out.100 : Tensor = aten::relu_(%out.99) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %2836 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1086)
  %2837 : Tensor = prim::GetAttr[name="weight"](%2836)
  %2838 : Tensor? = prim::GetAttr[name="bias"](%2836)
  %2839 : int[] = prim::ListConstruct(%43, %43)
  %2840 : int[] = prim::ListConstruct(%48, %48)
  %2841 : int[] = prim::ListConstruct(%43, %43)
  %x.54 : Tensor = aten::conv2d(%out.100, %2837, %2838, %2839, %2840, %2841, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2843 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2836)
  %2844 : bool = prim::requires_grad(%x.54)
  %out.101 : Tensor = prim::If(%2844) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2846 : Tensor = prim::GetAttr[name="weight"](%2843)
      %2847 : Tensor = prim::GetAttr[name="running_var"](%2843)
      %2848 : float = prim::GetAttr[name="eps"](%2843)
      %2849 : Tensor = aten::add(%2847, %2848, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2850 : Tensor = aten::rsqrt(%2849) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.103 : Tensor = aten::mul(%2846, %2850) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2852 : Tensor = prim::GetAttr[name="bias"](%2843)
      %2853 : Tensor = prim::GetAttr[name="running_mean"](%2843)
      %2854 : Tensor = aten::mul(%2853, %scale.103) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.103 : Tensor = aten::sub(%2852, %2854, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2856 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.104 : Tensor = aten::reshape(%scale.103, %2856) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2858 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.104 : Tensor = aten::reshape(%bias.103, %2858) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.52 : int = prim::dtype(%x.54)
      %2861 : Tensor = aten::to(%scale.104, %out_dtype.52, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2862 : Tensor = aten::mul(%x.54, %2861) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2863 : Tensor = aten::to(%bias.104, %out_dtype.52, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2864 : Tensor = aten::add(%2862, %2863, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2864)
    block1():
      %2865 : Tensor = prim::GetAttr[name="running_mean"](%2843)
      %2866 : Tensor = prim::GetAttr[name="running_var"](%2843)
      %2867 : Tensor = prim::GetAttr[name="weight"](%2843)
      %2868 : Tensor = prim::GetAttr[name="bias"](%2843)
      %2869 : float = prim::GetAttr[name="eps"](%2843)
      %2870 : Tensor = aten::batch_norm(%x.54, %2867, %2868, %2865, %2866, %44, %33, %2869, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2870)
  %out.102 : Tensor = aten::add_(%out.101, %input.31, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.33 : Tensor = aten::relu_(%out.102) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %2873 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1087)
  %2874 : Tensor = prim::GetAttr[name="weight"](%2873)
  %2875 : Tensor? = prim::GetAttr[name="bias"](%2873)
  %2876 : int[] = prim::ListConstruct(%43, %43)
  %2877 : int[] = prim::ListConstruct(%48, %48)
  %2878 : int[] = prim::ListConstruct(%43, %43)
  %x.55 : Tensor = aten::conv2d(%input.33, %2874, %2875, %2876, %2877, %2878, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2880 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2873)
  %2881 : bool = prim::requires_grad(%x.55)
  %out.109 : Tensor = prim::If(%2881) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2883 : Tensor = prim::GetAttr[name="weight"](%2880)
      %2884 : Tensor = prim::GetAttr[name="running_var"](%2880)
      %2885 : float = prim::GetAttr[name="eps"](%2880)
      %2886 : Tensor = aten::add(%2884, %2885, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2887 : Tensor = aten::rsqrt(%2886) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.105 : Tensor = aten::mul(%2883, %2887) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2889 : Tensor = prim::GetAttr[name="bias"](%2880)
      %2890 : Tensor = prim::GetAttr[name="running_mean"](%2880)
      %2891 : Tensor = aten::mul(%2890, %scale.105) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.105 : Tensor = aten::sub(%2889, %2891, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2893 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.106 : Tensor = aten::reshape(%scale.105, %2893) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2895 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.106 : Tensor = aten::reshape(%bias.105, %2895) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.53 : int = prim::dtype(%x.55)
      %2898 : Tensor = aten::to(%scale.106, %out_dtype.53, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2899 : Tensor = aten::mul(%x.55, %2898) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2900 : Tensor = aten::to(%bias.106, %out_dtype.53, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2901 : Tensor = aten::add(%2899, %2900, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2901)
    block1():
      %2902 : Tensor = prim::GetAttr[name="running_mean"](%2880)
      %2903 : Tensor = prim::GetAttr[name="running_var"](%2880)
      %2904 : Tensor = prim::GetAttr[name="weight"](%2880)
      %2905 : Tensor = prim::GetAttr[name="bias"](%2880)
      %2906 : float = prim::GetAttr[name="eps"](%2880)
      %2907 : Tensor = aten::batch_norm(%x.55, %2904, %2905, %2902, %2903, %44, %33, %2906, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2907)
  %out.104 : Tensor = aten::relu_(%out.109) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %2909 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1087)
  %2910 : Tensor = prim::GetAttr[name="weight"](%2909)
  %2911 : Tensor? = prim::GetAttr[name="bias"](%2909)
  %2912 : int[] = prim::ListConstruct(%43, %43)
  %2913 : int[] = prim::ListConstruct(%43, %43)
  %2914 : int[] = prim::ListConstruct(%43, %43)
  %x.56 : Tensor = aten::conv2d(%out.104, %2910, %2911, %2912, %2913, %2914, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2916 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2909)
  %2917 : bool = prim::requires_grad(%x.56)
  %out.105 : Tensor = prim::If(%2917) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2919 : Tensor = prim::GetAttr[name="weight"](%2916)
      %2920 : Tensor = prim::GetAttr[name="running_var"](%2916)
      %2921 : float = prim::GetAttr[name="eps"](%2916)
      %2922 : Tensor = aten::add(%2920, %2921, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2923 : Tensor = aten::rsqrt(%2922) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.107 : Tensor = aten::mul(%2919, %2923) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2925 : Tensor = prim::GetAttr[name="bias"](%2916)
      %2926 : Tensor = prim::GetAttr[name="running_mean"](%2916)
      %2927 : Tensor = aten::mul(%2926, %scale.107) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.107 : Tensor = aten::sub(%2925, %2927, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2929 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.108 : Tensor = aten::reshape(%scale.107, %2929) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2931 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.108 : Tensor = aten::reshape(%bias.107, %2931) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.54 : int = prim::dtype(%x.56)
      %2934 : Tensor = aten::to(%scale.108, %out_dtype.54, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2935 : Tensor = aten::mul(%x.56, %2934) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2936 : Tensor = aten::to(%bias.108, %out_dtype.54, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2937 : Tensor = aten::add(%2935, %2936, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2937)
    block1():
      %2938 : Tensor = prim::GetAttr[name="running_mean"](%2916)
      %2939 : Tensor = prim::GetAttr[name="running_var"](%2916)
      %2940 : Tensor = prim::GetAttr[name="weight"](%2916)
      %2941 : Tensor = prim::GetAttr[name="bias"](%2916)
      %2942 : float = prim::GetAttr[name="eps"](%2916)
      %2943 : Tensor = aten::batch_norm(%x.56, %2940, %2941, %2938, %2939, %44, %33, %2942, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2943)
  %out.106 : Tensor = aten::relu_(%out.105) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %2945 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1087)
  %2946 : Tensor = prim::GetAttr[name="weight"](%2945)
  %2947 : Tensor? = prim::GetAttr[name="bias"](%2945)
  %2948 : int[] = prim::ListConstruct(%43, %43)
  %2949 : int[] = prim::ListConstruct(%48, %48)
  %2950 : int[] = prim::ListConstruct(%43, %43)
  %x.57 : Tensor = aten::conv2d(%out.106, %2946, %2947, %2948, %2949, %2950, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2952 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2945)
  %2953 : bool = prim::requires_grad(%x.57)
  %out.107 : Tensor = prim::If(%2953) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2955 : Tensor = prim::GetAttr[name="weight"](%2952)
      %2956 : Tensor = prim::GetAttr[name="running_var"](%2952)
      %2957 : float = prim::GetAttr[name="eps"](%2952)
      %2958 : Tensor = aten::add(%2956, %2957, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2959 : Tensor = aten::rsqrt(%2958) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.109 : Tensor = aten::mul(%2955, %2959) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2961 : Tensor = prim::GetAttr[name="bias"](%2952)
      %2962 : Tensor = prim::GetAttr[name="running_mean"](%2952)
      %2963 : Tensor = aten::mul(%2962, %scale.109) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.109 : Tensor = aten::sub(%2961, %2963, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %2965 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.110 : Tensor = aten::reshape(%scale.109, %2965) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %2967 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.110 : Tensor = aten::reshape(%bias.109, %2967) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.55 : int = prim::dtype(%x.57)
      %2970 : Tensor = aten::to(%scale.110, %out_dtype.55, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %2971 : Tensor = aten::mul(%x.57, %2970) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %2972 : Tensor = aten::to(%bias.110, %out_dtype.55, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %2973 : Tensor = aten::add(%2971, %2972, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%2973)
    block1():
      %2974 : Tensor = prim::GetAttr[name="running_mean"](%2952)
      %2975 : Tensor = prim::GetAttr[name="running_var"](%2952)
      %2976 : Tensor = prim::GetAttr[name="weight"](%2952)
      %2977 : Tensor = prim::GetAttr[name="bias"](%2952)
      %2978 : float = prim::GetAttr[name="eps"](%2952)
      %2979 : Tensor = aten::batch_norm(%x.57, %2976, %2977, %2974, %2975, %44, %33, %2978, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%2979)
  %out.108 : Tensor = aten::add_(%out.107, %input.33, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.35 : Tensor = aten::relu_(%out.108) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %2982 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1088)
  %2983 : Tensor = prim::GetAttr[name="weight"](%2982)
  %2984 : Tensor? = prim::GetAttr[name="bias"](%2982)
  %2985 : int[] = prim::ListConstruct(%43, %43)
  %2986 : int[] = prim::ListConstruct(%48, %48)
  %2987 : int[] = prim::ListConstruct(%43, %43)
  %x.58 : Tensor = aten::conv2d(%input.35, %2983, %2984, %2985, %2986, %2987, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %2989 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%2982)
  %2990 : bool = prim::requires_grad(%x.58)
  %out.115 : Tensor = prim::If(%2990) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %2992 : Tensor = prim::GetAttr[name="weight"](%2989)
      %2993 : Tensor = prim::GetAttr[name="running_var"](%2989)
      %2994 : float = prim::GetAttr[name="eps"](%2989)
      %2995 : Tensor = aten::add(%2993, %2994, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %2996 : Tensor = aten::rsqrt(%2995) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.111 : Tensor = aten::mul(%2992, %2996) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %2998 : Tensor = prim::GetAttr[name="bias"](%2989)
      %2999 : Tensor = prim::GetAttr[name="running_mean"](%2989)
      %3000 : Tensor = aten::mul(%2999, %scale.111) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.111 : Tensor = aten::sub(%2998, %3000, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3002 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.112 : Tensor = aten::reshape(%scale.111, %3002) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3004 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.112 : Tensor = aten::reshape(%bias.111, %3004) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.56 : int = prim::dtype(%x.58)
      %3007 : Tensor = aten::to(%scale.112, %out_dtype.56, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3008 : Tensor = aten::mul(%x.58, %3007) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3009 : Tensor = aten::to(%bias.112, %out_dtype.56, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3010 : Tensor = aten::add(%3008, %3009, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3010)
    block1():
      %3011 : Tensor = prim::GetAttr[name="running_mean"](%2989)
      %3012 : Tensor = prim::GetAttr[name="running_var"](%2989)
      %3013 : Tensor = prim::GetAttr[name="weight"](%2989)
      %3014 : Tensor = prim::GetAttr[name="bias"](%2989)
      %3015 : float = prim::GetAttr[name="eps"](%2989)
      %3016 : Tensor = aten::batch_norm(%x.58, %3013, %3014, %3011, %3012, %44, %33, %3015, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3016)
  %out.110 : Tensor = aten::relu_(%out.115) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %3018 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1088)
  %3019 : Tensor = prim::GetAttr[name="weight"](%3018)
  %3020 : Tensor? = prim::GetAttr[name="bias"](%3018)
  %3021 : int[] = prim::ListConstruct(%43, %43)
  %3022 : int[] = prim::ListConstruct(%43, %43)
  %3023 : int[] = prim::ListConstruct(%43, %43)
  %x.59 : Tensor = aten::conv2d(%out.110, %3019, %3020, %3021, %3022, %3023, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3025 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3018)
  %3026 : bool = prim::requires_grad(%x.59)
  %out.111 : Tensor = prim::If(%3026) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3028 : Tensor = prim::GetAttr[name="weight"](%3025)
      %3029 : Tensor = prim::GetAttr[name="running_var"](%3025)
      %3030 : float = prim::GetAttr[name="eps"](%3025)
      %3031 : Tensor = aten::add(%3029, %3030, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3032 : Tensor = aten::rsqrt(%3031) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.113 : Tensor = aten::mul(%3028, %3032) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3034 : Tensor = prim::GetAttr[name="bias"](%3025)
      %3035 : Tensor = prim::GetAttr[name="running_mean"](%3025)
      %3036 : Tensor = aten::mul(%3035, %scale.113) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.113 : Tensor = aten::sub(%3034, %3036, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3038 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.114 : Tensor = aten::reshape(%scale.113, %3038) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3040 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.114 : Tensor = aten::reshape(%bias.113, %3040) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.57 : int = prim::dtype(%x.59)
      %3043 : Tensor = aten::to(%scale.114, %out_dtype.57, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3044 : Tensor = aten::mul(%x.59, %3043) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3045 : Tensor = aten::to(%bias.114, %out_dtype.57, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3046 : Tensor = aten::add(%3044, %3045, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3046)
    block1():
      %3047 : Tensor = prim::GetAttr[name="running_mean"](%3025)
      %3048 : Tensor = prim::GetAttr[name="running_var"](%3025)
      %3049 : Tensor = prim::GetAttr[name="weight"](%3025)
      %3050 : Tensor = prim::GetAttr[name="bias"](%3025)
      %3051 : float = prim::GetAttr[name="eps"](%3025)
      %3052 : Tensor = aten::batch_norm(%x.59, %3049, %3050, %3047, %3048, %44, %33, %3051, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3052)
  %out.112 : Tensor = aten::relu_(%out.111) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %3054 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1088)
  %3055 : Tensor = prim::GetAttr[name="weight"](%3054)
  %3056 : Tensor? = prim::GetAttr[name="bias"](%3054)
  %3057 : int[] = prim::ListConstruct(%43, %43)
  %3058 : int[] = prim::ListConstruct(%48, %48)
  %3059 : int[] = prim::ListConstruct(%43, %43)
  %x.60 : Tensor = aten::conv2d(%out.112, %3055, %3056, %3057, %3058, %3059, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3061 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3054)
  %3062 : bool = prim::requires_grad(%x.60)
  %out.113 : Tensor = prim::If(%3062) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3064 : Tensor = prim::GetAttr[name="weight"](%3061)
      %3065 : Tensor = prim::GetAttr[name="running_var"](%3061)
      %3066 : float = prim::GetAttr[name="eps"](%3061)
      %3067 : Tensor = aten::add(%3065, %3066, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3068 : Tensor = aten::rsqrt(%3067) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.115 : Tensor = aten::mul(%3064, %3068) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3070 : Tensor = prim::GetAttr[name="bias"](%3061)
      %3071 : Tensor = prim::GetAttr[name="running_mean"](%3061)
      %3072 : Tensor = aten::mul(%3071, %scale.115) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.115 : Tensor = aten::sub(%3070, %3072, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3074 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.116 : Tensor = aten::reshape(%scale.115, %3074) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3076 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.116 : Tensor = aten::reshape(%bias.115, %3076) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.58 : int = prim::dtype(%x.60)
      %3079 : Tensor = aten::to(%scale.116, %out_dtype.58, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3080 : Tensor = aten::mul(%x.60, %3079) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3081 : Tensor = aten::to(%bias.116, %out_dtype.58, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3082 : Tensor = aten::add(%3080, %3081, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3082)
    block1():
      %3083 : Tensor = prim::GetAttr[name="running_mean"](%3061)
      %3084 : Tensor = prim::GetAttr[name="running_var"](%3061)
      %3085 : Tensor = prim::GetAttr[name="weight"](%3061)
      %3086 : Tensor = prim::GetAttr[name="bias"](%3061)
      %3087 : float = prim::GetAttr[name="eps"](%3061)
      %3088 : Tensor = aten::batch_norm(%x.60, %3085, %3086, %3083, %3084, %44, %33, %3087, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3088)
  %out.114 : Tensor = aten::add_(%out.113, %input.35, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.37 : Tensor = aten::relu_(%out.114) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %3091 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1089)
  %3092 : Tensor = prim::GetAttr[name="weight"](%3091)
  %3093 : Tensor? = prim::GetAttr[name="bias"](%3091)
  %3094 : int[] = prim::ListConstruct(%43, %43)
  %3095 : int[] = prim::ListConstruct(%48, %48)
  %3096 : int[] = prim::ListConstruct(%43, %43)
  %x.61 : Tensor = aten::conv2d(%input.37, %3092, %3093, %3094, %3095, %3096, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3098 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3091)
  %3099 : bool = prim::requires_grad(%x.61)
  %out.121 : Tensor = prim::If(%3099) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3101 : Tensor = prim::GetAttr[name="weight"](%3098)
      %3102 : Tensor = prim::GetAttr[name="running_var"](%3098)
      %3103 : float = prim::GetAttr[name="eps"](%3098)
      %3104 : Tensor = aten::add(%3102, %3103, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3105 : Tensor = aten::rsqrt(%3104) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.117 : Tensor = aten::mul(%3101, %3105) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3107 : Tensor = prim::GetAttr[name="bias"](%3098)
      %3108 : Tensor = prim::GetAttr[name="running_mean"](%3098)
      %3109 : Tensor = aten::mul(%3108, %scale.117) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.117 : Tensor = aten::sub(%3107, %3109, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3111 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.118 : Tensor = aten::reshape(%scale.117, %3111) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3113 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.118 : Tensor = aten::reshape(%bias.117, %3113) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.59 : int = prim::dtype(%x.61)
      %3116 : Tensor = aten::to(%scale.118, %out_dtype.59, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3117 : Tensor = aten::mul(%x.61, %3116) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3118 : Tensor = aten::to(%bias.118, %out_dtype.59, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3119 : Tensor = aten::add(%3117, %3118, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3119)
    block1():
      %3120 : Tensor = prim::GetAttr[name="running_mean"](%3098)
      %3121 : Tensor = prim::GetAttr[name="running_var"](%3098)
      %3122 : Tensor = prim::GetAttr[name="weight"](%3098)
      %3123 : Tensor = prim::GetAttr[name="bias"](%3098)
      %3124 : float = prim::GetAttr[name="eps"](%3098)
      %3125 : Tensor = aten::batch_norm(%x.61, %3122, %3123, %3120, %3121, %44, %33, %3124, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3125)
  %out.116 : Tensor = aten::relu_(%out.121) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %3127 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1089)
  %3128 : Tensor = prim::GetAttr[name="weight"](%3127)
  %3129 : Tensor? = prim::GetAttr[name="bias"](%3127)
  %3130 : int[] = prim::ListConstruct(%43, %43)
  %3131 : int[] = prim::ListConstruct(%43, %43)
  %3132 : int[] = prim::ListConstruct(%43, %43)
  %x.62 : Tensor = aten::conv2d(%out.116, %3128, %3129, %3130, %3131, %3132, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3134 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3127)
  %3135 : bool = prim::requires_grad(%x.62)
  %out.117 : Tensor = prim::If(%3135) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3137 : Tensor = prim::GetAttr[name="weight"](%3134)
      %3138 : Tensor = prim::GetAttr[name="running_var"](%3134)
      %3139 : float = prim::GetAttr[name="eps"](%3134)
      %3140 : Tensor = aten::add(%3138, %3139, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3141 : Tensor = aten::rsqrt(%3140) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.119 : Tensor = aten::mul(%3137, %3141) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3143 : Tensor = prim::GetAttr[name="bias"](%3134)
      %3144 : Tensor = prim::GetAttr[name="running_mean"](%3134)
      %3145 : Tensor = aten::mul(%3144, %scale.119) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.119 : Tensor = aten::sub(%3143, %3145, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3147 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.120 : Tensor = aten::reshape(%scale.119, %3147) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3149 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.120 : Tensor = aten::reshape(%bias.119, %3149) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.60 : int = prim::dtype(%x.62)
      %3152 : Tensor = aten::to(%scale.120, %out_dtype.60, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3153 : Tensor = aten::mul(%x.62, %3152) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3154 : Tensor = aten::to(%bias.120, %out_dtype.60, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3155 : Tensor = aten::add(%3153, %3154, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3155)
    block1():
      %3156 : Tensor = prim::GetAttr[name="running_mean"](%3134)
      %3157 : Tensor = prim::GetAttr[name="running_var"](%3134)
      %3158 : Tensor = prim::GetAttr[name="weight"](%3134)
      %3159 : Tensor = prim::GetAttr[name="bias"](%3134)
      %3160 : float = prim::GetAttr[name="eps"](%3134)
      %3161 : Tensor = aten::batch_norm(%x.62, %3158, %3159, %3156, %3157, %44, %33, %3160, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3161)
  %out.118 : Tensor = aten::relu_(%out.117) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %3163 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1089)
  %3164 : Tensor = prim::GetAttr[name="weight"](%3163)
  %3165 : Tensor? = prim::GetAttr[name="bias"](%3163)
  %3166 : int[] = prim::ListConstruct(%43, %43)
  %3167 : int[] = prim::ListConstruct(%48, %48)
  %3168 : int[] = prim::ListConstruct(%43, %43)
  %x.63 : Tensor = aten::conv2d(%out.118, %3164, %3165, %3166, %3167, %3168, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3170 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3163)
  %3171 : bool = prim::requires_grad(%x.63)
  %out.119 : Tensor = prim::If(%3171) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3173 : Tensor = prim::GetAttr[name="weight"](%3170)
      %3174 : Tensor = prim::GetAttr[name="running_var"](%3170)
      %3175 : float = prim::GetAttr[name="eps"](%3170)
      %3176 : Tensor = aten::add(%3174, %3175, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3177 : Tensor = aten::rsqrt(%3176) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.121 : Tensor = aten::mul(%3173, %3177) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3179 : Tensor = prim::GetAttr[name="bias"](%3170)
      %3180 : Tensor = prim::GetAttr[name="running_mean"](%3170)
      %3181 : Tensor = aten::mul(%3180, %scale.121) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.121 : Tensor = aten::sub(%3179, %3181, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3183 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.122 : Tensor = aten::reshape(%scale.121, %3183) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3185 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.122 : Tensor = aten::reshape(%bias.121, %3185) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.61 : int = prim::dtype(%x.63)
      %3188 : Tensor = aten::to(%scale.122, %out_dtype.61, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3189 : Tensor = aten::mul(%x.63, %3188) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3190 : Tensor = aten::to(%bias.122, %out_dtype.61, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3191 : Tensor = aten::add(%3189, %3190, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3191)
    block1():
      %3192 : Tensor = prim::GetAttr[name="running_mean"](%3170)
      %3193 : Tensor = prim::GetAttr[name="running_var"](%3170)
      %3194 : Tensor = prim::GetAttr[name="weight"](%3170)
      %3195 : Tensor = prim::GetAttr[name="bias"](%3170)
      %3196 : float = prim::GetAttr[name="eps"](%3170)
      %3197 : Tensor = aten::batch_norm(%x.63, %3194, %3195, %3192, %3193, %44, %33, %3196, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3197)
  %out.120 : Tensor = aten::add_(%out.119, %input.37, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.39 : Tensor = aten::relu_(%out.120) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %3200 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1090)
  %3201 : Tensor = prim::GetAttr[name="weight"](%3200)
  %3202 : Tensor? = prim::GetAttr[name="bias"](%3200)
  %3203 : int[] = prim::ListConstruct(%43, %43)
  %3204 : int[] = prim::ListConstruct(%48, %48)
  %3205 : int[] = prim::ListConstruct(%43, %43)
  %x.64 : Tensor = aten::conv2d(%input.39, %3201, %3202, %3203, %3204, %3205, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3207 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3200)
  %3208 : bool = prim::requires_grad(%x.64)
  %out.127 : Tensor = prim::If(%3208) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3210 : Tensor = prim::GetAttr[name="weight"](%3207)
      %3211 : Tensor = prim::GetAttr[name="running_var"](%3207)
      %3212 : float = prim::GetAttr[name="eps"](%3207)
      %3213 : Tensor = aten::add(%3211, %3212, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3214 : Tensor = aten::rsqrt(%3213) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.123 : Tensor = aten::mul(%3210, %3214) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3216 : Tensor = prim::GetAttr[name="bias"](%3207)
      %3217 : Tensor = prim::GetAttr[name="running_mean"](%3207)
      %3218 : Tensor = aten::mul(%3217, %scale.123) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.123 : Tensor = aten::sub(%3216, %3218, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3220 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.124 : Tensor = aten::reshape(%scale.123, %3220) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3222 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.124 : Tensor = aten::reshape(%bias.123, %3222) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.62 : int = prim::dtype(%x.64)
      %3225 : Tensor = aten::to(%scale.124, %out_dtype.62, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3226 : Tensor = aten::mul(%x.64, %3225) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3227 : Tensor = aten::to(%bias.124, %out_dtype.62, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3228 : Tensor = aten::add(%3226, %3227, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3228)
    block1():
      %3229 : Tensor = prim::GetAttr[name="running_mean"](%3207)
      %3230 : Tensor = prim::GetAttr[name="running_var"](%3207)
      %3231 : Tensor = prim::GetAttr[name="weight"](%3207)
      %3232 : Tensor = prim::GetAttr[name="bias"](%3207)
      %3233 : float = prim::GetAttr[name="eps"](%3207)
      %3234 : Tensor = aten::batch_norm(%x.64, %3231, %3232, %3229, %3230, %44, %33, %3233, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3234)
  %out.122 : Tensor = aten::relu_(%out.127) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %3236 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1090)
  %3237 : Tensor = prim::GetAttr[name="weight"](%3236)
  %3238 : Tensor? = prim::GetAttr[name="bias"](%3236)
  %3239 : int[] = prim::ListConstruct(%43, %43)
  %3240 : int[] = prim::ListConstruct(%43, %43)
  %3241 : int[] = prim::ListConstruct(%43, %43)
  %x.65 : Tensor = aten::conv2d(%out.122, %3237, %3238, %3239, %3240, %3241, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3243 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3236)
  %3244 : bool = prim::requires_grad(%x.65)
  %out.123 : Tensor = prim::If(%3244) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3246 : Tensor = prim::GetAttr[name="weight"](%3243)
      %3247 : Tensor = prim::GetAttr[name="running_var"](%3243)
      %3248 : float = prim::GetAttr[name="eps"](%3243)
      %3249 : Tensor = aten::add(%3247, %3248, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3250 : Tensor = aten::rsqrt(%3249) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.125 : Tensor = aten::mul(%3246, %3250) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3252 : Tensor = prim::GetAttr[name="bias"](%3243)
      %3253 : Tensor = prim::GetAttr[name="running_mean"](%3243)
      %3254 : Tensor = aten::mul(%3253, %scale.125) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.125 : Tensor = aten::sub(%3252, %3254, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3256 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.126 : Tensor = aten::reshape(%scale.125, %3256) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3258 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.126 : Tensor = aten::reshape(%bias.125, %3258) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.63 : int = prim::dtype(%x.65)
      %3261 : Tensor = aten::to(%scale.126, %out_dtype.63, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3262 : Tensor = aten::mul(%x.65, %3261) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3263 : Tensor = aten::to(%bias.126, %out_dtype.63, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3264 : Tensor = aten::add(%3262, %3263, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3264)
    block1():
      %3265 : Tensor = prim::GetAttr[name="running_mean"](%3243)
      %3266 : Tensor = prim::GetAttr[name="running_var"](%3243)
      %3267 : Tensor = prim::GetAttr[name="weight"](%3243)
      %3268 : Tensor = prim::GetAttr[name="bias"](%3243)
      %3269 : float = prim::GetAttr[name="eps"](%3243)
      %3270 : Tensor = aten::batch_norm(%x.65, %3267, %3268, %3265, %3266, %44, %33, %3269, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3270)
  %out.124 : Tensor = aten::relu_(%out.123) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %3272 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1090)
  %3273 : Tensor = prim::GetAttr[name="weight"](%3272)
  %3274 : Tensor? = prim::GetAttr[name="bias"](%3272)
  %3275 : int[] = prim::ListConstruct(%43, %43)
  %3276 : int[] = prim::ListConstruct(%48, %48)
  %3277 : int[] = prim::ListConstruct(%43, %43)
  %x.66 : Tensor = aten::conv2d(%out.124, %3273, %3274, %3275, %3276, %3277, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3279 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3272)
  %3280 : bool = prim::requires_grad(%x.66)
  %out.125 : Tensor = prim::If(%3280) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3282 : Tensor = prim::GetAttr[name="weight"](%3279)
      %3283 : Tensor = prim::GetAttr[name="running_var"](%3279)
      %3284 : float = prim::GetAttr[name="eps"](%3279)
      %3285 : Tensor = aten::add(%3283, %3284, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3286 : Tensor = aten::rsqrt(%3285) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.127 : Tensor = aten::mul(%3282, %3286) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3288 : Tensor = prim::GetAttr[name="bias"](%3279)
      %3289 : Tensor = prim::GetAttr[name="running_mean"](%3279)
      %3290 : Tensor = aten::mul(%3289, %scale.127) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.127 : Tensor = aten::sub(%3288, %3290, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3292 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.128 : Tensor = aten::reshape(%scale.127, %3292) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3294 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.128 : Tensor = aten::reshape(%bias.127, %3294) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.64 : int = prim::dtype(%x.66)
      %3297 : Tensor = aten::to(%scale.128, %out_dtype.64, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3298 : Tensor = aten::mul(%x.66, %3297) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3299 : Tensor = aten::to(%bias.128, %out_dtype.64, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3300 : Tensor = aten::add(%3298, %3299, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3300)
    block1():
      %3301 : Tensor = prim::GetAttr[name="running_mean"](%3279)
      %3302 : Tensor = prim::GetAttr[name="running_var"](%3279)
      %3303 : Tensor = prim::GetAttr[name="weight"](%3279)
      %3304 : Tensor = prim::GetAttr[name="bias"](%3279)
      %3305 : float = prim::GetAttr[name="eps"](%3279)
      %3306 : Tensor = aten::batch_norm(%x.66, %3303, %3304, %3301, %3302, %44, %33, %3305, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3306)
  %out.126 : Tensor = aten::add_(%out.125, %input.39, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.41 : Tensor = aten::relu_(%out.126) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %3309 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1091)
  %3310 : Tensor = prim::GetAttr[name="weight"](%3309)
  %3311 : Tensor? = prim::GetAttr[name="bias"](%3309)
  %3312 : int[] = prim::ListConstruct(%43, %43)
  %3313 : int[] = prim::ListConstruct(%48, %48)
  %3314 : int[] = prim::ListConstruct(%43, %43)
  %x.67 : Tensor = aten::conv2d(%input.41, %3310, %3311, %3312, %3313, %3314, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3316 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3309)
  %3317 : bool = prim::requires_grad(%x.67)
  %out.133 : Tensor = prim::If(%3317) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3319 : Tensor = prim::GetAttr[name="weight"](%3316)
      %3320 : Tensor = prim::GetAttr[name="running_var"](%3316)
      %3321 : float = prim::GetAttr[name="eps"](%3316)
      %3322 : Tensor = aten::add(%3320, %3321, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3323 : Tensor = aten::rsqrt(%3322) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.129 : Tensor = aten::mul(%3319, %3323) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3325 : Tensor = prim::GetAttr[name="bias"](%3316)
      %3326 : Tensor = prim::GetAttr[name="running_mean"](%3316)
      %3327 : Tensor = aten::mul(%3326, %scale.129) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.129 : Tensor = aten::sub(%3325, %3327, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3329 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.130 : Tensor = aten::reshape(%scale.129, %3329) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3331 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.130 : Tensor = aten::reshape(%bias.129, %3331) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.65 : int = prim::dtype(%x.67)
      %3334 : Tensor = aten::to(%scale.130, %out_dtype.65, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3335 : Tensor = aten::mul(%x.67, %3334) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3336 : Tensor = aten::to(%bias.130, %out_dtype.65, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3337 : Tensor = aten::add(%3335, %3336, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3337)
    block1():
      %3338 : Tensor = prim::GetAttr[name="running_mean"](%3316)
      %3339 : Tensor = prim::GetAttr[name="running_var"](%3316)
      %3340 : Tensor = prim::GetAttr[name="weight"](%3316)
      %3341 : Tensor = prim::GetAttr[name="bias"](%3316)
      %3342 : float = prim::GetAttr[name="eps"](%3316)
      %3343 : Tensor = aten::batch_norm(%x.67, %3340, %3341, %3338, %3339, %44, %33, %3342, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3343)
  %out.128 : Tensor = aten::relu_(%out.133) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %3345 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1091)
  %3346 : Tensor = prim::GetAttr[name="weight"](%3345)
  %3347 : Tensor? = prim::GetAttr[name="bias"](%3345)
  %3348 : int[] = prim::ListConstruct(%43, %43)
  %3349 : int[] = prim::ListConstruct(%43, %43)
  %3350 : int[] = prim::ListConstruct(%43, %43)
  %x.68 : Tensor = aten::conv2d(%out.128, %3346, %3347, %3348, %3349, %3350, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3352 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3345)
  %3353 : bool = prim::requires_grad(%x.68)
  %out.129 : Tensor = prim::If(%3353) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3355 : Tensor = prim::GetAttr[name="weight"](%3352)
      %3356 : Tensor = prim::GetAttr[name="running_var"](%3352)
      %3357 : float = prim::GetAttr[name="eps"](%3352)
      %3358 : Tensor = aten::add(%3356, %3357, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3359 : Tensor = aten::rsqrt(%3358) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.131 : Tensor = aten::mul(%3355, %3359) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3361 : Tensor = prim::GetAttr[name="bias"](%3352)
      %3362 : Tensor = prim::GetAttr[name="running_mean"](%3352)
      %3363 : Tensor = aten::mul(%3362, %scale.131) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.131 : Tensor = aten::sub(%3361, %3363, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3365 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.132 : Tensor = aten::reshape(%scale.131, %3365) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3367 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.132 : Tensor = aten::reshape(%bias.131, %3367) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.66 : int = prim::dtype(%x.68)
      %3370 : Tensor = aten::to(%scale.132, %out_dtype.66, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3371 : Tensor = aten::mul(%x.68, %3370) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3372 : Tensor = aten::to(%bias.132, %out_dtype.66, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3373 : Tensor = aten::add(%3371, %3372, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3373)
    block1():
      %3374 : Tensor = prim::GetAttr[name="running_mean"](%3352)
      %3375 : Tensor = prim::GetAttr[name="running_var"](%3352)
      %3376 : Tensor = prim::GetAttr[name="weight"](%3352)
      %3377 : Tensor = prim::GetAttr[name="bias"](%3352)
      %3378 : float = prim::GetAttr[name="eps"](%3352)
      %3379 : Tensor = aten::batch_norm(%x.68, %3376, %3377, %3374, %3375, %44, %33, %3378, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3379)
  %out.130 : Tensor = aten::relu_(%out.129) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %3381 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1091)
  %3382 : Tensor = prim::GetAttr[name="weight"](%3381)
  %3383 : Tensor? = prim::GetAttr[name="bias"](%3381)
  %3384 : int[] = prim::ListConstruct(%43, %43)
  %3385 : int[] = prim::ListConstruct(%48, %48)
  %3386 : int[] = prim::ListConstruct(%43, %43)
  %x.69 : Tensor = aten::conv2d(%out.130, %3382, %3383, %3384, %3385, %3386, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3388 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3381)
  %3389 : bool = prim::requires_grad(%x.69)
  %out.131 : Tensor = prim::If(%3389) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3391 : Tensor = prim::GetAttr[name="weight"](%3388)
      %3392 : Tensor = prim::GetAttr[name="running_var"](%3388)
      %3393 : float = prim::GetAttr[name="eps"](%3388)
      %3394 : Tensor = aten::add(%3392, %3393, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3395 : Tensor = aten::rsqrt(%3394) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.133 : Tensor = aten::mul(%3391, %3395) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3397 : Tensor = prim::GetAttr[name="bias"](%3388)
      %3398 : Tensor = prim::GetAttr[name="running_mean"](%3388)
      %3399 : Tensor = aten::mul(%3398, %scale.133) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.133 : Tensor = aten::sub(%3397, %3399, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3401 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.134 : Tensor = aten::reshape(%scale.133, %3401) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3403 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.134 : Tensor = aten::reshape(%bias.133, %3403) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.67 : int = prim::dtype(%x.69)
      %3406 : Tensor = aten::to(%scale.134, %out_dtype.67, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3407 : Tensor = aten::mul(%x.69, %3406) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3408 : Tensor = aten::to(%bias.134, %out_dtype.67, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3409 : Tensor = aten::add(%3407, %3408, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3409)
    block1():
      %3410 : Tensor = prim::GetAttr[name="running_mean"](%3388)
      %3411 : Tensor = prim::GetAttr[name="running_var"](%3388)
      %3412 : Tensor = prim::GetAttr[name="weight"](%3388)
      %3413 : Tensor = prim::GetAttr[name="bias"](%3388)
      %3414 : float = prim::GetAttr[name="eps"](%3388)
      %3415 : Tensor = aten::batch_norm(%x.69, %3412, %3413, %3410, %3411, %44, %33, %3414, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3415)
  %out.132 : Tensor = aten::add_(%out.131, %input.41, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.43 : Tensor = aten::relu_(%out.132) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %3418 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1092)
  %3419 : Tensor = prim::GetAttr[name="weight"](%3418)
  %3420 : Tensor? = prim::GetAttr[name="bias"](%3418)
  %3421 : int[] = prim::ListConstruct(%43, %43)
  %3422 : int[] = prim::ListConstruct(%48, %48)
  %3423 : int[] = prim::ListConstruct(%43, %43)
  %x.70 : Tensor = aten::conv2d(%input.43, %3419, %3420, %3421, %3422, %3423, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3425 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3418)
  %3426 : bool = prim::requires_grad(%x.70)
  %out.139 : Tensor = prim::If(%3426) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3428 : Tensor = prim::GetAttr[name="weight"](%3425)
      %3429 : Tensor = prim::GetAttr[name="running_var"](%3425)
      %3430 : float = prim::GetAttr[name="eps"](%3425)
      %3431 : Tensor = aten::add(%3429, %3430, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3432 : Tensor = aten::rsqrt(%3431) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.135 : Tensor = aten::mul(%3428, %3432) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3434 : Tensor = prim::GetAttr[name="bias"](%3425)
      %3435 : Tensor = prim::GetAttr[name="running_mean"](%3425)
      %3436 : Tensor = aten::mul(%3435, %scale.135) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.135 : Tensor = aten::sub(%3434, %3436, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3438 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.136 : Tensor = aten::reshape(%scale.135, %3438) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3440 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.136 : Tensor = aten::reshape(%bias.135, %3440) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.68 : int = prim::dtype(%x.70)
      %3443 : Tensor = aten::to(%scale.136, %out_dtype.68, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3444 : Tensor = aten::mul(%x.70, %3443) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3445 : Tensor = aten::to(%bias.136, %out_dtype.68, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3446 : Tensor = aten::add(%3444, %3445, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3446)
    block1():
      %3447 : Tensor = prim::GetAttr[name="running_mean"](%3425)
      %3448 : Tensor = prim::GetAttr[name="running_var"](%3425)
      %3449 : Tensor = prim::GetAttr[name="weight"](%3425)
      %3450 : Tensor = prim::GetAttr[name="bias"](%3425)
      %3451 : float = prim::GetAttr[name="eps"](%3425)
      %3452 : Tensor = aten::batch_norm(%x.70, %3449, %3450, %3447, %3448, %44, %33, %3451, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3452)
  %out.134 : Tensor = aten::relu_(%out.139) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %3454 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1092)
  %3455 : Tensor = prim::GetAttr[name="weight"](%3454)
  %3456 : Tensor? = prim::GetAttr[name="bias"](%3454)
  %3457 : int[] = prim::ListConstruct(%43, %43)
  %3458 : int[] = prim::ListConstruct(%43, %43)
  %3459 : int[] = prim::ListConstruct(%43, %43)
  %x.71 : Tensor = aten::conv2d(%out.134, %3455, %3456, %3457, %3458, %3459, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3461 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3454)
  %3462 : bool = prim::requires_grad(%x.71)
  %out.135 : Tensor = prim::If(%3462) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3464 : Tensor = prim::GetAttr[name="weight"](%3461)
      %3465 : Tensor = prim::GetAttr[name="running_var"](%3461)
      %3466 : float = prim::GetAttr[name="eps"](%3461)
      %3467 : Tensor = aten::add(%3465, %3466, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3468 : Tensor = aten::rsqrt(%3467) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.137 : Tensor = aten::mul(%3464, %3468) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3470 : Tensor = prim::GetAttr[name="bias"](%3461)
      %3471 : Tensor = prim::GetAttr[name="running_mean"](%3461)
      %3472 : Tensor = aten::mul(%3471, %scale.137) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.137 : Tensor = aten::sub(%3470, %3472, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3474 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.138 : Tensor = aten::reshape(%scale.137, %3474) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3476 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.138 : Tensor = aten::reshape(%bias.137, %3476) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.69 : int = prim::dtype(%x.71)
      %3479 : Tensor = aten::to(%scale.138, %out_dtype.69, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3480 : Tensor = aten::mul(%x.71, %3479) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3481 : Tensor = aten::to(%bias.138, %out_dtype.69, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3482 : Tensor = aten::add(%3480, %3481, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3482)
    block1():
      %3483 : Tensor = prim::GetAttr[name="running_mean"](%3461)
      %3484 : Tensor = prim::GetAttr[name="running_var"](%3461)
      %3485 : Tensor = prim::GetAttr[name="weight"](%3461)
      %3486 : Tensor = prim::GetAttr[name="bias"](%3461)
      %3487 : float = prim::GetAttr[name="eps"](%3461)
      %3488 : Tensor = aten::batch_norm(%x.71, %3485, %3486, %3483, %3484, %44, %33, %3487, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3488)
  %out.136 : Tensor = aten::relu_(%out.135) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %3490 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1092)
  %3491 : Tensor = prim::GetAttr[name="weight"](%3490)
  %3492 : Tensor? = prim::GetAttr[name="bias"](%3490)
  %3493 : int[] = prim::ListConstruct(%43, %43)
  %3494 : int[] = prim::ListConstruct(%48, %48)
  %3495 : int[] = prim::ListConstruct(%43, %43)
  %x.72 : Tensor = aten::conv2d(%out.136, %3491, %3492, %3493, %3494, %3495, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3497 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3490)
  %3498 : bool = prim::requires_grad(%x.72)
  %out.137 : Tensor = prim::If(%3498) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3500 : Tensor = prim::GetAttr[name="weight"](%3497)
      %3501 : Tensor = prim::GetAttr[name="running_var"](%3497)
      %3502 : float = prim::GetAttr[name="eps"](%3497)
      %3503 : Tensor = aten::add(%3501, %3502, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3504 : Tensor = aten::rsqrt(%3503) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.139 : Tensor = aten::mul(%3500, %3504) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3506 : Tensor = prim::GetAttr[name="bias"](%3497)
      %3507 : Tensor = prim::GetAttr[name="running_mean"](%3497)
      %3508 : Tensor = aten::mul(%3507, %scale.139) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.139 : Tensor = aten::sub(%3506, %3508, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3510 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.140 : Tensor = aten::reshape(%scale.139, %3510) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3512 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.140 : Tensor = aten::reshape(%bias.139, %3512) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.70 : int = prim::dtype(%x.72)
      %3515 : Tensor = aten::to(%scale.140, %out_dtype.70, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3516 : Tensor = aten::mul(%x.72, %3515) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3517 : Tensor = aten::to(%bias.140, %out_dtype.70, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3518 : Tensor = aten::add(%3516, %3517, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3518)
    block1():
      %3519 : Tensor = prim::GetAttr[name="running_mean"](%3497)
      %3520 : Tensor = prim::GetAttr[name="running_var"](%3497)
      %3521 : Tensor = prim::GetAttr[name="weight"](%3497)
      %3522 : Tensor = prim::GetAttr[name="bias"](%3497)
      %3523 : float = prim::GetAttr[name="eps"](%3497)
      %3524 : Tensor = aten::batch_norm(%x.72, %3521, %3522, %3519, %3520, %44, %33, %3523, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3524)
  %out.138 : Tensor = aten::add_(%out.137, %input.43, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.45 : Tensor = aten::relu_(%out.138) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %3527 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%1093)
  %3528 : Tensor = prim::GetAttr[name="weight"](%3527)
  %3529 : Tensor? = prim::GetAttr[name="bias"](%3527)
  %3530 : int[] = prim::ListConstruct(%43, %43)
  %3531 : int[] = prim::ListConstruct(%48, %48)
  %3532 : int[] = prim::ListConstruct(%43, %43)
  %x.111 : Tensor = aten::conv2d(%input.45, %3528, %3529, %3530, %3531, %3532, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3534 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3527)
  %3535 : bool = prim::requires_grad(%x.111)
  %out.193 : Tensor = prim::If(%3535) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3537 : Tensor = prim::GetAttr[name="weight"](%3534)
      %3538 : Tensor = prim::GetAttr[name="running_var"](%3534)
      %3539 : float = prim::GetAttr[name="eps"](%3534)
      %3540 : Tensor = aten::add(%3538, %3539, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3541 : Tensor = aten::rsqrt(%3540) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.203 : Tensor = aten::mul(%3537, %3541) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3543 : Tensor = prim::GetAttr[name="bias"](%3534)
      %3544 : Tensor = prim::GetAttr[name="running_mean"](%3534)
      %3545 : Tensor = aten::mul(%3544, %scale.203) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.203 : Tensor = aten::sub(%3543, %3545, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3547 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.204 : Tensor = aten::reshape(%scale.203, %3547) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3549 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.204 : Tensor = aten::reshape(%bias.203, %3549) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.102 : int = prim::dtype(%x.111)
      %3552 : Tensor = aten::to(%scale.204, %out_dtype.102, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3553 : Tensor = aten::mul(%x.111, %3552) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3554 : Tensor = aten::to(%bias.204, %out_dtype.102, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3555 : Tensor = aten::add(%3553, %3554, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3555)
    block1():
      %3556 : Tensor = prim::GetAttr[name="running_mean"](%3534)
      %3557 : Tensor = prim::GetAttr[name="running_var"](%3534)
      %3558 : Tensor = prim::GetAttr[name="weight"](%3534)
      %3559 : Tensor = prim::GetAttr[name="bias"](%3534)
      %3560 : float = prim::GetAttr[name="eps"](%3534)
      %3561 : Tensor = aten::batch_norm(%x.111, %3558, %3559, %3556, %3557, %44, %33, %3560, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3561)
  %out.194 : Tensor = aten::relu_(%out.193) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %3563 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%1093)
  %3564 : Tensor = prim::GetAttr[name="weight"](%3563)
  %3565 : Tensor? = prim::GetAttr[name="bias"](%3563)
  %3566 : int[] = prim::ListConstruct(%43, %43)
  %3567 : int[] = prim::ListConstruct(%43, %43)
  %3568 : int[] = prim::ListConstruct(%43, %43)
  %x.112 : Tensor = aten::conv2d(%out.194, %3564, %3565, %3566, %3567, %3568, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3570 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3563)
  %3571 : bool = prim::requires_grad(%x.112)
  %out.195 : Tensor = prim::If(%3571) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3573 : Tensor = prim::GetAttr[name="weight"](%3570)
      %3574 : Tensor = prim::GetAttr[name="running_var"](%3570)
      %3575 : float = prim::GetAttr[name="eps"](%3570)
      %3576 : Tensor = aten::add(%3574, %3575, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3577 : Tensor = aten::rsqrt(%3576) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.205 : Tensor = aten::mul(%3573, %3577) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3579 : Tensor = prim::GetAttr[name="bias"](%3570)
      %3580 : Tensor = prim::GetAttr[name="running_mean"](%3570)
      %3581 : Tensor = aten::mul(%3580, %scale.205) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.205 : Tensor = aten::sub(%3579, %3581, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3583 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.206 : Tensor = aten::reshape(%scale.205, %3583) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3585 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.206 : Tensor = aten::reshape(%bias.205, %3585) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.103 : int = prim::dtype(%x.112)
      %3588 : Tensor = aten::to(%scale.206, %out_dtype.103, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3589 : Tensor = aten::mul(%x.112, %3588) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3590 : Tensor = aten::to(%bias.206, %out_dtype.103, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3591 : Tensor = aten::add(%3589, %3590, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3591)
    block1():
      %3592 : Tensor = prim::GetAttr[name="running_mean"](%3570)
      %3593 : Tensor = prim::GetAttr[name="running_var"](%3570)
      %3594 : Tensor = prim::GetAttr[name="weight"](%3570)
      %3595 : Tensor = prim::GetAttr[name="bias"](%3570)
      %3596 : float = prim::GetAttr[name="eps"](%3570)
      %3597 : Tensor = aten::batch_norm(%x.112, %3594, %3595, %3592, %3593, %44, %33, %3596, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3597)
  %out.196 : Tensor = aten::relu_(%out.195) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %3599 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%1093)
  %3600 : Tensor = prim::GetAttr[name="weight"](%3599)
  %3601 : Tensor? = prim::GetAttr[name="bias"](%3599)
  %3602 : int[] = prim::ListConstruct(%43, %43)
  %3603 : int[] = prim::ListConstruct(%48, %48)
  %3604 : int[] = prim::ListConstruct(%43, %43)
  %x.113 : Tensor = aten::conv2d(%out.196, %3600, %3601, %3602, %3603, %3604, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3606 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3599)
  %3607 : bool = prim::requires_grad(%x.113)
  %out.197 : Tensor = prim::If(%3607) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3609 : Tensor = prim::GetAttr[name="weight"](%3606)
      %3610 : Tensor = prim::GetAttr[name="running_var"](%3606)
      %3611 : float = prim::GetAttr[name="eps"](%3606)
      %3612 : Tensor = aten::add(%3610, %3611, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3613 : Tensor = aten::rsqrt(%3612) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.207 : Tensor = aten::mul(%3609, %3613) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3615 : Tensor = prim::GetAttr[name="bias"](%3606)
      %3616 : Tensor = prim::GetAttr[name="running_mean"](%3606)
      %3617 : Tensor = aten::mul(%3616, %scale.207) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.207 : Tensor = aten::sub(%3615, %3617, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3619 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.208 : Tensor = aten::reshape(%scale.207, %3619) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3621 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.208 : Tensor = aten::reshape(%bias.207, %3621) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.104 : int = prim::dtype(%x.113)
      %3624 : Tensor = aten::to(%scale.208, %out_dtype.104, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3625 : Tensor = aten::mul(%x.113, %3624) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3626 : Tensor = aten::to(%bias.208, %out_dtype.104, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3627 : Tensor = aten::add(%3625, %3626, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3627)
    block1():
      %3628 : Tensor = prim::GetAttr[name="running_mean"](%3606)
      %3629 : Tensor = prim::GetAttr[name="running_var"](%3606)
      %3630 : Tensor = prim::GetAttr[name="weight"](%3606)
      %3631 : Tensor = prim::GetAttr[name="bias"](%3606)
      %3632 : float = prim::GetAttr[name="eps"](%3606)
      %3633 : Tensor = aten::batch_norm(%x.113, %3630, %3631, %3628, %3629, %44, %33, %3632, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3633)
  %out.198 : Tensor = aten::add_(%out.197, %input.45, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %x.85 : Tensor = aten::relu_(%out.198) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %3636 : str[] = prim::GetAttr[name="_out_features"](%166)
  %3637 : bool = aten::__contains__(%3636, %name.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:15
   = prim::If(%3637) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:12
    block0():
       = aten::_set_item(%bottom_up_features.1, %name.7, %x.85) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:451:16
      -> ()
    block1():
      -> ()
  %3638 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_25.BottleneckBlock = prim::GetAttr[name="0"](%226)
  %3639 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_27.BottleneckBlock = prim::GetAttr[name="1"](%226)
  %3640 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_27.BottleneckBlock = prim::GetAttr[name="2"](%226)
  %3641 : __torch__.detectron2.layers.wrappers.___torch_mangle_22.Conv2d = prim::GetAttr[name="conv1"](%3638)
  %3642 : Tensor = prim::GetAttr[name="weight"](%3641)
  %3643 : Tensor? = prim::GetAttr[name="bias"](%3641)
  %3644 : int[] = prim::ListConstruct(%46, %46)
  %3645 : int[] = prim::ListConstruct(%48, %48)
  %3646 : int[] = prim::ListConstruct(%43, %43)
  %x.128 : Tensor = aten::conv2d(%x.85, %3642, %3643, %3644, %3645, %3646, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3648 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3641)
  %3649 : bool = prim::requires_grad(%x.128)
  %out.2 : Tensor = prim::If(%3649) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3651 : Tensor = prim::GetAttr[name="weight"](%3648)
      %3652 : Tensor = prim::GetAttr[name="running_var"](%3648)
      %3653 : float = prim::GetAttr[name="eps"](%3648)
      %3654 : Tensor = aten::add(%3652, %3653, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3655 : Tensor = aten::rsqrt(%3654) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.9 : Tensor = aten::mul(%3651, %3655) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3657 : Tensor = prim::GetAttr[name="bias"](%3648)
      %3658 : Tensor = prim::GetAttr[name="running_mean"](%3648)
      %3659 : Tensor = aten::mul(%3658, %scale.9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.9 : Tensor = aten::sub(%3657, %3659, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3661 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.10 : Tensor = aten::reshape(%scale.9, %3661) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3663 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.10 : Tensor = aten::reshape(%bias.9, %3663) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.5 : int = prim::dtype(%x.128)
      %3666 : Tensor = aten::to(%scale.10, %out_dtype.5, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3667 : Tensor = aten::mul(%x.128, %3666) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3668 : Tensor = aten::to(%bias.10, %out_dtype.5, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3669 : Tensor = aten::add(%3667, %3668, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3669)
    block1():
      %3670 : Tensor = prim::GetAttr[name="running_mean"](%3648)
      %3671 : Tensor = prim::GetAttr[name="running_var"](%3648)
      %3672 : Tensor = prim::GetAttr[name="weight"](%3648)
      %3673 : Tensor = prim::GetAttr[name="bias"](%3648)
      %3674 : float = prim::GetAttr[name="eps"](%3648)
      %3675 : Tensor = aten::batch_norm(%x.128, %3672, %3673, %3670, %3671, %44, %33, %3674, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3675)
  %out.4 : Tensor = aten::relu_(%out.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %3677 : __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d = prim::GetAttr[name="conv2"](%3638)
  %3678 : Tensor = prim::GetAttr[name="weight"](%3677)
  %3679 : Tensor? = prim::GetAttr[name="bias"](%3677)
  %3680 : int[] = prim::ListConstruct(%43, %43)
  %3681 : int[] = prim::ListConstruct(%43, %43)
  %3682 : int[] = prim::ListConstruct(%43, %43)
  %x.124 : Tensor = aten::conv2d(%out.4, %3678, %3679, %3680, %3681, %3682, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3684 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3677)
  %3685 : bool = prim::requires_grad(%x.124)
  %out.6 : Tensor = prim::If(%3685) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3687 : Tensor = prim::GetAttr[name="weight"](%3684)
      %3688 : Tensor = prim::GetAttr[name="running_var"](%3684)
      %3689 : float = prim::GetAttr[name="eps"](%3684)
      %3690 : Tensor = aten::add(%3688, %3689, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3691 : Tensor = aten::rsqrt(%3690) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.11 : Tensor = aten::mul(%3687, %3691) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3693 : Tensor = prim::GetAttr[name="bias"](%3684)
      %3694 : Tensor = prim::GetAttr[name="running_mean"](%3684)
      %3695 : Tensor = aten::mul(%3694, %scale.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.11 : Tensor = aten::sub(%3693, %3695, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3697 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.12 : Tensor = aten::reshape(%scale.11, %3697) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3699 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.12 : Tensor = aten::reshape(%bias.11, %3699) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.6 : int = prim::dtype(%x.124)
      %3702 : Tensor = aten::to(%scale.12, %out_dtype.6, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3703 : Tensor = aten::mul(%x.124, %3702) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3704 : Tensor = aten::to(%bias.12, %out_dtype.6, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3705 : Tensor = aten::add(%3703, %3704, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3705)
    block1():
      %3706 : Tensor = prim::GetAttr[name="running_mean"](%3684)
      %3707 : Tensor = prim::GetAttr[name="running_var"](%3684)
      %3708 : Tensor = prim::GetAttr[name="weight"](%3684)
      %3709 : Tensor = prim::GetAttr[name="bias"](%3684)
      %3710 : float = prim::GetAttr[name="eps"](%3684)
      %3711 : Tensor = aten::batch_norm(%x.124, %3708, %3709, %3706, %3707, %44, %33, %3710, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3711)
  %out.8 : Tensor = aten::relu_(%out.6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %3713 : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d = prim::GetAttr[name="conv3"](%3638)
  %3714 : Tensor = prim::GetAttr[name="weight"](%3713)
  %3715 : Tensor? = prim::GetAttr[name="bias"](%3713)
  %3716 : int[] = prim::ListConstruct(%43, %43)
  %3717 : int[] = prim::ListConstruct(%48, %48)
  %3718 : int[] = prim::ListConstruct(%43, %43)
  %x.129 : Tensor = aten::conv2d(%out.8, %3714, %3715, %3716, %3717, %3718, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3720 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3713)
  %3721 : bool = prim::requires_grad(%x.129)
  %out.10 : Tensor = prim::If(%3721) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3723 : Tensor = prim::GetAttr[name="weight"](%3720)
      %3724 : Tensor = prim::GetAttr[name="running_var"](%3720)
      %3725 : float = prim::GetAttr[name="eps"](%3720)
      %3726 : Tensor = aten::add(%3724, %3725, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3727 : Tensor = aten::rsqrt(%3726) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.7 : Tensor = aten::mul(%3723, %3727) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3729 : Tensor = prim::GetAttr[name="bias"](%3720)
      %3730 : Tensor = prim::GetAttr[name="running_mean"](%3720)
      %3731 : Tensor = aten::mul(%3730, %scale.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.7 : Tensor = aten::sub(%3729, %3731, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3733 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.8 : Tensor = aten::reshape(%scale.7, %3733) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3735 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.8 : Tensor = aten::reshape(%bias.7, %3735) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.4 : int = prim::dtype(%x.129)
      %3738 : Tensor = aten::to(%scale.8, %out_dtype.4, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3739 : Tensor = aten::mul(%x.129, %3738) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3740 : Tensor = aten::to(%bias.8, %out_dtype.4, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3741 : Tensor = aten::add(%3739, %3740, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3741)
    block1():
      %3742 : Tensor = prim::GetAttr[name="running_mean"](%3720)
      %3743 : Tensor = prim::GetAttr[name="running_var"](%3720)
      %3744 : Tensor = prim::GetAttr[name="weight"](%3720)
      %3745 : Tensor = prim::GetAttr[name="bias"](%3720)
      %3746 : float = prim::GetAttr[name="eps"](%3720)
      %3747 : Tensor = aten::batch_norm(%x.129, %3744, %3745, %3742, %3743, %44, %33, %3746, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3747)
  %3748 : __torch__.detectron2.layers.wrappers.___torch_mangle_21.Conv2d = prim::GetAttr[name="shortcut"](%3638)
  %3749 : Tensor = prim::GetAttr[name="weight"](%3748)
  %3750 : Tensor? = prim::GetAttr[name="bias"](%3748)
  %3751 : int[] = prim::ListConstruct(%46, %46)
  %3752 : int[] = prim::ListConstruct(%48, %48)
  %3753 : int[] = prim::ListConstruct(%43, %43)
  %x.130 : Tensor = aten::conv2d(%x.85, %3749, %3750, %3751, %3752, %3753, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3755 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3748)
  %3756 : bool = prim::requires_grad(%x.130)
  %shortcut.1 : Tensor = prim::If(%3756) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3758 : Tensor = prim::GetAttr[name="weight"](%3755)
      %3759 : Tensor = prim::GetAttr[name="running_var"](%3755)
      %3760 : float = prim::GetAttr[name="eps"](%3755)
      %3761 : Tensor = aten::add(%3759, %3760, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3762 : Tensor = aten::rsqrt(%3761) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.13 : Tensor = aten::mul(%3758, %3762) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3764 : Tensor = prim::GetAttr[name="bias"](%3755)
      %3765 : Tensor = prim::GetAttr[name="running_mean"](%3755)
      %3766 : Tensor = aten::mul(%3765, %scale.13) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.13 : Tensor = aten::sub(%3764, %3766, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3768 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.14 : Tensor = aten::reshape(%scale.13, %3768) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3770 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.14 : Tensor = aten::reshape(%bias.13, %3770) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.7 : int = prim::dtype(%x.130)
      %3773 : Tensor = aten::to(%scale.14, %out_dtype.7, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3774 : Tensor = aten::mul(%x.130, %3773) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3775 : Tensor = aten::to(%bias.14, %out_dtype.7, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3776 : Tensor = aten::add(%3774, %3775, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3776)
    block1():
      %3777 : Tensor = prim::GetAttr[name="running_mean"](%3755)
      %3778 : Tensor = prim::GetAttr[name="running_var"](%3755)
      %3779 : Tensor = prim::GetAttr[name="weight"](%3755)
      %3780 : Tensor = prim::GetAttr[name="bias"](%3755)
      %3781 : float = prim::GetAttr[name="eps"](%3755)
      %3782 : Tensor = aten::batch_norm(%x.130, %3779, %3780, %3777, %3778, %44, %33, %3781, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3782)
  %out.12 : Tensor = aten::add_(%out.10, %shortcut.1, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.20 : Tensor = aten::relu_(%out.12) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %3785 : __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d = prim::GetAttr[name="conv1"](%3639)
  %3786 : Tensor = prim::GetAttr[name="weight"](%3785)
  %3787 : Tensor? = prim::GetAttr[name="bias"](%3785)
  %3788 : int[] = prim::ListConstruct(%43, %43)
  %3789 : int[] = prim::ListConstruct(%48, %48)
  %3790 : int[] = prim::ListConstruct(%43, %43)
  %x.125 : Tensor = aten::conv2d(%input.20, %3786, %3787, %3788, %3789, %3790, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3792 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3785)
  %3793 : bool = prim::requires_grad(%x.125)
  %out.19 : Tensor = prim::If(%3793) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3795 : Tensor = prim::GetAttr[name="weight"](%3792)
      %3796 : Tensor = prim::GetAttr[name="running_var"](%3792)
      %3797 : float = prim::GetAttr[name="eps"](%3792)
      %3798 : Tensor = aten::add(%3796, %3797, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3799 : Tensor = aten::rsqrt(%3798) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.15 : Tensor = aten::mul(%3795, %3799) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3801 : Tensor = prim::GetAttr[name="bias"](%3792)
      %3802 : Tensor = prim::GetAttr[name="running_mean"](%3792)
      %3803 : Tensor = aten::mul(%3802, %scale.15) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.15 : Tensor = aten::sub(%3801, %3803, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3805 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.16 : Tensor = aten::reshape(%scale.15, %3805) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3807 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.16 : Tensor = aten::reshape(%bias.15, %3807) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.8 : int = prim::dtype(%x.125)
      %3810 : Tensor = aten::to(%scale.16, %out_dtype.8, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3811 : Tensor = aten::mul(%x.125, %3810) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3812 : Tensor = aten::to(%bias.16, %out_dtype.8, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3813 : Tensor = aten::add(%3811, %3812, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3813)
    block1():
      %3814 : Tensor = prim::GetAttr[name="running_mean"](%3792)
      %3815 : Tensor = prim::GetAttr[name="running_var"](%3792)
      %3816 : Tensor = prim::GetAttr[name="weight"](%3792)
      %3817 : Tensor = prim::GetAttr[name="bias"](%3792)
      %3818 : float = prim::GetAttr[name="eps"](%3792)
      %3819 : Tensor = aten::batch_norm(%x.125, %3816, %3817, %3814, %3815, %44, %33, %3818, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3819)
  %out.14 : Tensor = aten::relu_(%out.19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %3821 : __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d = prim::GetAttr[name="conv2"](%3639)
  %3822 : Tensor = prim::GetAttr[name="weight"](%3821)
  %3823 : Tensor? = prim::GetAttr[name="bias"](%3821)
  %3824 : int[] = prim::ListConstruct(%43, %43)
  %3825 : int[] = prim::ListConstruct(%43, %43)
  %3826 : int[] = prim::ListConstruct(%43, %43)
  %x.127 : Tensor = aten::conv2d(%out.14, %3822, %3823, %3824, %3825, %3826, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3828 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3821)
  %3829 : bool = prim::requires_grad(%x.127)
  %out.15 : Tensor = prim::If(%3829) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3831 : Tensor = prim::GetAttr[name="weight"](%3828)
      %3832 : Tensor = prim::GetAttr[name="running_var"](%3828)
      %3833 : float = prim::GetAttr[name="eps"](%3828)
      %3834 : Tensor = aten::add(%3832, %3833, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3835 : Tensor = aten::rsqrt(%3834) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.17 : Tensor = aten::mul(%3831, %3835) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3837 : Tensor = prim::GetAttr[name="bias"](%3828)
      %3838 : Tensor = prim::GetAttr[name="running_mean"](%3828)
      %3839 : Tensor = aten::mul(%3838, %scale.17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.17 : Tensor = aten::sub(%3837, %3839, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3841 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.18 : Tensor = aten::reshape(%scale.17, %3841) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3843 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.18 : Tensor = aten::reshape(%bias.17, %3843) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.9 : int = prim::dtype(%x.127)
      %3846 : Tensor = aten::to(%scale.18, %out_dtype.9, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3847 : Tensor = aten::mul(%x.127, %3846) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3848 : Tensor = aten::to(%bias.18, %out_dtype.9, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3849 : Tensor = aten::add(%3847, %3848, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3849)
    block1():
      %3850 : Tensor = prim::GetAttr[name="running_mean"](%3828)
      %3851 : Tensor = prim::GetAttr[name="running_var"](%3828)
      %3852 : Tensor = prim::GetAttr[name="weight"](%3828)
      %3853 : Tensor = prim::GetAttr[name="bias"](%3828)
      %3854 : float = prim::GetAttr[name="eps"](%3828)
      %3855 : Tensor = aten::batch_norm(%x.127, %3852, %3853, %3850, %3851, %44, %33, %3854, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3855)
  %out.16 : Tensor = aten::relu_(%out.15) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %3857 : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d = prim::GetAttr[name="conv3"](%3639)
  %3858 : Tensor = prim::GetAttr[name="weight"](%3857)
  %3859 : Tensor? = prim::GetAttr[name="bias"](%3857)
  %3860 : int[] = prim::ListConstruct(%43, %43)
  %3861 : int[] = prim::ListConstruct(%48, %48)
  %3862 : int[] = prim::ListConstruct(%43, %43)
  %x.12 : Tensor = aten::conv2d(%out.16, %3858, %3859, %3860, %3861, %3862, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3864 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3857)
  %3865 : bool = prim::requires_grad(%x.12)
  %out.17 : Tensor = prim::If(%3865) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3867 : Tensor = prim::GetAttr[name="weight"](%3864)
      %3868 : Tensor = prim::GetAttr[name="running_var"](%3864)
      %3869 : float = prim::GetAttr[name="eps"](%3864)
      %3870 : Tensor = aten::add(%3868, %3869, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3871 : Tensor = aten::rsqrt(%3870) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.19 : Tensor = aten::mul(%3867, %3871) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3873 : Tensor = prim::GetAttr[name="bias"](%3864)
      %3874 : Tensor = prim::GetAttr[name="running_mean"](%3864)
      %3875 : Tensor = aten::mul(%3874, %scale.19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.19 : Tensor = aten::sub(%3873, %3875, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3877 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.20 : Tensor = aten::reshape(%scale.19, %3877) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3879 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.20 : Tensor = aten::reshape(%bias.19, %3879) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.10 : int = prim::dtype(%x.12)
      %3882 : Tensor = aten::to(%scale.20, %out_dtype.10, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3883 : Tensor = aten::mul(%x.12, %3882) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3884 : Tensor = aten::to(%bias.20, %out_dtype.10, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3885 : Tensor = aten::add(%3883, %3884, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3885)
    block1():
      %3886 : Tensor = prim::GetAttr[name="running_mean"](%3864)
      %3887 : Tensor = prim::GetAttr[name="running_var"](%3864)
      %3888 : Tensor = prim::GetAttr[name="weight"](%3864)
      %3889 : Tensor = prim::GetAttr[name="bias"](%3864)
      %3890 : float = prim::GetAttr[name="eps"](%3864)
      %3891 : Tensor = aten::batch_norm(%x.12, %3888, %3889, %3886, %3887, %44, %33, %3890, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3891)
  %out.18 : Tensor = aten::add_(%out.17, %input.20, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %input.5 : Tensor = aten::relu_(%out.18) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %3894 : __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d = prim::GetAttr[name="conv1"](%3640)
  %3895 : Tensor = prim::GetAttr[name="weight"](%3894)
  %3896 : Tensor? = prim::GetAttr[name="bias"](%3894)
  %3897 : int[] = prim::ListConstruct(%43, %43)
  %3898 : int[] = prim::ListConstruct(%48, %48)
  %3899 : int[] = prim::ListConstruct(%43, %43)
  %x.120 : Tensor = aten::conv2d(%input.5, %3895, %3896, %3897, %3898, %3899, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3901 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3894)
  %3902 : bool = prim::requires_grad(%x.120)
  %out.1 : Tensor = prim::If(%3902) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3904 : Tensor = prim::GetAttr[name="weight"](%3901)
      %3905 : Tensor = prim::GetAttr[name="running_var"](%3901)
      %3906 : float = prim::GetAttr[name="eps"](%3901)
      %3907 : Tensor = aten::add(%3905, %3906, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3908 : Tensor = aten::rsqrt(%3907) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.2 : Tensor = aten::mul(%3904, %3908) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3910 : Tensor = prim::GetAttr[name="bias"](%3901)
      %3911 : Tensor = prim::GetAttr[name="running_mean"](%3901)
      %3912 : Tensor = aten::mul(%3911, %scale.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.2 : Tensor = aten::sub(%3910, %3912, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3914 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.5 : Tensor = aten::reshape(%scale.2, %3914) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3916 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.4 : Tensor = aten::reshape(%bias.2, %3916) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.2 : int = prim::dtype(%x.120)
      %3919 : Tensor = aten::to(%scale.5, %out_dtype.2, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3920 : Tensor = aten::mul(%x.120, %3919) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3921 : Tensor = aten::to(%bias.4, %out_dtype.2, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3922 : Tensor = aten::add(%3920, %3921, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3922)
    block1():
      %3923 : Tensor = prim::GetAttr[name="running_mean"](%3901)
      %3924 : Tensor = prim::GetAttr[name="running_var"](%3901)
      %3925 : Tensor = prim::GetAttr[name="weight"](%3901)
      %3926 : Tensor = prim::GetAttr[name="bias"](%3901)
      %3927 : float = prim::GetAttr[name="eps"](%3901)
      %3928 : Tensor = aten::batch_norm(%x.120, %3925, %3926, %3923, %3924, %44, %33, %3927, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3928)
  %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
  %3930 : __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d = prim::GetAttr[name="conv2"](%3640)
  %3931 : Tensor = prim::GetAttr[name="weight"](%3930)
  %3932 : Tensor? = prim::GetAttr[name="bias"](%3930)
  %3933 : int[] = prim::ListConstruct(%43, %43)
  %3934 : int[] = prim::ListConstruct(%43, %43)
  %3935 : int[] = prim::ListConstruct(%43, %43)
  %x.126 : Tensor = aten::conv2d(%out.3, %3931, %3932, %3933, %3934, %3935, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3937 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3930)
  %3938 : bool = prim::requires_grad(%x.126)
  %out.5 : Tensor = prim::If(%3938) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3940 : Tensor = prim::GetAttr[name="weight"](%3937)
      %3941 : Tensor = prim::GetAttr[name="running_var"](%3937)
      %3942 : float = prim::GetAttr[name="eps"](%3937)
      %3943 : Tensor = aten::add(%3941, %3942, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3944 : Tensor = aten::rsqrt(%3943) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.3 : Tensor = aten::mul(%3940, %3944) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3946 : Tensor = prim::GetAttr[name="bias"](%3937)
      %3947 : Tensor = prim::GetAttr[name="running_mean"](%3937)
      %3948 : Tensor = aten::mul(%3947, %scale.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.5 : Tensor = aten::sub(%3946, %3948, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3950 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.6 : Tensor = aten::reshape(%scale.3, %3950) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3952 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.6 : Tensor = aten::reshape(%bias.5, %3952) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.3 : int = prim::dtype(%x.126)
      %3955 : Tensor = aten::to(%scale.6, %out_dtype.3, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3956 : Tensor = aten::mul(%x.126, %3955) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3957 : Tensor = aten::to(%bias.6, %out_dtype.3, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3958 : Tensor = aten::add(%3956, %3957, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3958)
    block1():
      %3959 : Tensor = prim::GetAttr[name="running_mean"](%3937)
      %3960 : Tensor = prim::GetAttr[name="running_var"](%3937)
      %3961 : Tensor = prim::GetAttr[name="weight"](%3937)
      %3962 : Tensor = prim::GetAttr[name="bias"](%3937)
      %3963 : float = prim::GetAttr[name="eps"](%3937)
      %3964 : Tensor = aten::batch_norm(%x.126, %3961, %3962, %3959, %3960, %44, %33, %3963, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%3964)
  %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
  %3966 : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d = prim::GetAttr[name="conv3"](%3640)
  %3967 : Tensor = prim::GetAttr[name="weight"](%3966)
  %3968 : Tensor? = prim::GetAttr[name="bias"](%3966)
  %3969 : int[] = prim::ListConstruct(%43, %43)
  %3970 : int[] = prim::ListConstruct(%48, %48)
  %3971 : int[] = prim::ListConstruct(%43, %43)
  %x.114 : Tensor = aten::conv2d(%out.7, %3967, %3968, %3969, %3970, %3971, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %3973 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%3966)
  %3974 : bool = prim::requires_grad(%x.114)
  %out.9 : Tensor = prim::If(%3974) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
    block0():
      %3976 : Tensor = prim::GetAttr[name="weight"](%3973)
      %3977 : Tensor = prim::GetAttr[name="running_var"](%3973)
      %3978 : float = prim::GetAttr[name="eps"](%3973)
      %3979 : Tensor = aten::add(%3977, %3978, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %3980 : Tensor = aten::rsqrt(%3979) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
      %scale.209 : Tensor = aten::mul(%3976, %3980) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
      %3982 : Tensor = prim::GetAttr[name="bias"](%3973)
      %3983 : Tensor = prim::GetAttr[name="running_mean"](%3973)
      %3984 : Tensor = aten::mul(%3983, %scale.209) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
      %bias.1 : Tensor = aten::sub(%3982, %3984, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
      %3986 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %scale.4 : Tensor = aten::reshape(%scale.209, %3986) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
      %3988 : int[] = prim::ListConstruct(%43, %51, %43, %43)
      %bias.3 : Tensor = aten::reshape(%bias.1, %3988) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
      %out_dtype.1 : int = prim::dtype(%x.114)
      %3991 : Tensor = aten::to(%scale.4, %out_dtype.1, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
      %3992 : Tensor = aten::mul(%x.114, %3991) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      %3993 : Tensor = aten::to(%bias.3, %out_dtype.1, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
      %3994 : Tensor = aten::add(%3992, %3993, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
      -> (%3994)
    block1():
      %3995 : Tensor = prim::GetAttr[name="running_mean"](%3973)
      %3996 : Tensor = prim::GetAttr[name="running_var"](%3973)
      %3997 : Tensor = prim::GetAttr[name="weight"](%3973)
      %3998 : Tensor = prim::GetAttr[name="bias"](%3973)
      %3999 : float = prim::GetAttr[name="eps"](%3973)
      %4000 : Tensor = aten::batch_norm(%x.114, %3997, %3998, %3995, %3996, %44, %33, %3999, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:2146:11
      -> (%4000)
  %out.11 : Tensor = aten::add_(%out.9, %input.5, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
  %x.73 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
  %4003 : str[] = prim::GetAttr[name="_out_features"](%166)
  %4004 : bool = aten::__contains__(%4003, %name.10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:15
   = prim::If(%4004) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:12
    block0():
       = aten::_set_item(%bottom_up_features.1, %name.10, %x.73) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:451:16
      -> ()
    block1():
      -> ()
  %results.1 : Tensor[] = prim::ListConstruct()
  %4006 : __torch__.torch.nn.modules.container.___torch_mangle_33.ModuleList = prim::GetAttr[name="lateral_convs"](%164)
  %4007 : __torch__.detectron2.layers.wrappers.___torch_mangle_29.Conv2d = prim::GetAttr[name="0"](%4006)
  %4008 : (str, str, str, str) = prim::GetAttr[name="in_features"](%164)
  %4009 : str = prim::TupleIndex(%4008, %51)
  %4010 : Tensor = aten::__getitem__(%bottom_up_features.1, %4009) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:128:46
  %4011 : Tensor = prim::GetAttr[name="weight"](%4007)
  %4012 : Tensor? = prim::GetAttr[name="bias"](%4007)
  %4013 : int[] = prim::ListConstruct(%43, %43)
  %4014 : int[] = prim::ListConstruct(%48, %48)
  %4015 : int[] = prim::ListConstruct(%43, %43)
  %prev_features.1 : Tensor = aten::conv2d(%4010, %4011, %4012, %4013, %4014, %4015, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %4017 : __torch__.torch.nn.modules.container.___torch_mangle_35.ModuleList = prim::GetAttr[name="output_convs"](%164)
  %4018 : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d = prim::GetAttr[name="0"](%4017)
  %4019 : Tensor = prim::GetAttr[name="weight"](%4018)
  %4020 : Tensor? = prim::GetAttr[name="bias"](%4018)
  %4021 : int[] = prim::ListConstruct(%43, %43)
  %4022 : int[] = prim::ListConstruct(%43, %43)
  %4023 : int[] = prim::ListConstruct(%43, %43)
  %x.115 : Tensor = aten::conv2d(%prev_features.1, %4019, %4020, %4021, %4022, %4023, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %4025 : Tensor[] = aten::append(%results.1, %x.115) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:129:8
  %4026 : __torch__.torch.nn.modules.container.___torch_mangle_33.ModuleList = prim::GetAttr[name="lateral_convs"](%164)
  %4027 : __torch__.detectron2.layers.wrappers.___torch_mangle_30.Conv2d = prim::GetAttr[name="1"](%4026)
  %4028 : __torch__.detectron2.layers.wrappers.___torch_mangle_31.Conv2d = prim::GetAttr[name="2"](%4026)
  %4029 : __torch__.detectron2.layers.wrappers.___torch_mangle_32.Conv2d = prim::GetAttr[name="3"](%4026)
  %4030 : __torch__.torch.nn.modules.container.___torch_mangle_35.ModuleList = prim::GetAttr[name="output_convs"](%164)
  %4031 : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d = prim::GetAttr[name="1"](%4030)
  %4032 : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d = prim::GetAttr[name="2"](%4030)
  %4033 : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d = prim::GetAttr[name="3"](%4030)
  %4034 : (str, str, str, str) = prim::GetAttr[name="in_features"](%164)
  %features.5 : str = prim::TupleIndex(%4034, %50)
  %features.7 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:139:27
  %4037 : str[] = prim::ListConstruct(%30, %36)
  %4038 : bool = aten::__contains__(%4037, %30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3443:7
   = prim::If(%4038) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3443:4
    block0():
      -> ()
    block1():
      %4039 : str = aten::format(%37, %30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3452:16
       = aten::warn[warn_id=6](%4039, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3451:12
      -> ()
  %scale_factors.3 : float[] = prim::ListConstruct()
   = prim::Loop(%46, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3489:28
    block0(%4041 : int):
      %4042 : float[] = aten::append(%scale_factors.3, %31) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3489:28
      -> (%54)
  %4043 : int = aten::len(%scale_factors.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3497:12
  %4044 : bool = aten::gt(%4043, %48)
  %4045 : int = prim::Loop(%38, %4044, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3497:12
    block0(%4046 : int, %4047 : int):
      %scale.210 : float = aten::__getitem__(%scale_factors.3, %4047) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3497:12
      %4049 : int = aten::floor(%scale.210) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3498:19
      %4050 : bool = aten::ne(%4049, %scale.210) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3498:19
      %4051 : bool = prim::If(%4050) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3498:16
        block0():
           = aten::warn[warn_id=7](%39, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3499:20
          -> (%44)
        block1():
          -> (%54)
      %4052 : int = aten::add(%4047, %43)
      %4053 : bool = aten::lt(%4052, %4043)
      %4054 : bool = aten::__and__(%4053, %4051)
      -> (%4054, %4052)
  %4055 : Tensor = aten::upsample_nearest2d(%prev_features.1, %53, %scale_factors.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3532:15
  %4056 : Tensor = prim::GetAttr[name="weight"](%4027)
  %4057 : Tensor? = prim::GetAttr[name="bias"](%4027)
  %4058 : int[] = prim::ListConstruct(%43, %43)
  %4059 : int[] = prim::ListConstruct(%48, %48)
  %4060 : int[] = prim::ListConstruct(%43, %43)
  %lateral_features.3 : Tensor = aten::conv2d(%features.7, %4056, %4057, %4058, %4059, %4060, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %prev_features.17 : Tensor = aten::add(%lateral_features.3, %4055, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:142:32
  %4063 : Tensor = prim::GetAttr[name="weight"](%4031)
  %4064 : Tensor? = prim::GetAttr[name="bias"](%4031)
  %4065 : int[] = prim::ListConstruct(%43, %43)
  %4066 : int[] = prim::ListConstruct(%43, %43)
  %4067 : int[] = prim::ListConstruct(%43, %43)
  %x.116 : Tensor = aten::conv2d(%prev_features.17, %4063, %4064, %4065, %4066, %4067, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
   = aten::insert(%results.1, %48, %x.116) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:145:16
  %4069 : (str, str, str, str) = prim::GetAttr[name="in_features"](%164)
  %features.9 : str = prim::TupleIndex(%4069, %29)
  %features.11 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:139:27
  %4072 : Tensor = prim::Uninitialized()
  %4073 : str[] = prim::ListConstruct(%30, %36)
  %4074 : bool = aten::__contains__(%4073, %30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3443:7
   = prim::If(%4074) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3443:4
    block0():
      -> ()
    block1():
      %4075 : str = aten::format(%37, %30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3452:16
       = aten::warn[warn_id=6](%4075, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3451:12
      -> ()
  %4076 : int = aten::dim(%prev_features.17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3459:10
  %dim.3 : int = aten::sub(%4076, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3459:10
  %scale_factors.4 : float[] = prim::ListConstruct()
   = prim::Loop(%dim.3, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3489:28
    block0(%4079 : int):
      %4080 : float[] = aten::append(%scale_factors.4, %31) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3489:28
      -> (%54)
  %4081 : int = aten::len(%scale_factors.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3497:12
  %4082 : bool = aten::gt(%4081, %48)
  %4083 : int = prim::Loop(%38, %4082, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3497:12
    block0(%4084 : int, %4085 : int):
      %scale.211 : float = aten::__getitem__(%scale_factors.4, %4085) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3497:12
      %4087 : int = aten::floor(%scale.211) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3498:19
      %4088 : bool = aten::ne(%4087, %scale.211) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3498:19
      %4089 : bool = prim::If(%4088) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3498:16
        block0():
           = aten::warn[warn_id=7](%39, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3499:20
          -> (%44)
        block1():
          -> (%54)
      %4090 : int = aten::add(%4085, %43)
      %4091 : bool = aten::lt(%4090, %4081)
      %4092 : bool = aten::__and__(%4091, %4089)
      -> (%4092, %4090)
  %4093 : int = aten::dim(%prev_features.17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3529:7
  %4094 : bool = aten::eq(%4093, %32) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3529:7
  %top_down_features.5 : Tensor = prim::If(%4094) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3529:4
    block0():
      %4096 : Tensor = aten::upsample_nearest1d(%prev_features.17, %53, %scale_factors.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3530:15
      -> (%4096)
    block1():
      %4097 : int = aten::dim(%prev_features.17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3531:7
      %4098 : bool = aten::eq(%4097, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3531:7
      %4099 : Tensor = prim::If(%4098) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3531:4
        block0():
          %4100 : Tensor = aten::upsample_nearest2d(%prev_features.17, %53, %scale_factors.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3532:15
          -> (%4100)
        block1():
          %4101 : int = aten::dim(%prev_features.17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3533:7
          %4102 : bool = aten::eq(%4101, %40) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3533:7
          %4103 : Tensor = prim::If(%4102) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3533:4
            block0():
              %4104 : Tensor = aten::upsample_nearest3d(%prev_features.17, %53, %scale_factors.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3534:15
              -> (%4104)
            block1():
              %4105 : int = aten::dim(%prev_features.17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3575:27
              %4106 : str = aten::format(%41, %4105, %30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3573:8
               = prim::RaiseException(%4106) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3572:4
              -> (%4072)
          -> (%4103)
      -> (%4099)
  %4107 : Tensor = prim::GetAttr[name="weight"](%4028)
  %4108 : Tensor? = prim::GetAttr[name="bias"](%4028)
  %4109 : int[] = prim::ListConstruct(%43, %43)
  %4110 : int[] = prim::ListConstruct(%48, %48)
  %4111 : int[] = prim::ListConstruct(%43, %43)
  %lateral_features.5 : Tensor = aten::conv2d(%features.11, %4107, %4108, %4109, %4110, %4111, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %prev_features.30 : Tensor = aten::add(%lateral_features.5, %top_down_features.5, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:142:32
  %4114 : Tensor = prim::GetAttr[name="weight"](%4032)
  %4115 : Tensor? = prim::GetAttr[name="bias"](%4032)
  %4116 : int[] = prim::ListConstruct(%43, %43)
  %4117 : int[] = prim::ListConstruct(%43, %43)
  %4118 : int[] = prim::ListConstruct(%43, %43)
  %x.117 : Tensor = aten::conv2d(%prev_features.30, %4114, %4115, %4116, %4117, %4118, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
   = aten::insert(%results.1, %48, %x.117) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:145:16
  %4120 : (str, str, str, str) = prim::GetAttr[name="in_features"](%164)
  %features.13 : str = prim::TupleIndex(%4120, %28)
  %features.15 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.13) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:139:27
  %4123 : Tensor = prim::Uninitialized()
  %4124 : str[] = prim::ListConstruct(%30, %36)
  %4125 : bool = aten::__contains__(%4124, %30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3443:7
   = prim::If(%4125) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3443:4
    block0():
      -> ()
    block1():
      %4126 : str = aten::format(%37, %30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3452:16
       = aten::warn[warn_id=6](%4126, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3451:12
      -> ()
  %4127 : int = aten::dim(%prev_features.30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3459:10
  %dim.1 : int = aten::sub(%4127, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3459:10
  %scale_factors.2 : float[] = prim::ListConstruct()
   = prim::Loop(%dim.1, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3489:28
    block0(%4130 : int):
      %4131 : float[] = aten::append(%scale_factors.2, %31) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3489:28
      -> (%54)
  %4132 : int = aten::len(%scale_factors.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3497:12
  %4133 : bool = aten::gt(%4132, %48)
  %4134 : int = prim::Loop(%38, %4133, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3497:12
    block0(%4135 : int, %4136 : int):
      %scale.1 : float = aten::__getitem__(%scale_factors.2, %4136) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3497:12
      %4138 : int = aten::floor(%scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3498:19
      %4139 : bool = aten::ne(%4138, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3498:19
      %4140 : bool = prim::If(%4139) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3498:16
        block0():
           = aten::warn[warn_id=7](%39, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3499:20
          -> (%44)
        block1():
          -> (%54)
      %4141 : int = aten::add(%4136, %43)
      %4142 : bool = aten::lt(%4141, %4132)
      %4143 : bool = aten::__and__(%4142, %4140)
      -> (%4143, %4141)
  %4144 : int = aten::dim(%prev_features.30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3529:7
  %4145 : bool = aten::eq(%4144, %32) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3529:7
  %top_down_features.7 : Tensor = prim::If(%4145) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3529:4
    block0():
      %4147 : Tensor = aten::upsample_nearest1d(%prev_features.30, %53, %scale_factors.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3530:15
      -> (%4147)
    block1():
      %4148 : int = aten::dim(%prev_features.30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3531:7
      %4149 : bool = aten::eq(%4148, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3531:7
      %4150 : Tensor = prim::If(%4149) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3531:4
        block0():
          %4151 : Tensor = aten::upsample_nearest2d(%prev_features.30, %53, %scale_factors.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3532:15
          -> (%4151)
        block1():
          %4152 : int = aten::dim(%prev_features.30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3533:7
          %4153 : bool = aten::eq(%4152, %40) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3533:7
          %4154 : Tensor = prim::If(%4153) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3533:4
            block0():
              %4155 : Tensor = aten::upsample_nearest3d(%prev_features.30, %53, %scale_factors.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3534:15
              -> (%4155)
            block1():
              %4156 : int = aten::dim(%prev_features.30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3575:27
              %4157 : str = aten::format(%41, %4156, %30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3573:8
               = prim::RaiseException(%4157) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:3572:4
              -> (%4123)
          -> (%4154)
      -> (%4150)
  %4158 : Tensor = prim::GetAttr[name="weight"](%4029)
  %4159 : Tensor? = prim::GetAttr[name="bias"](%4029)
  %4160 : int[] = prim::ListConstruct(%43, %43)
  %4161 : int[] = prim::ListConstruct(%48, %48)
  %4162 : int[] = prim::ListConstruct(%43, %43)
  %lateral_features.7 : Tensor = aten::conv2d(%features.15, %4158, %4159, %4160, %4161, %4162, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
  %prev_features.43 : Tensor = aten::add(%lateral_features.7, %top_down_features.7, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:142:32
  %4165 : Tensor = prim::GetAttr[name="weight"](%4033)
  %4166 : Tensor? = prim::GetAttr[name="bias"](%4033)
  %4167 : int[] = prim::ListConstruct(%43, %43)
  %4168 : int[] = prim::ListConstruct(%43, %43)
  %4169 : int[] = prim::ListConstruct(%43, %43)
  %x.122 : Tensor = aten::conv2d(%prev_features.43, %4165, %4166, %4167, %4168, %4169, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
   = aten::insert(%results.1, %48, %x.122) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:145:16
  %4171 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%164)
  %4172 : str = prim::GetAttr[name="in_feature"](%4171)
  %4173 : bool = aten::__contains__(%bottom_up_features.1, %4172) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:148:15
  %top_block_in_feature : Tensor = prim::If(%4173) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:148:12
    block0():
      %4175 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%164)
      %4176 : str = prim::GetAttr[name="in_feature"](%4175)
      %top_block_in_feature.1 : Tensor = aten::__getitem__(%bottom_up_features.1, %4176) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:149:39
      -> (%top_block_in_feature.1)
    block1():
      %4178 : str[] = prim::GetAttr[name="_out_features"](%164)
      %4179 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%164)
      %4180 : str = prim::GetAttr[name="in_feature"](%4179)
      %4181 : int = aten::index(%4178, %4180) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:151:47
      %top_block_in_feature.2 : Tensor = aten::__getitem__(%results.1, %4181) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:151:39
      -> (%top_block_in_feature.2)
  %4183 : int[] = prim::ListConstruct(%43, %43)
  %4184 : int[] = prim::ListConstruct(%46, %46)
  %4185 : int[] = prim::ListConstruct(%48, %48)
  %4186 : int[] = prim::ListConstruct(%43, %43)
  %4187 : Tensor = aten::max_pool2d(%top_block_in_feature, %4183, %4184, %4185, %4186, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:659:11
  %4188 : Tensor[] = prim::ListConstruct(%4187)
   = aten::extend(%results.1, %4188) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:152:12
  %4189 : str[] = prim::GetAttr[name="_out_features"](%164)
  %4190 : int = aten::len(%4189) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:153:15
  %4191 : int = aten::len(%results.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:153:42
  %4192 : bool = aten::eq(%4190, %4191) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:153:15
   = prim::If(%4192) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:153:8
    block0():
      -> ()
    block1():
       = prim::RaiseException(%49) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:153:8
      -> ()
  %features.1 : Dict(str, Tensor) = prim::DictConstruct()
  %4194 : str[] = prim::GetAttr[name="_out_features"](%164)
  %4195 : int = aten::len(%4194) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
  %4196 : int = aten::len(%results.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
  %4197 : int[] = prim::ListConstruct(%4195, %4196)
  %4198 : int = prim::min(%4197) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
   = prim::Loop(%4198, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
    block0(%4199 : int):
      %f.2 : str = aten::__getitem__(%4194, %4199) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
      %res.2 : Tensor = aten::__getitem__(%results.1, %4199) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
       = aten::_set_item(%features.1, %f.2, %res.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
      -> (%54)
  %4202 : bool = aten::__is__(%3, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:202:11
  %results : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::If(%4202) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:202:8
    block0():
      %4204 : __torch__.detectron2.modeling.proposal_generator.rpn.RPN = prim::GetAttr[name="proposal_generator"](%5)
      %features.4 : Tensor[] = prim::ListConstruct()
      %4206 : str[] = prim::GetAttr[name="in_features"](%4204)
      %4207 : int = aten::len(%4206) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:19
       = prim::Loop(%4207, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:19
        block0(%4208 : int):
          %f.3 : str = aten::__getitem__(%4206, %4208) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:19
          %4210 : Tensor = aten::__getitem__(%features.1, %f.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:20
          %4211 : Tensor[] = aten::append(%features.4, %4210) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:19
          -> (%54)
      %4212 : __torch__.detectron2.modeling.anchor_generator.DefaultAnchorGenerator = prim::GetAttr[name="anchor_generator"](%4204)
      %grid_sizes.1 : int[][] = prim::ListConstruct()
      %4214 : int = aten::len(%features.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:225:21
       = prim::Loop(%4214, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:225:21
        block0(%4215 : int):
          %feature_map.1 : Tensor = aten::__getitem__(%features.4, %4215) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:225:21
          %4217 : int[] = aten::size(%feature_map.1) # <string>:7:9
          %4218 : int[] = aten::slice(%4217, %50, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:225:22
          %4219 : int[][] = aten::append(%grid_sizes.1, %4218) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:225:21
          -> (%54)
      %anchors_over_all_feature_maps.1 : Tensor[] = prim::ListConstruct()
      %buffers.1 : Tensor[] = prim::ListConstruct()
      %4222 : __torch__.detectron2.modeling.anchor_generator.BufferList = prim::GetAttr[name="cell_anchors"](%4212)
      %4223 : Tensor = prim::GetAttr[name="0"](%4222)
      %4224 : Tensor = prim::GetAttr[name="1"](%4222)
      %4225 : Tensor = prim::GetAttr[name="2"](%4222)
      %4226 : Tensor = prim::GetAttr[name="3"](%4222)
      %4227 : Tensor = prim::GetAttr[name="4"](%4222)
      %4228 : Tensor[] = aten::append(%buffers.1, %4223) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:168:38
      %4229 : Tensor[] = aten::append(%buffers.1, %4224) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:168:38
      %4230 : Tensor[] = aten::append(%buffers.1, %4225) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:168:38
      %4231 : Tensor[] = aten::append(%buffers.1, %4226) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:168:38
      %4232 : Tensor[] = aten::append(%buffers.1, %4227) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:168:38
      %4233 : int[] = prim::GetAttr[name="strides"](%4212)
      %4234 : int = aten::len(%grid_sizes.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
      %4235 : int = aten::len(%4233) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
      %4236 : int = aten::len(%buffers.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
      %4237 : int[] = prim::ListConstruct(%4234, %4235, %4236)
      %4238 : int = prim::min(%4237) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
       = prim::Loop(%4238, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
        block0(%4239 : int):
          %size.1 : int[] = aten::__getitem__(%grid_sizes.1, %4239) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
          %stride.1 : int = aten::__getitem__(%4233, %4239) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
          %base_anchors.1 : Tensor = aten::__getitem__(%buffers.1, %4239) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
          %4243 : float = prim::GetAttr[name="offset"](%4212)
          %4244 : Device = prim::device(%base_anchors.1)
          %grid_height.1 : int, %grid_width.1 : int = prim::ListUnpack(%size.1)
          %4247 : float = aten::mul(%4243, %stride.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:42:8
          %4248 : int = aten::mul(%grid_width.1, %stride.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:42:25
          %shifts_x.1 : Tensor = aten::arange(%4247, %4248, %stride.1, %21, %53, %4244, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:41:15
          %4250 : float = aten::mul(%4243, %stride.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:45:8
          %4251 : int = aten::mul(%grid_height.1, %stride.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:45:25
          %shifts_y.1 : Tensor = aten::arange(%4250, %4251, %stride.1, %21, %53, %4244, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:44:15
          %4253 : Tensor[] = prim::ListConstruct(%shifts_y.1, %shifts_x.1)
          %4254 : Tensor[] = aten::meshgrid(%4253) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:48:23
          %shift_y.1 : Tensor, %shift_x.1 : Tensor = prim::ListUnpack(%4254)
          %4257 : int[] = prim::ListConstruct(%51)
          %shift_x.3 : Tensor = aten::reshape(%shift_x.1, %4257) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:49:14
          %4259 : int[] = prim::ListConstruct(%51)
          %shift_y.3 : Tensor = aten::reshape(%shift_y.1, %4259) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:50:14
          %4261 : (Tensor, Tensor) = prim::TupleConstruct(%shift_x.3, %shift_y.3)
          %shift_x.2 : Tensor, %shift_y.2 : Tensor = prim::TupleUnpack(%4261)
          %4264 : Tensor[] = prim::ListConstruct(%shift_x.2, %shift_y.2, %shift_x.2, %shift_y.2)
          %shifts.1 : Tensor = aten::stack(%4264, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:171:21
          %4266 : int[] = prim::ListConstruct(%51, %43, %52)
          %4267 : Tensor = aten::view(%shifts.1, %4266) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:28
          %4268 : int[] = prim::ListConstruct(%43, %51, %52)
          %4269 : Tensor = aten::view(%base_anchors.1, %4268) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:52
          %4270 : Tensor = aten::add(%4267, %4269, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:28
          %4271 : int[] = prim::ListConstruct(%51, %52)
          %4272 : Tensor = aten::reshape(%4270, %4271) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:28
          %4273 : Tensor[] = aten::append(%anchors_over_all_feature_maps.1, %4272) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:12
          -> (%54)
      %anchors.1 : __torch__.detectron2.structures.boxes.Boxes[] = prim::ListConstruct()
      %4275 : int = aten::len(%anchors_over_all_feature_maps.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:227:15
       = prim::Loop(%4275, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:227:15
        block0(%4276 : int):
          %x.131 : Tensor = aten::__getitem__(%anchors_over_all_feature_maps.1, %4276) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:227:15
          %4278 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
          %device.6 : Device = prim::device(%x.131)
          %tensor.13 : Tensor = aten::as_tensor(%x.131, %21, %device.6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:148:17
          %4281 : int = aten::numel(%tensor.13) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
          %4282 : bool = aten::eq(%4281, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
          %tensor.4 : Tensor = prim::If(%4282) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:8
            block0():
              %4284 : int[] = prim::ListConstruct(%51, %52)
              %4285 : Tensor = aten::reshape(%tensor.13, %4284) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
              %tensor.14 : Tensor = aten::to(%4285, %device.6, %21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
              -> (%tensor.14)
            block1():
              -> (%tensor.13)
          %4287 : int = aten::dim(%tensor.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
          %4288 : bool = aten::eq(%4287, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
          %4289 : bool = prim::If(%4288) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
            block0():
              %4290 : int = aten::size(%tensor.4, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
              %4291 : bool = aten::eq(%4290, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
              -> (%4291)
            block1():
              -> (%44)
           = prim::If(%4289) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
            block0():
              -> ()
            block1():
              %4292 : int[] = aten::size(%tensor.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:59
              %4293 : str = aten::str(%4292) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
              %4294 : str = aten::add(%49, %4293) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
               = prim::RaiseException(%4294) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
              -> ()
           = prim::SetAttr[name="tensor"](%4278, %tensor.4)
          %4295 : __torch__.detectron2.structures.boxes.Boxes[] = aten::append(%anchors.1, %4278) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:227:15
          -> (%54)
      %4296 : __torch__.detectron2.modeling.proposal_generator.rpn.StandardRPNHead = prim::GetAttr[name="rpn_head"](%4204)
      %pred_objectness_logits.1 : Tensor[] = prim::ListConstruct()
      %pred_anchor_deltas.1 : Tensor[] = prim::ListConstruct()
      %4299 : int = aten::len(%features.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:173:8
       = prim::Loop(%4299, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:173:8
        block0(%4300 : int):
          %x.133 : Tensor = aten::__getitem__(%features.4, %4300) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:173:8
          %4302 : __torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d = prim::GetAttr[name="conv"](%4296)
          %4303 : Tensor = prim::GetAttr[name="weight"](%4302)
          %4304 : Tensor? = prim::GetAttr[name="bias"](%4302)
          %4305 : int[] = prim::ListConstruct(%43, %43)
          %4306 : int[] = prim::ListConstruct(%43, %43)
          %4307 : int[] = prim::ListConstruct(%43, %43)
          %x.134 : Tensor = aten::conv2d(%x.133, %4303, %4304, %4305, %4306, %4307, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
          %t.15 : Tensor = aten::relu(%x.134) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:1206:17
          %4310 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="objectness_logits"](%4296)
          %4311 : Tensor = prim::GetAttr[name="weight"](%4310)
          %4312 : Tensor? = prim::GetAttr[name="bias"](%4310)
          %4313 : int[] = prim::ListConstruct(%43, %43)
          %4314 : int[] = prim::ListConstruct(%48, %48)
          %4315 : int[] = prim::ListConstruct(%43, %43)
          %4316 : Tensor = aten::conv2d(%t.15, %4311, %4312, %4313, %4314, %4315, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/conv.py:395:15
          %4317 : Tensor[] = aten::append(%pred_objectness_logits.1, %4316) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:175:12
          %4318 : __torch__.torch.nn.modules.conv.___torch_mangle_37.Conv2d = prim::GetAttr[name="anchor_deltas"](%4296)
          %4319 : Tensor = prim::GetAttr[name="weight"](%4318)
          %4320 : Tensor? = prim::GetAttr[name="bias"](%4318)
          %4321 : int[] = prim::ListConstruct(%43, %43)
          %4322 : int[] = prim::ListConstruct(%48, %48)
          %4323 : int[] = prim::ListConstruct(%43, %43)
          %4324 : Tensor = aten::conv2d(%t.15, %4319, %4320, %4321, %4322, %4323, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/conv.py:395:15
          %4325 : Tensor[] = aten::append(%pred_anchor_deltas.1, %4324) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:176:12
          -> (%54)
      %4326 : (Tensor[], Tensor[]) = prim::TupleConstruct(%pred_objectness_logits.1, %pred_anchor_deltas.1)
      %pred_objectness_logits.2 : Tensor[], %pred_anchor_deltas.2 : Tensor[] = prim::TupleUnpack(%4326)
      %pred_objectness_logits.3 : Tensor[] = prim::ListConstruct()
      %4330 : int = aten::len(%pred_objectness_logits.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:456:33
       = prim::Loop(%4330, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:456:33
        block0(%4331 : int):
          %score.1 : Tensor = aten::__getitem__(%pred_objectness_logits.2, %4331) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:456:33
          %4333 : int[] = prim::ListConstruct(%48, %46, %32, %43)
          %4334 : Tensor = aten::permute(%score.1, %4333) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:458:12
          %4335 : Tensor = aten::flatten(%4334, %43, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:458:12
          %4336 : Tensor[] = aten::append(%pred_objectness_logits.3, %4335) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:456:33
          -> (%54)
      %pred_anchor_deltas.3 : Tensor[] = prim::ListConstruct()
      %4338 : int = aten::len(%pred_anchor_deltas.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:461:29
       = prim::Loop(%4338, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:461:29
        block0(%4339 : int):
          %x.132 : Tensor = aten::__getitem__(%pred_anchor_deltas.2, %4339) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:461:29
          %4341 : int[] = aten::size(%x.132) # <string>:7:9
          %4342 : int = aten::__getitem__(%4341, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:19
          %4343 : int[] = aten::size(%x.132) # <string>:7:9
          %4344 : int = aten::__getitem__(%4343, %50) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:66
          %4345 : int[] = aten::size(%x.132) # <string>:7:9
          %4346 : int = aten::__getitem__(%4345, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:79
          %4347 : int[] = prim::ListConstruct(%4342, %51, %52, %4344, %4346)
          %4348 : Tensor = aten::view(%x.132, %4347) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:12
          %4349 : int[] = prim::ListConstruct(%48, %32, %52, %43, %46)
          %4350 : Tensor = aten::permute(%4348, %4349) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:12
          %4351 : Tensor = aten::flatten(%4350, %43, %50) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:12
          %4352 : Tensor[] = aten::append(%pred_anchor_deltas.3, %4351) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:461:29
          -> (%54)
      %losses.1 : Dict(str, Tensor) = prim::DictConstruct()
      %4354 : (int, int)[] = prim::GetAttr[name="image_sizes"](%images.2)
      %4355 : __torch__.torch.autograd.grad_mode.no_grad = prim::CreateObject()
       = prim::SetAttr[name="prev"](%4355, %44)
      %4356 : None = prim::Enter(%4355)
      %4357 : Tensor = aten::__getitem__(%pred_anchor_deltas.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:522:12
      %4358 : int[] = aten::size(%4357) # <string>:7:9
      %N.1 : int = aten::__getitem__(%4358, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:522:12
      %pred_proposals.1 : Tensor[] = prim::ListConstruct()
      %4361 : int = aten::len(%anchors.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
      %4362 : int = aten::len(%pred_anchor_deltas.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
      %4363 : int[] = prim::ListConstruct(%4361, %4362)
      %4364 : int = prim::min(%4363) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
       = prim::Loop(%4364, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
        block0(%4365 : int):
          %anchors_i.1 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%anchors.1, %4365) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
          %pred_anchor_deltas_i.1 : Tensor = aten::__getitem__(%pred_anchor_deltas.3, %4365) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
          %4368 : Tensor = prim::GetAttr[name="tensor"](%anchors_i.1)
          %B.1 : int = aten::size(%4368, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:526:16
          %4370 : int[] = prim::ListConstruct(%51, %B.1)
          %pred_anchor_deltas_i.3 : Tensor = aten::reshape(%pred_anchor_deltas_i.1, %4370) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:527:35
          %4372 : Tensor = prim::GetAttr[name="tensor"](%anchors_i.1)
          %4373 : Tensor = aten::unsqueeze(%4372, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:529:24
          %4374 : int[] = prim::ListConstruct(%N.1, %51, %51)
          %4375 : Tensor = aten::expand(%4373, %4374, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:529:24
          %4376 : int[] = prim::ListConstruct(%51, %B.1)
          %anchors_i.4 : Tensor = aten::reshape(%4375, %4376) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:529:24
          %4378 : __torch__.detectron2.modeling.box_regression.Box2BoxTransform = prim::GetAttr[name="box2box_transform"](%4204)
          %deltas.4 : Tensor = aten::to(%pred_anchor_deltas_i.3, %21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:88:17
          %4380 : int = prim::dtype(%deltas.4)
          %boxes.7 : Tensor = aten::to(%anchors_i.4, %4380, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:89:16
          %4382 : Tensor = aten::slice(%boxes.7, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:17
          %4383 : Tensor = aten::select(%4382, %43, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:17
          %4384 : Tensor = aten::slice(%boxes.7, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:31
          %4385 : Tensor = aten::select(%4384, %43, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:31
          %widths.2 : Tensor = aten::sub(%4383, %4385, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:17
          %4387 : Tensor = aten::slice(%boxes.7, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:18
          %4388 : Tensor = aten::select(%4387, %43, %32) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:18
          %4389 : Tensor = aten::slice(%boxes.7, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:32
          %4390 : Tensor = aten::select(%4389, %43, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:32
          %heights.2 : Tensor = aten::sub(%4388, %4390, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:18
          %4392 : Tensor = aten::slice(%boxes.7, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:93:16
          %4393 : Tensor = aten::select(%4392, %43, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:93:16
          %4394 : Tensor = aten::mul(%widths.2, %27) # <string>:3:9
          %ctr_x.2 : Tensor = aten::add(%4393, %4394, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:93:16
          %4396 : Tensor = aten::slice(%boxes.7, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:94:16
          %4397 : Tensor = aten::select(%4396, %43, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:94:16
          %4398 : Tensor = aten::mul(%heights.2, %27) # <string>:3:9
          %ctr_y.2 : Tensor = aten::add(%4397, %4398, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:94:16
          %4400 : (float, float, float, float) = prim::GetAttr[name="weights"](%4378)
          %wx.2 : float, %wy.2 : float, %ww.2 : float, %wh.2 : float = prim::TupleUnpack(%4400)
          %4405 : Tensor = aten::slice(%deltas.4, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:97:13
          %4406 : Tensor = aten::slice(%4405, %43, %48, %38, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:97:13
          %dx.2 : Tensor = aten::div(%4406, %wx.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:97:13
          %4408 : Tensor = aten::slice(%deltas.4, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:98:13
          %4409 : Tensor = aten::slice(%4408, %43, %43, %38, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:98:13
          %dy.2 : Tensor = aten::div(%4409, %wy.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:98:13
          %4411 : Tensor = aten::slice(%deltas.4, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:99:13
          %4412 : Tensor = aten::slice(%4411, %43, %46, %38, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:99:13
          %dw.2 : Tensor = aten::div(%4412, %ww.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:99:13
          %4414 : Tensor = aten::slice(%deltas.4, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:100:13
          %4415 : Tensor = aten::slice(%4414, %43, %32, %38, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:100:13
          %dh.2 : Tensor = aten::div(%4415, %wh.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:100:13
          %4417 : float = prim::GetAttr[name="scale_clamp"](%4378)
          %dw.4 : Tensor = aten::clamp(%dw.2, %53, %4417) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:103:13
          %4419 : float = prim::GetAttr[name="scale_clamp"](%4378)
          %dh.4 : Tensor = aten::clamp(%dh.2, %53, %4419) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:104:13
          %4421 : Tensor = aten::slice(%widths.2, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:26
          %4422 : Tensor = aten::unsqueeze(%4421, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:26
          %4423 : Tensor = aten::mul(%dx.2, %4422) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:21
          %4424 : Tensor = aten::slice(%ctr_x.2, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:44
          %4425 : Tensor = aten::unsqueeze(%4424, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:44
          %pred_ctr_x.2 : Tensor = aten::add(%4423, %4425, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:21
          %4427 : Tensor = aten::slice(%heights.2, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:26
          %4428 : Tensor = aten::unsqueeze(%4427, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:26
          %4429 : Tensor = aten::mul(%dy.2, %4428) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:21
          %4430 : Tensor = aten::slice(%ctr_y.2, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:45
          %4431 : Tensor = aten::unsqueeze(%4430, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:45
          %pred_ctr_y.2 : Tensor = aten::add(%4429, %4431, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:21
          %4433 : Tensor = aten::exp(%dw.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:17
          %4434 : Tensor = aten::slice(%widths.2, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:33
          %4435 : Tensor = aten::unsqueeze(%4434, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:33
          %pred_w.2 : Tensor = aten::mul(%4433, %4435) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:17
          %4437 : Tensor = aten::exp(%dh.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:17
          %4438 : Tensor = aten::slice(%heights.2, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:33
          %4439 : Tensor = aten::unsqueeze(%4438, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:33
          %pred_h.2 : Tensor = aten::mul(%4437, %4439) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:17
          %4441 : Tensor = aten::mul(%pred_w.2, %27) # <string>:3:9
          %x1.3 : Tensor = aten::sub(%pred_ctr_x.2, %4441, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:111:13
          %4443 : Tensor = aten::mul(%pred_h.2, %27) # <string>:3:9
          %y1.3 : Tensor = aten::sub(%pred_ctr_y.2, %4443, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:112:13
          %4445 : Tensor = aten::mul(%pred_w.2, %27) # <string>:3:9
          %x2.3 : Tensor = aten::add(%pred_ctr_x.2, %4445, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:113:13
          %4447 : Tensor = aten::mul(%pred_h.2, %27) # <string>:3:9
          %y2.3 : Tensor = aten::add(%pred_ctr_y.2, %4447, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:114:13
          %4449 : Tensor[] = prim::ListConstruct(%x1.3, %y1.3, %x2.3, %y2.3)
          %pred_boxes.2 : Tensor = aten::stack(%4449, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:115:21
          %4451 : int[] = aten::size(%deltas.4) # <string>:7:9
          %proposals_i.2 : Tensor = aten::reshape(%pred_boxes.2, %4451) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:116:15
          %4453 : int[] = prim::ListConstruct(%N.1, %51, %B.1)
          %4454 : Tensor = aten::view(%proposals_i.2, %4453) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:532:29
          %4455 : Tensor[] = aten::append(%pred_proposals.1, %4454) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:532:12
          -> (%54)
      %4456 : float = prim::GetAttr[name="nms_thresh"](%4204)
      %4457 : Dict(bool, int) = prim::GetAttr[name="pre_nms_topk"](%4204)
      %4458 : int = aten::__getitem__(%4457, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:508:16
      %4459 : Dict(bool, int) = prim::GetAttr[name="post_nms_topk"](%4204)
      %4460 : int = aten::__getitem__(%4459, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:509:16
      %4461 : float = prim::GetAttr[name="min_box_size"](%4204)
      %num_images.1 : int = aten::len(%4354) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:60:17
      %4463 : Tensor = aten::__getitem__(%pred_proposals.1, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:61:13
      %device.8 : Device = prim::device(%4463)
      %topk_scores.1 : Tensor[] = prim::ListConstruct()
      %topk_proposals.1 : Tensor[] = prim::ListConstruct()
      %level_ids.1 : Tensor[] = prim::ListConstruct()
      %batch_idx.1 : Tensor = aten::arange(%num_images.1, %53, %53, %device.8, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:67:16
      %4469 : int = aten::len(%pred_proposals.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:68:4
      %4470 : int = aten::len(%pred_objectness_logits.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:68:4
      %4471 : int[] = prim::ListConstruct(%38, %4469, %4470)
      %4472 : int = prim::min(%4471) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:68:4
       = prim::Loop(%4472, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:68:4
        block0(%level_id.1 : int):
          %proposals_i.1 : Tensor = aten::__getitem__(%pred_proposals.1, %level_id.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:68:4
          %logits_i.1 : Tensor = aten::__getitem__(%pred_objectness_logits.3, %level_id.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:68:4
          %4476 : int[] = aten::size(%logits_i.1) # <string>:7:9
          %Hi_Wi_A.1 : int = aten::__getitem__(%4476, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:69:18
          %num_proposals_i.1 : int = prim::min(%Hi_Wi_A.1, %4458) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:30
          %logits_i.4 : Tensor, %idx.1 : Tensor = aten::sort(%logits_i.1, %43, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:77:24
          %topk_scores_i.1 : Tensor = aten::narrow(%logits_i.4, %43, %48, %num_proposals_i.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:78:24
          %topk_idx.1 : Tensor = aten::narrow(%idx.1, %43, %48, %num_proposals_i.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:19
          %4483 : Tensor = aten::slice(%batch_idx.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:39
          %4484 : Tensor = aten::unsqueeze(%4483, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:39
          %4485 : Tensor?[] = prim::ListConstruct(%4484, %topk_idx.1)
          %topk_proposals_i.1 : Tensor = aten::index(%proposals_i.1, %4485) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:27
          %4487 : Tensor[] = aten::append(%topk_proposals.1, %topk_proposals_i.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:84:8
          %4488 : Tensor[] = aten::append(%topk_scores.1, %topk_scores_i.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:85:8
          %4489 : int[] = prim::ListConstruct(%num_proposals_i.1)
          %4490 : Tensor = aten::full(%4489, %level_id.1, %52, %53, %device.8, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:86:25
          %4491 : Tensor[] = aten::append(%level_ids.1, %4490) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:86:8
          -> (%54)
      %4492 : int = aten::len(%topk_scores.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
      %4493 : bool = aten::eq(%4492, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
      %topk_scores.4 : Tensor = prim::If(%4493) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:4
        block0():
          %4495 : Tensor = aten::__getitem__(%topk_scores.1, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:44:15
          -> (%4495)
        block1():
          %4496 : Tensor = aten::cat(%topk_scores.1, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
          -> (%4496)
      %4497 : int = aten::len(%topk_proposals.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
      %4498 : bool = aten::eq(%4497, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
      %topk_proposals.4 : Tensor = prim::If(%4498) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:4
        block0():
          %4500 : Tensor = aten::__getitem__(%topk_proposals.1, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:44:15
          -> (%4500)
        block1():
          %4501 : Tensor = aten::cat(%topk_proposals.1, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
          -> (%4501)
      %4502 : int = aten::len(%level_ids.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
      %4503 : bool = aten::eq(%4502, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
      %level_ids.4 : Tensor = prim::If(%4503) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:4
        block0():
          %4505 : Tensor = aten::__getitem__(%level_ids.1, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:44:15
          -> (%4505)
        block1():
          %4506 : Tensor = aten::cat(%level_ids.1, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
          -> (%4506)
      %proposals.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::ListConstruct()
      %4508 : int = aten::len(%4354) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:95:4
      %4509 : int[] = prim::ListConstruct(%38, %4508)
      %4510 : int = prim::min(%4509) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:95:4
       = prim::Loop(%4510, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:95:4
        block0(%n.1 : int):
          %image_size.1 : (int, int) = aten::__getitem__(%4354, %n.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:95:4
          %4513 : Tensor = aten::select(%topk_proposals.4, %48, %n.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:96:22
          %boxes.6 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
          %device.7 : Device = prim::device(%4513)
          %tensor.15 : Tensor = aten::as_tensor(%4513, %21, %device.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:148:17
          %4517 : int = aten::numel(%tensor.15) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
          %4518 : bool = aten::eq(%4517, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
          %tensor.16 : Tensor = prim::If(%4518) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:8
            block0():
              %4520 : int[] = prim::ListConstruct(%51, %52)
              %4521 : Tensor = aten::reshape(%tensor.15, %4520) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
              %tensor.17 : Tensor = aten::to(%4521, %device.7, %21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
              -> (%tensor.17)
            block1():
              -> (%tensor.15)
          %4523 : int = aten::dim(%tensor.16) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
          %4524 : bool = aten::eq(%4523, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
          %4525 : bool = prim::If(%4524) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
            block0():
              %4526 : int = aten::size(%tensor.16, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
              %4527 : bool = aten::eq(%4526, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
              -> (%4527)
            block1():
              -> (%44)
           = prim::If(%4525) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
            block0():
              -> ()
            block1():
              %4528 : int[] = aten::size(%tensor.16) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:59
              %4529 : str = aten::str(%4528) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
              %4530 : str = aten::add(%49, %4529) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
               = prim::RaiseException(%4530) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
              -> ()
           = prim::SetAttr[name="tensor"](%boxes.6, %tensor.16)
          %scores_per_img.1 : Tensor = aten::select(%topk_scores.4, %48, %n.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:97:25
          %4532 : Tensor = prim::GetAttr[name="tensor"](%boxes.6)
          %4533 : Tensor = aten::isfinite(%4532) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:100:21
          %4534 : Tensor = aten::all(%4533, %43, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:100:21
          %4535 : Tensor = aten::isfinite(%scores_per_img.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:100:63
          %valid_mask.2 : Tensor = aten::__and__(%4534, %4535) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:100:21
          %4537 : Tensor = aten::all(%valid_mask.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:101:15
          %4538 : bool = aten::Bool(%4537) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:101:15
          %4539 : bool = aten::__not__(%4538) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:101:11
          %boxes.20 : __torch__.detectron2.structures.boxes.Boxes, %scores_per_img.17 : Tensor, %lvl.14 : Tensor = prim::If(%4539) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:101:8
            block0():
              %4543 : Tensor = prim::GetAttr[name="tensor"](%boxes.6)
              %4544 : Tensor?[] = prim::ListConstruct(%valid_mask.2)
              %b.2 : Tensor = aten::index(%4543, %4544) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:233:12
              %4546 : int = aten::dim(%b.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:15
              %4547 : bool = aten::eq(%4546, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:15
               = prim::If(%4547) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:8
                block0():
                  -> ()
                block1():
                  %4548 : str = aten::format(%22, %valid_mask.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:29
                  %4549 : str = aten::add(%49, %4548) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:8
                   = prim::RaiseException(%4549) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:8
                  -> ()
              %boxes.8 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
              %device.4 : Device = prim::device(%b.2)
              %tensor.7 : Tensor = aten::as_tensor(%b.2, %21, %device.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:148:17
              %4553 : int = aten::numel(%tensor.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
              %4554 : bool = aten::eq(%4553, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
              %tensor.2 : Tensor = prim::If(%4554) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:8
                block0():
                  %4556 : int[] = prim::ListConstruct(%51, %52)
                  %4557 : Tensor = aten::reshape(%tensor.7, %4556) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
                  %tensor.10 : Tensor = aten::to(%4557, %device.4, %21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
                  -> (%tensor.10)
                block1():
                  -> (%tensor.7)
              %4559 : int = aten::dim(%tensor.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
              %4560 : bool = aten::eq(%4559, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
              %4561 : bool = prim::If(%4560) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
                block0():
                  %4562 : int = aten::size(%tensor.2, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
                  %4563 : bool = aten::eq(%4562, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
                  -> (%4563)
                block1():
                  -> (%44)
               = prim::If(%4561) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                block0():
                  -> ()
                block1():
                  %4564 : int[] = aten::size(%tensor.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:59
                  %4565 : str = aten::str(%4564) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                  %4566 : str = aten::add(%49, %4565) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                   = prim::RaiseException(%4566) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                  -> ()
               = prim::SetAttr[name="tensor"](%boxes.8, %tensor.2)
              %4567 : Tensor?[] = prim::ListConstruct(%valid_mask.2)
              %scores_per_img.4 : Tensor = aten::index(%scores_per_img.1, %4567) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:107:29
              %4569 : Tensor?[] = prim::ListConstruct(%valid_mask.2)
              %lvl.2 : Tensor = aten::index(%level_ids.4, %4569) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:108:18
              -> (%boxes.8, %scores_per_img.4, %lvl.2)
            block1():
              -> (%boxes.6, %scores_per_img.1, %level_ids.4)
          %4571 : Tensor = prim::GetAttr[name="tensor"](%boxes.20)
          %4572 : Tensor = aten::isfinite(%4571) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:189:15
          %4573 : Tensor = aten::all(%4572) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:189:15
          %4574 : bool = aten::Bool(%4573) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:189:15
           = prim::If(%4574) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:189:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:189:8
              -> ()
          %h.2 : int, %w.2 : int = prim::TupleUnpack(%image_size.1)
          %4577 : Tensor = prim::GetAttr[name="tensor"](%boxes.20)
          %4578 : Tensor = aten::slice(%4577, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:13
          %4579 : Tensor = aten::select(%4578, %43, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:13
          %x1.4 : Tensor = aten::clamp(%4579, %48, %w.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:13
          %4581 : Tensor = prim::GetAttr[name="tensor"](%boxes.20)
          %4582 : Tensor = aten::slice(%4581, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:192:13
          %4583 : Tensor = aten::select(%4582, %43, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:192:13
          %y1.4 : Tensor = aten::clamp(%4583, %48, %h.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:192:13
          %4585 : Tensor = prim::GetAttr[name="tensor"](%boxes.20)
          %4586 : Tensor = aten::slice(%4585, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:193:13
          %4587 : Tensor = aten::select(%4586, %43, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:193:13
          %x2.4 : Tensor = aten::clamp(%4587, %48, %w.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:193:13
          %4589 : Tensor = prim::GetAttr[name="tensor"](%boxes.20)
          %4590 : Tensor = aten::slice(%4589, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:194:13
          %4591 : Tensor = aten::select(%4590, %43, %32) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:194:13
          %y2.4 : Tensor = aten::clamp(%4591, %48, %h.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:194:13
          %4593 : Tensor[] = prim::ListConstruct(%x1.4, %y1.4, %x2.4, %y2.4)
          %4594 : Tensor = aten::stack(%4593, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:195:22
           = prim::SetAttr[name="tensor"](%boxes.20, %4594)
          %box.2 : Tensor = prim::GetAttr[name="tensor"](%boxes.20)
          %4596 : Tensor = aten::slice(%box.2, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:208:17
          %4597 : Tensor = aten::select(%4596, %43, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:208:17
          %4598 : Tensor = aten::slice(%box.2, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:208:29
          %4599 : Tensor = aten::select(%4598, %43, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:208:29
          %widths.3 : Tensor = aten::sub(%4597, %4599, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:208:17
          %4601 : Tensor = aten::slice(%box.2, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:209:18
          %4602 : Tensor = aten::select(%4601, %43, %32) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:209:18
          %4603 : Tensor = aten::slice(%box.2, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:209:30
          %4604 : Tensor = aten::select(%4603, %43, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:209:30
          %heights.3 : Tensor = aten::sub(%4602, %4604, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:209:18
          %4606 : Tensor = aten::gt(%widths.3, %4461) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:210:16
          %4607 : Tensor = aten::gt(%heights.3, %4461) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:210:39
          %keep.7 : Tensor = aten::__and__(%4606, %4607) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:210:16
          %4609 : Tensor = aten::sum(%keep.7, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:113:28
          %4610 : Scalar = aten::item(%4609) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:113:28
          %4611 : Tensor = prim::GetAttr[name="tensor"](%boxes.20)
          %4612 : int[] = aten::size(%4611) # <string>:7:9
          %4613 : int = aten::__getitem__(%4612, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:238:15
          %4614 : bool = aten::ne(%4610, %4613) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:113:28
          %boxes.9 : __torch__.detectron2.structures.boxes.Boxes, %scores_per_img : Tensor, %lvl : Tensor = prim::If(%4614) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:113:8
            block0():
              %4618 : Tensor = prim::GetAttr[name="tensor"](%boxes.20)
              %4619 : Tensor?[] = prim::ListConstruct(%keep.7)
              %b.3 : Tensor = aten::index(%4618, %4619) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:233:12
              %4621 : int = aten::dim(%b.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:15
              %4622 : bool = aten::eq(%4621, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:15
               = prim::If(%4622) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:8
                block0():
                  -> ()
                block1():
                  %4623 : str = aten::format(%22, %keep.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:29
                  %4624 : str = aten::add(%49, %4623) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:8
                   = prim::RaiseException(%4624) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:8
                  -> ()
              %boxes.13 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
              %device.5 : Device = prim::device(%b.3)
              %tensor.11 : Tensor = aten::as_tensor(%b.3, %21, %device.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:148:17
              %4628 : int = aten::numel(%tensor.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
              %4629 : bool = aten::eq(%4628, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
              %tensor.3 : Tensor = prim::If(%4629) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:8
                block0():
                  %4631 : int[] = prim::ListConstruct(%51, %52)
                  %4632 : Tensor = aten::reshape(%tensor.11, %4631) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
                  %tensor.12 : Tensor = aten::to(%4632, %device.5, %21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
                  -> (%tensor.12)
                block1():
                  -> (%tensor.11)
              %4634 : int = aten::dim(%tensor.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
              %4635 : bool = aten::eq(%4634, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
              %4636 : bool = prim::If(%4635) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
                block0():
                  %4637 : int = aten::size(%tensor.3, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
                  %4638 : bool = aten::eq(%4637, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
                  -> (%4638)
                block1():
                  -> (%44)
               = prim::If(%4636) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                block0():
                  -> ()
                block1():
                  %4639 : int[] = aten::size(%tensor.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:59
                  %4640 : str = aten::str(%4639) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                  %4641 : str = aten::add(%49, %4640) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                   = prim::RaiseException(%4641) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                  -> ()
               = prim::SetAttr[name="tensor"](%boxes.13, %tensor.3)
              %4642 : Tensor?[] = prim::ListConstruct(%keep.7)
              %scores_per_img.10 : Tensor = aten::index(%scores_per_img.17, %4642) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:114:54
              %4644 : Tensor?[] = prim::ListConstruct(%keep.7)
              %lvl.8 : Tensor = aten::index(%lvl.14, %4644) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:114:76
              -> (%boxes.13, %scores_per_img.10, %lvl.8)
            block1():
              -> (%boxes.20, %scores_per_img.17, %lvl.14)
          %4646 : Tensor = prim::GetAttr[name="tensor"](%boxes.9)
          %4647 : int[] = aten::size(%4646) # <string>:7:9
          %4648 : int = aten::__getitem__(%4647, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:16:11
          %4649 : bool = aten::eq(%4648, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:16:11
           = prim::If(%4649) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:16:4
            block0():
              -> ()
            block1():
               = prim::RaiseException(%49) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:16:4
              -> ()
          %4650 : int = aten::len(%4646) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:19:7
          %4651 : bool = aten::lt(%4650, %24) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:19:7
          %keep.10 : Tensor = prim::If(%4651) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:19:4
            block0():
              %4653 : Tensor = aten::to(%4646, %21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:21:35
              %4654 : int = aten::numel(%4653) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:65:7
              %4655 : bool = aten::eq(%4654, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:65:7
              %4656 : Tensor = prim::If(%4655) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:65:4
                block0():
                  %4657 : Device = prim::device(%4653)
                  %4658 : int[] = prim::ListConstruct(%48)
                  %4659 : Tensor = aten::empty(%4658, %52, %53, %4657, %53, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:66:15
                  -> (%4659)
                block1():
                  %max_coordinate.2 : Tensor = aten::max(%4653) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:25
                  %4661 : Tensor = aten::to(%lvl, %4653, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:73:18
                  %4662 : Tensor = aten::tensor(%43, %53, %53, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:73:53
                  %4663 : Tensor = aten::to(%4662, %4653, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:73:53
                  %4664 : Tensor = aten::add(%max_coordinate.2, %4663, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:73:36
                  %offsets.2 : Tensor = aten::mul(%4661, %4664) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:73:18
                  %4666 : Tensor = aten::slice(%offsets.2, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:74:32
                  %4667 : Tensor = aten::unsqueeze(%4666, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:74:32
                  %boxes_for_nms.2 : Tensor = aten::add(%4653, %4667, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:74:24
                  %keep.5 : Tensor = torchvision::nms(%boxes_for_nms.2, %scores_per_img, %4456) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:36:11
                  -> (%keep.5)
              -> (%4656)
            block1():
              %4670 : int[] = aten::size(%scores_per_img) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:23:35
              %result_mask.3 : Tensor = aten::new_zeros(%scores_per_img, %4670, %25, %53, %53, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:23:18
              %output.5 : Tensor, %inverse_indices.3 : Tensor, %counts.3 : Tensor = aten::_unique2(%lvl, %54, %44, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/functional.py:745:42
              %4675 : (Tensor, Tensor, Tensor) = prim::TupleConstruct(%output.5, %inverse_indices.3, %counts.3)
              %output.6 : Tensor, %4677 : Tensor, %4678 : Tensor = prim::TupleUnpack(%4675)
              %4679 : Tensor = aten::cpu(%output.6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:24:44
              %4680 : int[] = prim::tolist(%4679, %43, %48)
              %4681 : int = aten::len(%4680) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:24:4
               = prim::Loop(%4681, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:24:4
                block0(%4682 : int):
                  %id.3 : int = aten::__getitem__(%4680, %4682) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:24:4
                  %4684 : Tensor = aten::eq(%lvl, %id.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:25:16
                  %4685 : Tensor = aten::nonzero(%4684) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:25:16
                  %4686 : int[] = prim::ListConstruct(%51)
                  %mask.3 : Tensor = aten::view(%4685, %4686) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:25:16
                  %4688 : Tensor?[] = prim::ListConstruct(%mask.3)
                  %4689 : Tensor = aten::index(%4646, %4688) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:26:19
                  %4690 : Tensor?[] = prim::ListConstruct(%mask.3)
                  %4691 : Tensor = aten::index(%scores_per_img, %4690) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:26:32
                  %keep.6 : Tensor = torchvision::nms(%4689, %4691, %4456) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:36:11
                  %4693 : Tensor?[] = prim::ListConstruct(%keep.6)
                  %4694 : Tensor = aten::index(%mask.3, %4693) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:27:20
                  %4695 : int = prim::dtype(%result_mask.3)
                  %4696 : Device = prim::device(%result_mask.3)
                  %4697 : Tensor = aten::tensor(%54, %4695, %4696, %44)
                  %4698 : Tensor?[] = prim::ListConstruct(%4694)
                  %4699 : Tensor = aten::index_put_(%result_mask.3, %4698, %4697, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:27:8
                  -> (%54)
              %4700 : Tensor = aten::nonzero(%result_mask.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:28:11
              %4701 : int[] = prim::ListConstruct(%51)
              %keep.11 : Tensor = aten::view(%4700, %4701) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:28:11
              %4703 : Tensor?[] = prim::ListConstruct(%keep.11)
              %4704 : Tensor = aten::index(%scores_per_img, %4703) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:29:16
              %4705 : Tensor = aten::argsort(%4704, %51, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:29:16
              %4706 : Tensor?[] = prim::ListConstruct(%4705)
              %keep.21 : Tensor = aten::index(%keep.11, %4706) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:29:11
              -> (%keep.21)
          %keep.12 : Tensor = aten::slice(%keep.10, %48, %48, %4460, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:124:15
          %res.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = prim::CreateObject()
           = prim::SetAttr[name="image_size"](%res.1, %image_size.1)
           = prim::SetAttr[name="_field_names"](%res.1, %26)
           = prim::SetAttr[name="_proposal_boxes"](%res.1, %53)
           = prim::SetAttr[name="_objectness_logits"](%res.1, %53)
           = prim::SetAttr[name="_pred_boxes"](%res.1, %53)
           = prim::SetAttr[name="_scores"](%res.1, %53)
           = prim::SetAttr[name="_pred_classes"](%res.1, %53)
           = prim::SetAttr[name="_pred_masks"](%res.1, %53)
           = prim::SetAttr[name="_pred_keypoints"](%res.1, %53)
           = prim::SetAttr[name="_pred_keypoint_heatmaps"](%res.1, %53)
          %4710 : Tensor = prim::GetAttr[name="tensor"](%boxes.9)
          %4711 : Tensor?[] = prim::ListConstruct(%keep.12)
          %b.1 : Tensor = aten::index(%4710, %4711) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:233:12
          %4713 : int = aten::dim(%b.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:15
          %4714 : bool = aten::eq(%4713, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:15
           = prim::If(%4714) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:8
            block0():
              -> ()
            block1():
              %4715 : str = aten::format(%22, %keep.12) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:29
              %4716 : str = aten::add(%49, %4715) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:8
               = prim::RaiseException(%4716) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:234:8
              -> ()
          %4717 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
          %device.9 : Device = prim::device(%b.1)
          %tensor.18 : Tensor = aten::as_tensor(%b.1, %21, %device.9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:148:17
          %4720 : int = aten::numel(%tensor.18) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
          %4721 : bool = aten::eq(%4720, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
          %tensor.19 : Tensor = prim::If(%4721) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:8
            block0():
              %4723 : int[] = prim::ListConstruct(%51, %52)
              %4724 : Tensor = aten::reshape(%tensor.18, %4723) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
              %tensor.20 : Tensor = aten::to(%4724, %device.9, %21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
              -> (%tensor.20)
            block1():
              -> (%tensor.18)
          %4726 : int = aten::dim(%tensor.19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
          %4727 : bool = aten::eq(%4726, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
          %4728 : bool = prim::If(%4727) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
            block0():
              %4729 : int = aten::size(%tensor.19, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
              %4730 : bool = aten::eq(%4729, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
              -> (%4730)
            block1():
              -> (%44)
           = prim::If(%4728) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
            block0():
              -> ()
            block1():
              %4731 : int[] = aten::size(%tensor.19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:59
              %4732 : str = aten::str(%4731) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
              %4733 : str = aten::add(%49, %4732) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
               = prim::RaiseException(%4733) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
              -> ()
           = prim::SetAttr[name="tensor"](%4717, %tensor.19)
           = prim::SetAttr[name="_proposal_boxes"](%res.1, %4717)
          %4734 : Tensor?[] = prim::ListConstruct(%keep.12)
          %4735 : Tensor = aten::index(%scores_per_img, %4734) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:128:32
           = prim::SetAttr[name="_objectness_logits"](%res.1, %4735)
          %4736 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = aten::append(%proposals.1, %res.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:129:8
          -> (%54)
      %4737 : Tensor = prim::Exit(%4355)
      %4738 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Dict(str, Tensor)) = prim::TupleConstruct(%proposals.1, %losses.1)
      %proposals.2 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], %4740 : Dict(str, Tensor) = prim::TupleUnpack(%4738)
      %4741 : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads = prim::GetAttr[name="roi_heads"](%5)
      %features.3 : Tensor[] = prim::ListConstruct()
      %4743 : str[] = prim::GetAttr[name="box_in_features"](%4741)
      %4744 : int = aten::len(%4743) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:19
       = prim::Loop(%4744, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:19
        block0(%4745 : int):
          %f.1 : str = aten::__getitem__(%4743, %4745) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:19
          %4747 : Tensor = aten::__getitem__(%features.1, %f.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:20
          %4748 : Tensor[] = aten::append(%features.3, %4747) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:19
          -> (%54)
      %4749 : __torch__.detectron2.modeling.poolers.ROIPooler = prim::GetAttr[name="box_pooler"](%4741)
      %4750 : __torch__.detectron2.structures.boxes.Boxes[] = prim::ListConstruct()
      %4751 : int = aten::len(%proposals.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:798:49
       = prim::Loop(%4751, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:798:49
        block0(%4752 : int):
          %x.8 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %4752) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:798:49
          %4754 : __torch__.detectron2.structures.boxes.Boxes = prim::Uninitialized()
          %t.8 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%x.8)
          %4756 : bool = aten::__isnot__(%t.8, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:31:15
          %t.7 : __torch__.detectron2.structures.boxes.Boxes = prim::If(%4756) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:31:8
            block0():
              %t.9 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%t.8)
              -> (%t.9)
            block1():
               = prim::RaiseException(%20) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:31:8
              -> (%4754)
          %4759 : __torch__.detectron2.structures.boxes.Boxes[] = aten::append(%4750, %t.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:798:49
          -> (%54)
      %4760 : int = aten::len(%features.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:206:12
      %4761 : bool = aten::eq(%4760, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:206:12
       = prim::If(%4761) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:205:8
        block0():
          -> ()
        block1():
          %4762 : int = aten::len(%features.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:208:35
          %4763 : str = aten::format(%17, %52, %4762) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:207:11
          %4764 : str = aten::add(%49, %4763) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:205:8
           = prim::RaiseException(%4764) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:205:8
          -> ()
      %4765 : int = aten::len(%4750) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:15
      %4766 : Tensor = aten::__getitem__(%features.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:33
      %4767 : int = aten::size(%4766, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:33
      %4768 : bool = aten::eq(%4765, %4767) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:15
       = prim::If(%4768) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:8
        block0():
          -> ()
        block1():
          %4769 : Tensor = aten::__getitem__(%features.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:214:12
          %4770 : int = aten::size(%4769, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:214:12
          %4771 : int = aten::len(%4750) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:214:26
          %4772 : str = aten::format(%16, %4770, %4771) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:213:11
          %4773 : str = aten::add(%49, %4772) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:8
           = prim::RaiseException(%4773) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:8
          -> ()
      %4774 : int = aten::len(%4750) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:216:11
      %4775 : bool = aten::eq(%4774, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:216:11
      %box_features.1 : Tensor = prim::If(%4775) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:216:8
        block0():
          %4777 : Tensor = aten::__getitem__(%features.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:218:20
          %4778 : int[] = aten::size(%4777) # <string>:7:9
          %4779 : int = aten::__getitem__(%4778, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:218:20
          %4780 : (int, int) = prim::GetAttr[name="output_size"](%4749)
          %4781 : int, %4782 : int = prim::TupleUnpack(%4780)
          %4783 : int[] = prim::ListConstruct(%48, %4779, %4781, %4782)
          %4784 : Tensor = aten::__getitem__(%features.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:218:62
          %4785 : Device = prim::device(%4784)
          %4786 : Tensor = aten::__getitem__(%features.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:218:81
          %4787 : int = prim::dtype(%4786)
          %4788 : Tensor = aten::zeros(%4783, %4787, %53, %4785, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:217:19
          -> (%4788)
        block1():
          %4789 : Tensor[] = prim::ListConstruct()
          %4790 : int = aten::len(%4750) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:84:22
           = prim::Loop(%4790, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:84:22
            block0(%4791 : int):
              %x.10 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%4750, %4791) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:84:22
              %4793 : Tensor = prim::GetAttr[name="tensor"](%x.10)
              %4794 : Tensor[] = aten::append(%4789, %4793) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:84:22
              -> (%54)
          %boxes.2 : Tensor = aten::cat(%4789, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:84:12
          %4796 : int[] = prim::ListConstruct()
          %4797 : int = aten::len(%4750) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:86:29
           = prim::Loop(%4797, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:86:29
            block0(%4798 : int):
              %x.6 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%4750, %4798) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:86:29
              %4800 : Tensor = prim::GetAttr[name="tensor"](%x.6)
              %4801 : int[] = aten::size(%4800) # <string>:7:9
              %4802 : int = aten::__getitem__(%4801, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:238:15
              %4803 : int[] = aten::append(%4796, %4802) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:86:29
              -> (%54)
          %4804 : Device = prim::device(%boxes.2)
          %sizes.1 : Tensor = aten::as_tensor(%4796, %53, %4804) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:25:15
          %4806 : int = aten::len(%4750) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:88:21
          %4807 : int = prim::dtype(%boxes.2)
          %4808 : Device = prim::device(%boxes.2)
          %4809 : Tensor = aten::arange(%4806, %4807, %53, %4808, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:88:8
          %indices.1 : Tensor = aten::repeat_interleave(%4809, %sizes.1, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:87:14
          %4811 : Tensor = aten::slice(%indices.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:90:16
          %4812 : Tensor = aten::unsqueeze(%4811, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:90:16
          %4813 : Tensor[] = prim::ListConstruct(%4812, %boxes.2)
          %pooler_fmt_boxes.2 : Tensor = aten::cat(%4813, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
          %4815 : int = prim::GetAttr[name="min_level"](%4749)
          %4816 : int = prim::GetAttr[name="max_level"](%4749)
          %4817 : int = prim::GetAttr[name="canonical_box_size"](%4749)
          %4818 : int = prim::GetAttr[name="canonical_level"](%4749)
          %4819 : Tensor[] = prim::ListConstruct()
          %4820 : int = aten::len(%4750) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
           = prim::Loop(%4820, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
            block0(%4821 : int):
              %boxes.5 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%4750, %4821) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
              %box.1 : Tensor = prim::GetAttr[name="tensor"](%boxes.5)
              %4824 : Tensor = aten::slice(%box.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:178:16
              %4825 : Tensor = aten::select(%4824, %43, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:178:16
              %4826 : Tensor = aten::slice(%box.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:178:28
              %4827 : Tensor = aten::select(%4826, %43, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:178:28
              %4828 : Tensor = aten::sub(%4825, %4827, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:178:16
              %4829 : Tensor = aten::slice(%box.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:178:42
              %4830 : Tensor = aten::select(%4829, %43, %32) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:178:42
              %4831 : Tensor = aten::slice(%box.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:178:54
              %4832 : Tensor = aten::select(%4831, %43, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:178:54
              %4833 : Tensor = aten::sub(%4830, %4832, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:178:42
              %area.1 : Tensor = aten::mul(%4828, %4833) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:178:16
              %4835 : Tensor[] = aten::append(%4819, %area.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:31
              -> (%54)
          %4836 : int = aten::len(%4819) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %4837 : bool = aten::eq(%4836, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %4838 : Tensor = prim::If(%4837) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:4
            block0():
              %4839 : Tensor = aten::__getitem__(%4819, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:44:15
              -> (%4839)
            block1():
              %4840 : Tensor = aten::cat(%4819, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
              -> (%4840)
          %box_sizes.1 : Tensor = aten::sqrt(%4838) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:50:16
          %4842 : Tensor = aten::div(%box_sizes.1, %4817) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:53:37
          %4843 : Tensor = aten::add(%4842, %18, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:53:37
          %4844 : Tensor = aten::log2(%4843) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:53:26
          %4845 : Tensor = aten::add(%4844, %4818, %43) # <string>:5:9
          %level_assignments.1 : Tensor = aten::floor(%4845) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:52:24
          %level_assignments.3 : Tensor = aten::clamp(%level_assignments.1, %4815, %4816) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:57:24
          %4848 : Tensor = aten::to(%level_assignments.3, %52, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:58:11
          %level_assignments.4 : Tensor = aten::sub(%4848, %4815, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:58:11
          %num_boxes.3 : int = aten::size(%pooler_fmt_boxes.2, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:230:20
          %4851 : Tensor = aten::__getitem__(%features.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:23
          %4852 : int[] = aten::size(%4851) # <string>:7:9
          %num_channels.3 : int = aten::__getitem__(%4852, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:23
          %4854 : (int, int) = prim::GetAttr[name="output_size"](%4749)
          %output_size.3 : int = prim::TupleIndex(%4854, %48)
          %4856 : Tensor = aten::__getitem__(%features.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:234:24
          %dtype.3 : int = prim::dtype(%4856)
          %4858 : Tensor = aten::__getitem__(%features.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:234:36
          %device.10 : Device = prim::device(%4858)
          %4860 : int[] = prim::ListConstruct(%num_boxes.3, %num_channels.3, %output_size.3, %output_size.3)
          %output.4 : Tensor = aten::zeros(%4860, %dtype.3, %53, %device.10, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:235:17
          %4862 : __torch__.torch.nn.modules.container.___torch_mangle_38.ModuleList = prim::GetAttr[name="level_poolers"](%4749)
          %4863 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="0"](%4862)
          %4864 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="1"](%4862)
          %4865 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="2"](%4862)
          %4866 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="3"](%4862)
          %4867 : Tensor = aten::eq(%level_assignments.4, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:33
          %4868 : int = aten::dim(%4867) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:128:11
          %4869 : bool = aten::eq(%4868, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:128:11
          %4870 : Tensor[] = prim::If(%4869) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:128:8
            block0():
              %4871 : Tensor = aten::unsqueeze(%4867, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:129:19
              %4872 : Tensor = aten::nonzero(%4871) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:129:19
              %4873 : Tensor[] = aten::unbind(%4872, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:129:19
              -> (%4873)
            block1():
              %4874 : Tensor = aten::nonzero(%4867) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:130:15
              %4875 : Tensor[] = aten::unbind(%4874, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:130:15
              -> (%4875)
          %inds.3 : Tensor = aten::__getitem__(%4870, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:19
          %4877 : Tensor?[] = prim::ListConstruct(%inds.3)
          %pooler_fmt_boxes_level.3 : Tensor = aten::index(%pooler_fmt_boxes.2, %4877) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:241:37
          %4879 : Tensor = aten::__getitem__(%features.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:46
          %4880 : int = aten::dim(%pooler_fmt_boxes_level.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4881 : bool = aten::eq(%4880, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4882 : bool = prim::If(%4881) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %4883 : int = aten::size(%pooler_fmt_boxes_level.3, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %4884 : bool = aten::eq(%4883, %40) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%4884)
            block1():
              -> (%44)
           = prim::If(%4882) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%49) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %4885 : bool = prim::is_quantized(%4879)
          %input.2 : Tensor = prim::If(%4885) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.6 : Tensor = aten::dequantize(%4879) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.6)
            block1():
              -> (%4879)
          %4888 : int = prim::dtype(%input.2)
          %4889 : Tensor = aten::to(%pooler_fmt_boxes_level.3, %4888, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %4890 : (int, int) = prim::GetAttr[name="output_size"](%4863)
          %4891 : float = prim::GetAttr[name="spatial_scale"](%4863)
          %4892 : int = prim::GetAttr[name="sampling_ratio"](%4863)
          %4893 : bool = prim::GetAttr[name="aligned"](%4863)
          %4894 : int, %4895 : int = prim::TupleUnpack(%4890)
          %4896 : int = aten::size(%4889, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
          %4897 : bool = aten::eq(%4896, %40) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
           = prim::If(%4897) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
              -> ()
          %4898 : Tensor = torchvision::roi_align(%input.2, %4889, %4891, %4894, %4895, %4892, %4893) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/roi_align.py:53:11
          %4899 : Tensor?[] = prim::ListConstruct(%inds.3)
          %4900 : Tensor = aten::index_put_(%output.4, %4899, %4898, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:12
          %4901 : Tensor = aten::eq(%level_assignments.4, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:33
          %4902 : int = aten::dim(%4901) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:128:11
          %4903 : bool = aten::eq(%4902, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:128:11
          %4904 : Tensor[] = prim::If(%4903) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:128:8
            block0():
              %4905 : Tensor = aten::unsqueeze(%4901, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:129:19
              %4906 : Tensor = aten::nonzero(%4905) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:129:19
              %4907 : Tensor[] = aten::unbind(%4906, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:129:19
              -> (%4907)
            block1():
              %4908 : Tensor = aten::nonzero(%4901) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:130:15
              %4909 : Tensor[] = aten::unbind(%4908, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:130:15
              -> (%4909)
          %inds.8 : Tensor = aten::__getitem__(%4904, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:19
          %4911 : Tensor?[] = prim::ListConstruct(%inds.8)
          %pooler_fmt_boxes_level.7 : Tensor = aten::index(%pooler_fmt_boxes.2, %4911) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:241:37
          %4913 : Tensor = aten::__getitem__(%features.3, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:46
          %4914 : int = aten::dim(%pooler_fmt_boxes_level.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4915 : bool = aten::eq(%4914, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4916 : bool = prim::If(%4915) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %4917 : int = aten::size(%pooler_fmt_boxes_level.7, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %4918 : bool = aten::eq(%4917, %40) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%4918)
            block1():
              -> (%44)
           = prim::If(%4916) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%49) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %4919 : bool = prim::is_quantized(%4913)
          %input.3 : Tensor = prim::If(%4919) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.7 : Tensor = aten::dequantize(%4913) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.7)
            block1():
              -> (%4913)
          %4922 : int = prim::dtype(%input.3)
          %4923 : Tensor = aten::to(%pooler_fmt_boxes_level.7, %4922, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %4924 : (int, int) = prim::GetAttr[name="output_size"](%4864)
          %4925 : float = prim::GetAttr[name="spatial_scale"](%4864)
          %4926 : int = prim::GetAttr[name="sampling_ratio"](%4864)
          %4927 : bool = prim::GetAttr[name="aligned"](%4864)
          %4928 : int, %4929 : int = prim::TupleUnpack(%4924)
          %4930 : int = aten::size(%4923, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
          %4931 : bool = aten::eq(%4930, %40) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
           = prim::If(%4931) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
              -> ()
          %4932 : Tensor = torchvision::roi_align(%input.3, %4923, %4925, %4928, %4929, %4926, %4927) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/roi_align.py:53:11
          %4933 : Tensor?[] = prim::ListConstruct(%inds.8)
          %4934 : Tensor = aten::index_put_(%output.4, %4933, %4932, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:12
          %4935 : Tensor = aten::eq(%level_assignments.4, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:33
          %4936 : int = aten::dim(%4935) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:128:11
          %4937 : bool = aten::eq(%4936, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:128:11
          %4938 : Tensor[] = prim::If(%4937) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:128:8
            block0():
              %4939 : Tensor = aten::unsqueeze(%4935, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:129:19
              %4940 : Tensor = aten::nonzero(%4939) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:129:19
              %4941 : Tensor[] = aten::unbind(%4940, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:129:19
              -> (%4941)
            block1():
              %4942 : Tensor = aten::nonzero(%4935) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:130:15
              %4943 : Tensor[] = aten::unbind(%4942, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:130:15
              -> (%4943)
          %inds.13 : Tensor = aten::__getitem__(%4938, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:19
          %4945 : Tensor?[] = prim::ListConstruct(%inds.13)
          %pooler_fmt_boxes_level.10 : Tensor = aten::index(%pooler_fmt_boxes.2, %4945) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:241:37
          %4947 : Tensor = aten::__getitem__(%features.3, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:46
          %4948 : int = aten::dim(%pooler_fmt_boxes_level.10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4949 : bool = aten::eq(%4948, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4950 : bool = prim::If(%4949) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %4951 : int = aten::size(%pooler_fmt_boxes_level.10, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %4952 : bool = aten::eq(%4951, %40) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%4952)
            block1():
              -> (%44)
           = prim::If(%4950) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%49) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %4953 : bool = prim::is_quantized(%4947)
          %input.8 : Tensor = prim::If(%4953) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.9 : Tensor = aten::dequantize(%4947) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.9)
            block1():
              -> (%4947)
          %4956 : int = prim::dtype(%input.8)
          %4957 : Tensor = aten::to(%pooler_fmt_boxes_level.10, %4956, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %4958 : (int, int) = prim::GetAttr[name="output_size"](%4865)
          %4959 : float = prim::GetAttr[name="spatial_scale"](%4865)
          %4960 : int = prim::GetAttr[name="sampling_ratio"](%4865)
          %4961 : bool = prim::GetAttr[name="aligned"](%4865)
          %4962 : int, %4963 : int = prim::TupleUnpack(%4958)
          %4964 : int = aten::size(%4957, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
          %4965 : bool = aten::eq(%4964, %40) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
           = prim::If(%4965) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
              -> ()
          %4966 : Tensor = torchvision::roi_align(%input.8, %4957, %4959, %4962, %4963, %4960, %4961) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/roi_align.py:53:11
          %4967 : Tensor?[] = prim::ListConstruct(%inds.13)
          %4968 : Tensor = aten::index_put_(%output.4, %4967, %4966, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:12
          %4969 : Tensor = aten::eq(%level_assignments.4, %32) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:33
          %4970 : int = aten::dim(%4969) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:128:11
          %4971 : bool = aten::eq(%4970, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:128:11
          %4972 : Tensor[] = prim::If(%4971) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:128:8
            block0():
              %4973 : Tensor = aten::unsqueeze(%4969, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:129:19
              %4974 : Tensor = aten::nonzero(%4973) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:129:19
              %4975 : Tensor[] = aten::unbind(%4974, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:129:19
              -> (%4975)
            block1():
              %4976 : Tensor = aten::nonzero(%4969) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:130:15
              %4977 : Tensor[] = aten::unbind(%4976, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:130:15
              -> (%4977)
          %inds.18 : Tensor = aten::__getitem__(%4972, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:19
          %4979 : Tensor?[] = prim::ListConstruct(%inds.18)
          %pooler_fmt_boxes_level.13 : Tensor = aten::index(%pooler_fmt_boxes.2, %4979) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:241:37
          %4981 : Tensor = aten::__getitem__(%features.3, %32) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:46
          %4982 : int = aten::dim(%pooler_fmt_boxes_level.13) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4983 : bool = aten::eq(%4982, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
          %4984 : bool = prim::If(%4983) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
            block0():
              %4985 : int = aten::size(%pooler_fmt_boxes_level.13, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              %4986 : bool = aten::eq(%4985, %40) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
              -> (%4986)
            block1():
              -> (%44)
           = prim::If(%4984) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%49) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
              -> ()
          %4987 : bool = prim::is_quantized(%4981)
          %input : Tensor = prim::If(%4987) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
            block0():
              %input.4 : Tensor = aten::dequantize(%4981) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
              -> (%input.4)
            block1():
              -> (%4981)
          %4990 : int = prim::dtype(%input)
          %4991 : Tensor = aten::to(%pooler_fmt_boxes_level.13, %4990, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
          %4992 : (int, int) = prim::GetAttr[name="output_size"](%4866)
          %4993 : float = prim::GetAttr[name="spatial_scale"](%4866)
          %4994 : int = prim::GetAttr[name="sampling_ratio"](%4866)
          %4995 : bool = prim::GetAttr[name="aligned"](%4866)
          %4996 : int, %4997 : int = prim::TupleUnpack(%4992)
          %4998 : int = aten::size(%4991, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
          %4999 : bool = aten::eq(%4998, %40) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:15
           = prim::If(%4999) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/_utils.py:33:8
              -> ()
          %5000 : Tensor = torchvision::roi_align(%input, %4991, %4993, %4996, %4997, %4994, %4995) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/roi_align.py:53:11
          %5001 : Tensor?[] = prim::ListConstruct(%inds.18)
          %5002 : Tensor = aten::index_put_(%output.4, %5001, %5000, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:12
          -> (%output.4)
      %5003 : __torch__.detectron2.modeling.roi_heads.box_head.FastRCNNConvFCHead = prim::GetAttr[name="box_head"](%4741)
      %5004 : __torch__.torch.nn.modules.linear.Linear = prim::GetAttr[name="fc1"](%5003)
      %5005 : __torch__.torch.nn.modules.linear.___torch_mangle_39.Linear = prim::GetAttr[name="fc2"](%5003)
      %x.11 : Tensor = aten::flatten(%box_features.1, %43, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/flatten.py:40:15
      %5007 : Tensor = prim::GetAttr[name="weight"](%5004)
      %5008 : Tensor = prim::GetAttr[name="bias"](%5004)
      %x.5 : Tensor = aten::linear(%x.11, %5007, %5008) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:1753:11
      %x.7 : Tensor = aten::relu(%x.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:1206:17
      %5011 : Tensor = prim::GetAttr[name="weight"](%5005)
      %5012 : Tensor = prim::GetAttr[name="bias"](%5005)
      %x.9 : Tensor = aten::linear(%x.7, %5011, %5012) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:1753:11
      %box_features.3 : Tensor = aten::relu(%x.9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:1206:17
      %5015 : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers = prim::GetAttr[name="box_predictor"](%4741)
      %5016 : int = aten::dim(%box_features.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:281:11
      %5017 : bool = aten::gt(%5016, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:281:11
      %x : Tensor = prim::If(%5017) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:281:8
        block0():
          %x.4 : Tensor = aten::flatten(%box_features.3, %43, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:282:16
          -> (%x.4)
        block1():
          -> (%box_features.3)
      %5020 : __torch__.torch.nn.modules.linear.___torch_mangle_40.Linear = prim::GetAttr[name="cls_score"](%5015)
      %5021 : Tensor = prim::GetAttr[name="weight"](%5020)
      %5022 : Tensor = prim::GetAttr[name="bias"](%5020)
      %scores.3 : Tensor = aten::linear(%x, %5021, %5022) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:1753:11
      %5024 : __torch__.torch.nn.modules.linear.___torch_mangle_41.Linear = prim::GetAttr[name="bbox_pred"](%5015)
      %5025 : Tensor = prim::GetAttr[name="weight"](%5024)
      %5026 : Tensor = prim::GetAttr[name="bias"](%5024)
      %proposal_deltas.1 : Tensor = aten::linear(%x, %5025, %5026) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:1753:11
      %predictions.1 : (Tensor, Tensor) = prim::TupleConstruct(%scores.3, %proposal_deltas.1)
      %5029 : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers = prim::GetAttr[name="box_predictor"](%4741)
      %5030 : int = aten::len(%proposals.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:457:15
      %5031 : bool = aten::Bool(%5030) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:457:15
      %5032 : bool = aten::__not__(%5031) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:457:11
      %boxes.1 : Tensor[] = prim::If(%5032) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:457:8
        block0():
          %5034 : Tensor[] = prim::ListConstruct()
          -> (%5034)
        block1():
          %5035 : Tensor, %proposal_deltas.2 : Tensor = prim::TupleUnpack(%predictions.1)
          %num_prop_per_image.2 : int[] = prim::ListConstruct()
          %5038 : int = aten::len(%proposals.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:460:29
           = prim::Loop(%5038, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:460:29
            block0(%5039 : int):
              %p.2 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %5039) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:460:29
              %5041 : int = prim::Uninitialized()
              %t.2 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%p.2)
              %5043 : bool = aten::__isnot__(%t.2, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:134:11
              %5044 : int = prim::If(%5043) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:134:8
                block0():
                  %t.5 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%t.2)
                  %5046 : Tensor = prim::GetAttr[name="tensor"](%t.5)
                  %5047 : int[] = aten::size(%5046) # <string>:7:9
                  %5048 : int = aten::__getitem__(%5047, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:238:15
                  -> (%5048)
                block1():
                  %t.11 : Tensor? = prim::GetAttr[name="_objectness_logits"](%p.2)
                  %5050 : bool = aten::__isnot__(%t.11, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:139:11
                  %5051 : int = prim::If(%5050) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:139:8
                    block0():
                      %t.14 : Tensor = prim::unchecked_cast(%t.11)
                      %5053 : int = aten::len(%t.14) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:140:19
                      -> (%5053)
                    block1():
                      %t.20 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%p.2)
                      %5055 : bool = aten::__isnot__(%t.20, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:144:11
                      %5056 : int = prim::If(%5055) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:144:8
                        block0():
                          %t.23 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%t.20)
                          %5058 : Tensor = prim::GetAttr[name="tensor"](%t.23)
                          %5059 : int[] = aten::size(%5058) # <string>:7:9
                          %5060 : int = aten::__getitem__(%5059, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:238:15
                          -> (%5060)
                        block1():
                          %t.29 : Tensor? = prim::GetAttr[name="_scores"](%p.2)
                          %5062 : bool = aten::__isnot__(%t.29, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:149:11
                          %5063 : int = prim::If(%5062) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:149:8
                            block0():
                              %t.32 : Tensor = prim::unchecked_cast(%t.29)
                              %5065 : int = aten::len(%t.32) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:150:19
                              -> (%5065)
                            block1():
                              %t.38 : Tensor? = prim::GetAttr[name="_pred_classes"](%p.2)
                              %5067 : bool = aten::__isnot__(%t.38, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:154:11
                              %5068 : int = prim::If(%5067) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:154:8
                                block0():
                                  %t.41 : Tensor = prim::unchecked_cast(%t.38)
                                  %5070 : int = aten::len(%t.41) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:155:19
                                  -> (%5070)
                                block1():
                                  %t.47 : Tensor? = prim::GetAttr[name="_pred_masks"](%p.2)
                                  %5072 : bool = aten::__isnot__(%t.47, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:159:11
                                  %5073 : int = prim::If(%5072) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:159:8
                                    block0():
                                      %t.50 : Tensor = prim::unchecked_cast(%t.47)
                                      %5075 : int = aten::len(%t.50) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:160:19
                                      -> (%5075)
                                    block1():
                                      %t.56 : Tensor? = prim::GetAttr[name="_pred_keypoints"](%p.2)
                                      %5077 : bool = aten::__isnot__(%t.56, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:164:11
                                      %5078 : int = prim::If(%5077) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:164:8
                                        block0():
                                          %t.59 : Tensor = prim::unchecked_cast(%t.56)
                                          %5080 : int = aten::len(%t.59) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:165:19
                                          -> (%5080)
                                        block1():
                                          %t.65 : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%p.2)
                                          %5082 : bool = aten::__isnot__(%t.65, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:169:11
                                          %5083 : int = prim::If(%5082) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:169:8
                                            block0():
                                              %t.69 : Tensor = prim::unchecked_cast(%t.65)
                                              %5085 : int = aten::len(%t.69) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:170:19
                                              -> (%5085)
                                            block1():
                                               = prim::RaiseException(%15) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:173:8
                                              -> (%5041)
                                          -> (%5083)
                                      -> (%5078)
                                  -> (%5073)
                              -> (%5068)
                          -> (%5063)
                      -> (%5056)
                  -> (%5051)
              %5086 : int[] = aten::append(%num_prop_per_image.2, %5044) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:460:29
              -> (%54)
          %5087 : Tensor[] = prim::ListConstruct()
          %5088 : int = aten::len(%proposals.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:461:29
           = prim::Loop(%5088, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:461:29
            block0(%5089 : int):
              %p.5 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %5089) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:461:29
              %5091 : __torch__.detectron2.structures.boxes.Boxes = prim::Uninitialized()
              %t.3 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%p.5)
              %5093 : bool = aten::__isnot__(%t.3, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:31:15
              %t : __torch__.detectron2.structures.boxes.Boxes = prim::If(%5093) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:31:8
                block0():
                  %t.6 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%t.3)
                  -> (%t.6)
                block1():
                   = prim::RaiseException(%20) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:31:8
                  -> (%5091)
              %5096 : Tensor = prim::GetAttr[name="tensor"](%t)
              %5097 : Tensor[] = aten::append(%5087, %5096) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:461:29
              -> (%54)
          %5098 : int = aten::len(%5087) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %5099 : bool = aten::eq(%5098, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:7
          %proposal_boxes.2 : Tensor = prim::If(%5099) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:43:4
            block0():
              %5101 : Tensor = aten::__getitem__(%5087, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:44:15
              -> (%5101)
            block1():
              %5102 : Tensor = aten::cat(%5087, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:45:11
              -> (%5102)
          %5103 : __torch__.detectron2.modeling.box_regression.Box2BoxTransform = prim::GetAttr[name="box2box_transform"](%5029)
          %deltas.3 : Tensor = aten::to(%proposal_deltas.2, %21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:88:17
          %5105 : int = prim::dtype(%deltas.3)
          %boxes.3 : Tensor = aten::to(%proposal_boxes.2, %5105, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:89:16
          %5107 : Tensor = aten::slice(%boxes.3, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:17
          %5108 : Tensor = aten::select(%5107, %43, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:17
          %5109 : Tensor = aten::slice(%boxes.3, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:31
          %5110 : Tensor = aten::select(%5109, %43, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:31
          %widths.1 : Tensor = aten::sub(%5108, %5110, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:91:17
          %5112 : Tensor = aten::slice(%boxes.3, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:18
          %5113 : Tensor = aten::select(%5112, %43, %32) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:18
          %5114 : Tensor = aten::slice(%boxes.3, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:32
          %5115 : Tensor = aten::select(%5114, %43, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:32
          %heights.1 : Tensor = aten::sub(%5113, %5115, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:92:18
          %5117 : Tensor = aten::slice(%boxes.3, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:93:16
          %5118 : Tensor = aten::select(%5117, %43, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:93:16
          %5119 : Tensor = aten::mul(%widths.1, %27) # <string>:3:9
          %ctr_x.1 : Tensor = aten::add(%5118, %5119, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:93:16
          %5121 : Tensor = aten::slice(%boxes.3, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:94:16
          %5122 : Tensor = aten::select(%5121, %43, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:94:16
          %5123 : Tensor = aten::mul(%heights.1, %27) # <string>:3:9
          %ctr_y.1 : Tensor = aten::add(%5122, %5123, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:94:16
          %5125 : (float, float, float, float) = prim::GetAttr[name="weights"](%5103)
          %wx.1 : float, %wy.1 : float, %ww.1 : float, %wh.1 : float = prim::TupleUnpack(%5125)
          %5130 : Tensor = aten::slice(%deltas.3, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:97:13
          %5131 : Tensor = aten::slice(%5130, %43, %48, %38, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:97:13
          %dx.1 : Tensor = aten::div(%5131, %wx.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:97:13
          %5133 : Tensor = aten::slice(%deltas.3, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:98:13
          %5134 : Tensor = aten::slice(%5133, %43, %43, %38, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:98:13
          %dy.1 : Tensor = aten::div(%5134, %wy.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:98:13
          %5136 : Tensor = aten::slice(%deltas.3, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:99:13
          %5137 : Tensor = aten::slice(%5136, %43, %46, %38, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:99:13
          %dw.1 : Tensor = aten::div(%5137, %ww.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:99:13
          %5139 : Tensor = aten::slice(%deltas.3, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:100:13
          %5140 : Tensor = aten::slice(%5139, %43, %32, %38, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:100:13
          %dh.1 : Tensor = aten::div(%5140, %wh.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:100:13
          %5142 : float = prim::GetAttr[name="scale_clamp"](%5103)
          %dw.3 : Tensor = aten::clamp(%dw.1, %53, %5142) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:103:13
          %5144 : float = prim::GetAttr[name="scale_clamp"](%5103)
          %dh.3 : Tensor = aten::clamp(%dh.1, %53, %5144) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:104:13
          %5146 : Tensor = aten::slice(%widths.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:26
          %5147 : Tensor = aten::unsqueeze(%5146, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:26
          %5148 : Tensor = aten::mul(%dx.1, %5147) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:21
          %5149 : Tensor = aten::slice(%ctr_x.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:44
          %5150 : Tensor = aten::unsqueeze(%5149, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:44
          %pred_ctr_x.1 : Tensor = aten::add(%5148, %5150, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:106:21
          %5152 : Tensor = aten::slice(%heights.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:26
          %5153 : Tensor = aten::unsqueeze(%5152, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:26
          %5154 : Tensor = aten::mul(%dy.1, %5153) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:21
          %5155 : Tensor = aten::slice(%ctr_y.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:45
          %5156 : Tensor = aten::unsqueeze(%5155, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:45
          %pred_ctr_y.1 : Tensor = aten::add(%5154, %5156, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:107:21
          %5158 : Tensor = aten::exp(%dw.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:17
          %5159 : Tensor = aten::slice(%widths.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:33
          %5160 : Tensor = aten::unsqueeze(%5159, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:33
          %pred_w.1 : Tensor = aten::mul(%5158, %5160) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:108:17
          %5162 : Tensor = aten::exp(%dh.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:17
          %5163 : Tensor = aten::slice(%heights.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:33
          %5164 : Tensor = aten::unsqueeze(%5163, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:33
          %pred_h.1 : Tensor = aten::mul(%5162, %5164) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:109:17
          %5166 : Tensor = aten::mul(%pred_w.1, %27) # <string>:3:9
          %x1.2 : Tensor = aten::sub(%pred_ctr_x.1, %5166, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:111:13
          %5168 : Tensor = aten::mul(%pred_h.1, %27) # <string>:3:9
          %y1.2 : Tensor = aten::sub(%pred_ctr_y.1, %5168, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:112:13
          %5170 : Tensor = aten::mul(%pred_w.1, %27) # <string>:3:9
          %x2.2 : Tensor = aten::add(%pred_ctr_x.1, %5170, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:113:13
          %5172 : Tensor = aten::mul(%pred_h.1, %27) # <string>:3:9
          %y2.2 : Tensor = aten::add(%pred_ctr_y.1, %5172, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:114:13
          %5174 : Tensor[] = prim::ListConstruct(%x1.2, %y1.2, %x2.2, %y2.2)
          %pred_boxes.1 : Tensor = aten::stack(%5174, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:115:21
          %5176 : int[] = aten::size(%deltas.3) # <string>:7:9
          %predict_boxes.2 : Tensor = aten::reshape(%pred_boxes.1, %5176) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/box_regression.py:116:15
          %5178 : Tensor[] = aten::split(%predict_boxes.2, %num_prop_per_image.2, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:466:15
          -> (%5178)
      %scores.1 : Tensor, %5180 : Tensor = prim::TupleUnpack(%predictions.1)
      %num_inst_per_image.1 : int[] = prim::ListConstruct()
      %5182 : int = aten::len(%proposals.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:483:29
       = prim::Loop(%5182, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:483:29
        block0(%5183 : int):
          %p.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %5183) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:483:29
          %5185 : int = prim::Uninitialized()
          %t.16 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%p.1)
          %5187 : bool = aten::__isnot__(%t.16, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:134:11
          %5188 : int = prim::If(%5187) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:134:8
            block0():
              %t.17 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%t.16)
              %5190 : Tensor = prim::GetAttr[name="tensor"](%t.17)
              %5191 : int[] = aten::size(%5190) # <string>:7:9
              %5192 : int = aten::__getitem__(%5191, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:238:15
              -> (%5192)
            block1():
              %t.18 : Tensor? = prim::GetAttr[name="_objectness_logits"](%p.1)
              %5194 : bool = aten::__isnot__(%t.18, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:139:11
              %5195 : int = prim::If(%5194) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:139:8
                block0():
                  %t.21 : Tensor = prim::unchecked_cast(%t.18)
                  %5197 : int = aten::len(%t.21) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:140:19
                  -> (%5197)
                block1():
                  %t.24 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%p.1)
                  %5199 : bool = aten::__isnot__(%t.24, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:144:11
                  %5200 : int = prim::If(%5199) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:144:8
                    block0():
                      %t.25 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%t.24)
                      %5202 : Tensor = prim::GetAttr[name="tensor"](%t.25)
                      %5203 : int[] = aten::size(%5202) # <string>:7:9
                      %5204 : int = aten::__getitem__(%5203, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:238:15
                      -> (%5204)
                    block1():
                      %t.30 : Tensor? = prim::GetAttr[name="_scores"](%p.1)
                      %5206 : bool = aten::__isnot__(%t.30, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:149:11
                      %5207 : int = prim::If(%5206) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:149:8
                        block0():
                          %t.33 : Tensor = prim::unchecked_cast(%t.30)
                          %5209 : int = aten::len(%t.33) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:150:19
                          -> (%5209)
                        block1():
                          %t.39 : Tensor? = prim::GetAttr[name="_pred_classes"](%p.1)
                          %5211 : bool = aten::__isnot__(%t.39, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:154:11
                          %5212 : int = prim::If(%5211) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:154:8
                            block0():
                              %t.42 : Tensor = prim::unchecked_cast(%t.39)
                              %5214 : int = aten::len(%t.42) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:155:19
                              -> (%5214)
                            block1():
                              %t.48 : Tensor? = prim::GetAttr[name="_pred_masks"](%p.1)
                              %5216 : bool = aten::__isnot__(%t.48, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:159:11
                              %5217 : int = prim::If(%5216) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:159:8
                                block0():
                                  %t.51 : Tensor = prim::unchecked_cast(%t.48)
                                  %5219 : int = aten::len(%t.51) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:160:19
                                  -> (%5219)
                                block1():
                                  %t.57 : Tensor? = prim::GetAttr[name="_pred_keypoints"](%p.1)
                                  %5221 : bool = aten::__isnot__(%t.57, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:164:11
                                  %5222 : int = prim::If(%5221) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:164:8
                                    block0():
                                      %t.60 : Tensor = prim::unchecked_cast(%t.57)
                                      %5224 : int = aten::len(%t.60) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:165:19
                                      -> (%5224)
                                    block1():
                                      %t.66 : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%p.1)
                                      %5226 : bool = aten::__isnot__(%t.66, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:169:11
                                      %5227 : int = prim::If(%5226) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:169:8
                                        block0():
                                          %t.68 : Tensor = prim::unchecked_cast(%t.66)
                                          %5229 : int = aten::len(%t.68) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:170:19
                                          -> (%5229)
                                        block1():
                                           = prim::RaiseException(%15) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:173:8
                                          -> (%5185)
                                      -> (%5227)
                                  -> (%5222)
                              -> (%5217)
                          -> (%5212)
                      -> (%5207)
                  -> (%5200)
              -> (%5195)
          %5230 : int[] = aten::append(%num_inst_per_image.1, %5188) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:483:29
          -> (%54)
      %ret.2 : Tensor = aten::softmax(%scores.1, %51, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/functional.py:1583:14
      %scores.2 : Tensor[] = aten::split(%ret.2, %num_inst_per_image.1, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:485:15
      %image_shapes.1 : (int, int)[] = prim::ListConstruct()
      %5234 : int = aten::len(%proposals.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:397:23
       = prim::Loop(%5234, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:397:23
        block0(%5235 : int):
          %x.2 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %5235) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:397:23
          %5237 : (int, int) = prim::GetAttr[name="image_size"](%x.2)
          %5238 : (int, int)[] = aten::append(%image_shapes.1, %5237) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:397:23
          -> (%54)
      %5239 : float = prim::GetAttr[name="test_score_thresh"](%5029)
      %5240 : float = prim::GetAttr[name="test_nms_thresh"](%5029)
      %5241 : int = prim::GetAttr[name="test_topk_per_image"](%5029)
      %result_per_image.1 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor)[] = prim::ListConstruct()
      %5243 : int = aten::len(%scores.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:87:23
      %5244 : int = aten::len(%boxes.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:87:23
      %5245 : int = aten::len(%image_shapes.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:87:23
      %5246 : int[] = prim::ListConstruct(%5243, %5244, %5245)
      %5247 : int = prim::min(%5246) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:87:23
       = prim::Loop(%5247, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:87:23
        block0(%5248 : int):
          %scores_per_image.1 : Tensor = aten::__getitem__(%scores.2, %5248) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:87:23
          %boxes_per_image.1 : Tensor = aten::__getitem__(%boxes.1, %5248) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:87:23
          %image_shape.1 : (int, int) = aten::__getitem__(%image_shapes.1, %5248) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:87:23
          %5252 : Tensor = aten::isfinite(%boxes_per_image.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:145:17
          %5253 : Tensor = aten::all(%5252, %43, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:145:17
          %5254 : Tensor = aten::isfinite(%scores_per_image.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:145:52
          %5255 : Tensor = aten::all(%5254, %43, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:145:52
          %valid_mask.1 : Tensor = aten::__and__(%5253, %5255) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:145:17
          %5257 : Tensor = aten::all(%valid_mask.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:146:11
          %5258 : bool = aten::Bool(%5257) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:146:11
          %5259 : bool = aten::__not__(%5258) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:146:7
          %scores : Tensor, %boxes.29 : Tensor = prim::If(%5259) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:146:4
            block0():
              %5262 : Tensor?[] = prim::ListConstruct(%valid_mask.1)
              %boxes.4 : Tensor = aten::index(%boxes_per_image.1, %5262) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:147:16
              %5264 : Tensor?[] = prim::ListConstruct(%valid_mask.1)
              %scores.4 : Tensor = aten::index(%scores_per_image.1, %5264) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:148:17
              -> (%scores.4, %boxes.4)
            block1():
              -> (%scores_per_image.1, %boxes_per_image.1)
          %5266 : Tensor = aten::slice(%scores, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:150:13
          %scores.10 : Tensor = aten::slice(%5266, %43, %48, %51, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:150:13
          %5268 : int[] = aten::size(%boxes.29) # <string>:7:9
          %5269 : int = aten::__getitem__(%5268, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:151:27
          %num_bbox_reg_classes.1 : int = aten::floordiv(%5269, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:151:27
          %5271 : int[] = prim::ListConstruct(%51, %52)
          %5272 : Tensor = aten::reshape(%boxes.29, %5271) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:153:18
          %boxes.11 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
          %device.2 : Device = prim::device(%5272)
          %tensor.21 : Tensor = aten::as_tensor(%5272, %21, %device.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:148:17
          %5276 : int = aten::numel(%tensor.21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
          %5277 : bool = aten::eq(%5276, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
          %tensor.22 : Tensor = prim::If(%5277) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:8
            block0():
              %5279 : int[] = prim::ListConstruct(%51, %52)
              %5280 : Tensor = aten::reshape(%tensor.21, %5279) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
              %tensor.23 : Tensor = aten::to(%5280, %device.2, %21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
              -> (%tensor.23)
            block1():
              -> (%tensor.21)
          %5282 : int = aten::dim(%tensor.22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
          %5283 : bool = aten::eq(%5282, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
          %5284 : bool = prim::If(%5283) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
            block0():
              %5285 : int = aten::size(%tensor.22, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
              %5286 : bool = aten::eq(%5285, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
              -> (%5286)
            block1():
              -> (%44)
           = prim::If(%5284) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
            block0():
              -> ()
            block1():
              %5287 : int[] = aten::size(%tensor.22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:59
              %5288 : str = aten::str(%5287) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
              %5289 : str = aten::add(%49, %5288) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
               = prim::RaiseException(%5289) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
              -> ()
           = prim::SetAttr[name="tensor"](%boxes.11, %tensor.22)
          %5290 : Tensor = prim::GetAttr[name="tensor"](%boxes.11)
          %5291 : Tensor = aten::isfinite(%5290) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:189:15
          %5292 : Tensor = aten::all(%5291) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:189:15
          %5293 : bool = aten::Bool(%5292) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:189:15
           = prim::If(%5293) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:189:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:189:8
              -> ()
          %h.1 : int, %w.1 : int = prim::TupleUnpack(%image_shape.1)
          %5296 : Tensor = prim::GetAttr[name="tensor"](%boxes.11)
          %5297 : Tensor = aten::slice(%5296, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:13
          %5298 : Tensor = aten::select(%5297, %43, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:13
          %x1.1 : Tensor = aten::clamp(%5298, %48, %w.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:191:13
          %5300 : Tensor = prim::GetAttr[name="tensor"](%boxes.11)
          %5301 : Tensor = aten::slice(%5300, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:192:13
          %5302 : Tensor = aten::select(%5301, %43, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:192:13
          %y1.1 : Tensor = aten::clamp(%5302, %48, %h.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:192:13
          %5304 : Tensor = prim::GetAttr[name="tensor"](%boxes.11)
          %5305 : Tensor = aten::slice(%5304, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:193:13
          %5306 : Tensor = aten::select(%5305, %43, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:193:13
          %x2.1 : Tensor = aten::clamp(%5306, %48, %w.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:193:13
          %5308 : Tensor = prim::GetAttr[name="tensor"](%boxes.11)
          %5309 : Tensor = aten::slice(%5308, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:194:13
          %5310 : Tensor = aten::select(%5309, %43, %32) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:194:13
          %y2.1 : Tensor = aten::clamp(%5310, %48, %h.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:194:13
          %5312 : Tensor[] = prim::ListConstruct(%x1.1, %y1.1, %x2.1, %y2.1)
          %5313 : Tensor = aten::stack(%5312, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:195:22
           = prim::SetAttr[name="tensor"](%boxes.11, %5313)
          %5314 : Tensor = prim::GetAttr[name="tensor"](%boxes.11)
          %5315 : int[] = prim::ListConstruct(%51, %num_bbox_reg_classes.1, %52)
          %boxes.14 : Tensor = aten::view(%5314, %5315) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:155:12
          %filter_mask.1 : Tensor = aten::gt(%scores.10, %5239) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:159:18
          %filter_inds.1 : Tensor = aten::nonzero(%filter_mask.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:162:18
          %5319 : bool = aten::eq(%num_bbox_reg_classes.1, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:163:7
          %boxes : Tensor = prim::If(%5319) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:163:4
            block0():
              %5321 : Tensor = aten::slice(%filter_inds.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:164:22
              %5322 : Tensor = aten::select(%5321, %43, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:164:22
              %5323 : Tensor = aten::select(%boxes.14, %43, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:164:16
              %5324 : Tensor?[] = prim::ListConstruct(%5322)
              %boxes.16 : Tensor = aten::index(%5323, %5324) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:164:16
              -> (%boxes.16)
            block1():
              %5326 : Tensor?[] = prim::ListConstruct(%filter_mask.1)
              %boxes.19 : Tensor = aten::index(%boxes.14, %5326) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:166:16
              -> (%boxes.19)
          %5328 : Tensor?[] = prim::ListConstruct(%filter_mask.1)
          %scores.13 : Tensor = aten::index(%scores.10, %5328) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:167:13
          %5330 : Tensor = aten::slice(%filter_inds.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:170:38
          %5331 : Tensor = aten::select(%5330, %43, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:170:38
          %5332 : int[] = aten::size(%boxes) # <string>:7:9
          %5333 : int = aten::__getitem__(%5332, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:16:11
          %5334 : bool = aten::eq(%5333, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:16:11
           = prim::If(%5334) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:16:4
            block0():
              -> ()
            block1():
               = prim::RaiseException(%49) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:16:4
              -> ()
          %5335 : int = aten::len(%boxes) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:19:7
          %5336 : bool = aten::lt(%5335, %24) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:19:7
          %keep.4 : Tensor = prim::If(%5336) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:19:4
            block0():
              %5338 : Tensor = aten::to(%boxes, %21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:21:35
              %5339 : int = aten::numel(%5338) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:65:7
              %5340 : bool = aten::eq(%5339, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:65:7
              %5341 : Tensor = prim::If(%5340) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:65:4
                block0():
                  %5342 : Device = prim::device(%5338)
                  %5343 : int[] = prim::ListConstruct(%48)
                  %5344 : Tensor = aten::empty(%5343, %52, %53, %5342, %53, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:66:15
                  -> (%5344)
                block1():
                  %max_coordinate.1 : Tensor = aten::max(%5338) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:25
                  %5346 : Tensor = aten::to(%5331, %5338, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:73:18
                  %5347 : Tensor = aten::tensor(%43, %53, %53, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:73:53
                  %5348 : Tensor = aten::to(%5347, %5338, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:73:53
                  %5349 : Tensor = aten::add(%max_coordinate.1, %5348, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:73:36
                  %offsets.1 : Tensor = aten::mul(%5346, %5349) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:73:18
                  %5351 : Tensor = aten::slice(%offsets.1, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:74:32
                  %5352 : Tensor = aten::unsqueeze(%5351, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:74:32
                  %boxes_for_nms.1 : Tensor = aten::add(%5338, %5352, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:74:24
                  %keep.1 : Tensor = torchvision::nms(%boxes_for_nms.1, %scores.13, %5240) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:36:11
                  -> (%keep.1)
              -> (%5341)
            block1():
              %5355 : int[] = aten::size(%scores.13) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:23:35
              %result_mask.2 : Tensor = aten::new_zeros(%scores.13, %5355, %25, %53, %53, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:23:18
              %output.2 : Tensor, %inverse_indices.2 : Tensor, %counts.2 : Tensor = aten::_unique2(%5331, %54, %44, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/functional.py:745:42
              %5360 : (Tensor, Tensor, Tensor) = prim::TupleConstruct(%output.2, %inverse_indices.2, %counts.2)
              %output.3 : Tensor, %5362 : Tensor, %5363 : Tensor = prim::TupleUnpack(%5360)
              %5364 : Tensor = aten::cpu(%output.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:24:44
              %5365 : int[] = prim::tolist(%5364, %43, %48)
              %5366 : int = aten::len(%5365) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:24:4
               = prim::Loop(%5366, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:24:4
                block0(%5367 : int):
                  %id.2 : int = aten::__getitem__(%5365, %5367) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:24:4
                  %5369 : Tensor = aten::eq(%5331, %id.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:25:16
                  %5370 : Tensor = aten::nonzero(%5369) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:25:16
                  %5371 : int[] = prim::ListConstruct(%51)
                  %mask.2 : Tensor = aten::view(%5370, %5371) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:25:16
                  %5373 : Tensor?[] = prim::ListConstruct(%mask.2)
                  %5374 : Tensor = aten::index(%boxes, %5373) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:26:19
                  %5375 : Tensor?[] = prim::ListConstruct(%mask.2)
                  %5376 : Tensor = aten::index(%scores.13, %5375) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:26:32
                  %keep.2 : Tensor = torchvision::nms(%5374, %5376, %5240) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torchvision/ops/boxes.py:36:11
                  %5378 : Tensor?[] = prim::ListConstruct(%keep.2)
                  %5379 : Tensor = aten::index(%mask.2, %5378) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:27:20
                  %5380 : int = prim::dtype(%result_mask.2)
                  %5381 : Device = prim::device(%result_mask.2)
                  %5382 : Tensor = aten::tensor(%54, %5380, %5381, %44)
                  %5383 : Tensor?[] = prim::ListConstruct(%5379)
                  %5384 : Tensor = aten::index_put_(%result_mask.2, %5383, %5382, %44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:27:8
                  -> (%54)
              %5385 : Tensor = aten::nonzero(%result_mask.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:28:11
              %5386 : int[] = prim::ListConstruct(%51)
              %keep.9 : Tensor = aten::view(%5385, %5386) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:28:11
              %5388 : Tensor?[] = prim::ListConstruct(%keep.9)
              %5389 : Tensor = aten::index(%scores.13, %5388) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:29:16
              %5390 : Tensor = aten::argsort(%5389, %51, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:29:16
              %5391 : Tensor?[] = prim::ListConstruct(%5390)
              %keep.20 : Tensor = aten::index(%keep.9, %5391) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/nms.py:29:11
              -> (%keep.20)
          %5393 : bool = aten::ge(%5241, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:171:7
          %keep : Tensor = prim::If(%5393) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:171:4
            block0():
              %keep.3 : Tensor = aten::slice(%keep.4, %48, %48, %5241, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:172:15
              -> (%keep.3)
            block1():
              -> (%keep.4)
          %5396 : Tensor?[] = prim::ListConstruct(%keep)
          %boxes.27 : Tensor = aten::index(%boxes, %5396) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:173:33
          %5398 : Tensor?[] = prim::ListConstruct(%keep)
          %scores.16 : Tensor = aten::index(%scores.13, %5398) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:173:46
          %5400 : Tensor?[] = prim::ListConstruct(%keep)
          %filter_inds.6 : Tensor = aten::index(%filter_inds.1, %5400) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:173:60
          %result.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = prim::CreateObject()
           = prim::SetAttr[name="image_size"](%result.1, %image_shape.1)
           = prim::SetAttr[name="_field_names"](%result.1, %26)
           = prim::SetAttr[name="_proposal_boxes"](%result.1, %53)
           = prim::SetAttr[name="_objectness_logits"](%result.1, %53)
           = prim::SetAttr[name="_pred_boxes"](%result.1, %53)
           = prim::SetAttr[name="_scores"](%result.1, %53)
           = prim::SetAttr[name="_pred_classes"](%result.1, %53)
           = prim::SetAttr[name="_pred_masks"](%result.1, %53)
           = prim::SetAttr[name="_pred_keypoints"](%result.1, %53)
           = prim::SetAttr[name="_pred_keypoint_heatmaps"](%result.1, %53)
          %5403 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
          %device.11 : Device = prim::device(%boxes.27)
          %tensor.24 : Tensor = aten::as_tensor(%boxes.27, %21, %device.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:148:17
          %5406 : int = aten::numel(%tensor.24) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
          %5407 : bool = aten::eq(%5406, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
          %tensor.25 : Tensor = prim::If(%5407) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:8
            block0():
              %5409 : int[] = prim::ListConstruct(%51, %52)
              %5410 : Tensor = aten::reshape(%tensor.24, %5409) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
              %tensor.26 : Tensor = aten::to(%5410, %device.11, %21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
              -> (%tensor.26)
            block1():
              -> (%tensor.24)
          %5412 : int = aten::dim(%tensor.25) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
          %5413 : bool = aten::eq(%5412, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
          %5414 : bool = prim::If(%5413) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
            block0():
              %5415 : int = aten::size(%tensor.25, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
              %5416 : bool = aten::eq(%5415, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
              -> (%5416)
            block1():
              -> (%44)
           = prim::If(%5414) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
            block0():
              -> ()
            block1():
              %5417 : int[] = aten::size(%tensor.25) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:59
              %5418 : str = aten::str(%5417) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
              %5419 : str = aten::add(%49, %5418) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
               = prim::RaiseException(%5419) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
              -> ()
           = prim::SetAttr[name="tensor"](%5403, %tensor.25)
           = prim::SetAttr[name="_pred_boxes"](%result.1, %5403)
           = prim::SetAttr[name="_scores"](%result.1, %scores.16)
          %5420 : Tensor = aten::slice(%filter_inds.6, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:178:26
          %5421 : Tensor = aten::select(%5420, %43, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:178:26
           = prim::SetAttr[name="_pred_classes"](%result.1, %5421)
          %5422 : Tensor = aten::slice(%filter_inds.6, %48, %48, %38, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:179:19
          %5423 : Tensor = aten::select(%5422, %43, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:179:19
          %5424 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor) = prim::TupleConstruct(%result.1, %5423)
          %5425 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor)[] = aten::append(%result_per_image.1, %5424) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:87:23
          -> (%54)
      %5426 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::ListConstruct()
      %5427 : int = aten::len(%result_per_image.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:93:11
       = prim::Loop(%5427, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:93:11
        block0(%5428 : int):
          %x.1 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor) = aten::__getitem__(%result_per_image.1, %5428) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:93:11
          %5430 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = prim::TupleIndex(%x.1, %48)
          %5431 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = aten::append(%5426, %5430) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:93:11
          -> (%54)
      %5432 : Tensor[] = prim::ListConstruct()
      %5433 : int = aten::len(%result_per_image.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:93:45
       = prim::Loop(%5433, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:93:45
        block0(%5434 : int):
          %x.3 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor) = aten::__getitem__(%result_per_image.1, %5434) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:93:45
          %5436 : Tensor = prim::TupleIndex(%x.3, %43)
          %5437 : Tensor[] = aten::append(%5432, %5436) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:93:45
          -> (%54)
      %5438 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Tensor[]) = prim::TupleConstruct(%5426, %5432)
      %pred_instances.3 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], %5440 : Tensor[] = prim::TupleUnpack(%5438)
      %5441 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%pred_instances.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:15
      %5442 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%5441)
      %5443 : bool = aten::__isnot__(%5442, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:188:19
      %5444 : bool = prim::If(%5443) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:15
        block0():
          %5445 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%pred_instances.3, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:50
          %5446 : Tensor? = prim::GetAttr[name="_pred_classes"](%5445)
          %5447 : bool = aten::__isnot__(%5446, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:196:19
          -> (%5447)
        block1():
          -> (%44)
       = prim::If(%5444) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:8
        block0():
          -> ()
        block1():
           = prim::RaiseException(%49) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:8
          -> ()
      %5448 : Dict(str, Tensor) = prim::DictConstruct()
      %5449 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Dict(str, Tensor)) = prim::TupleConstruct(%pred_instances.3, %5448)
      %results.3 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], %5451 : Dict(str, Tensor) = prim::TupleUnpack(%5449)
      -> (%results.3)
    block1():
      %detected_instances.4 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::unchecked_cast(%3)
      %results.2 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::ListConstruct()
      %5454 : int = aten::len(%detected_instances.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:211:33
       = prim::Loop(%5454, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:211:33
        block0(%5455 : int):
          %x.118 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%detected_instances.4, %5455) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:211:33
          %5457 : Tensor = prim::GetAttr[name="pixel_mean"](%5)
          %5458 : Device = prim::device(%5457)
          %5459 : (int, int) = prim::GetAttr[name="image_size"](%x.118)
          %ret.3 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = prim::CreateObject()
           = prim::SetAttr[name="image_size"](%ret.3, %5459)
           = prim::SetAttr[name="_field_names"](%ret.3, %26)
           = prim::SetAttr[name="_proposal_boxes"](%ret.3, %53)
           = prim::SetAttr[name="_objectness_logits"](%ret.3, %53)
           = prim::SetAttr[name="_pred_boxes"](%ret.3, %53)
           = prim::SetAttr[name="_scores"](%ret.3, %53)
           = prim::SetAttr[name="_pred_classes"](%ret.3, %53)
           = prim::SetAttr[name="_pred_masks"](%ret.3, %53)
           = prim::SetAttr[name="_pred_keypoints"](%ret.3, %53)
           = prim::SetAttr[name="_pred_keypoint_heatmaps"](%ret.3, %53)
          %t.26 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%x.118)
          %5462 : bool = aten::__isnot__(%t.26, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:219:11
           = prim::If(%5462) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:219:8
            block0():
              %t.27 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%t.26)
              %5464 : Tensor = prim::GetAttr[name="tensor"](%t.27)
              %5465 : Tensor = aten::to(%5464, %53, %53, %5458, %53, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:168:21
              %5466 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
              %device.3 : Device = prim::device(%5465)
              %tensor.6 : Tensor = aten::as_tensor(%5465, %21, %device.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:148:17
              %5469 : int = aten::numel(%tensor.6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
              %5470 : bool = aten::eq(%5469, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
              %tensor.1 : Tensor = prim::If(%5470) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:8
                block0():
                  %5472 : int[] = prim::ListConstruct(%51, %52)
                  %5473 : Tensor = aten::reshape(%tensor.6, %5472) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
                  %tensor.9 : Tensor = aten::to(%5473, %device.3, %21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
                  -> (%tensor.9)
                block1():
                  -> (%tensor.6)
              %5475 : int = aten::dim(%tensor.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
              %5476 : bool = aten::eq(%5475, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
              %5477 : bool = prim::If(%5476) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
                block0():
                  %5478 : int = aten::size(%tensor.1, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
                  %5479 : bool = aten::eq(%5478, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
                  -> (%5479)
                block1():
                  -> (%44)
               = prim::If(%5477) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                block0():
                  -> ()
                block1():
                  %5480 : int[] = aten::size(%tensor.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:59
                  %5481 : str = aten::str(%5480) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                  %5482 : str = aten::add(%49, %5481) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                   = prim::RaiseException(%5482) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                  -> ()
               = prim::SetAttr[name="tensor"](%5466, %tensor.1)
               = prim::SetAttr[name="_proposal_boxes"](%ret.3, %5466)
              -> ()
            block1():
              -> ()
          %t.34 : Tensor? = prim::GetAttr[name="_objectness_logits"](%x.118)
          %5484 : bool = aten::__isnot__(%t.34, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:224:11
           = prim::If(%5484) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:224:8
            block0():
              %t.35 : Tensor = prim::unchecked_cast(%t.34)
              %5486 : Tensor = aten::to(%t.35, %5458, %53, %44, %44) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:225:37
               = prim::SetAttr[name="_objectness_logits"](%ret.3, %5486)
              -> ()
            block1():
              -> ()
          %t.36 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%x.118)
          %5488 : bool = aten::__isnot__(%t.36, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:229:11
           = prim::If(%5488) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:229:8
            block0():
              %t.43 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%t.36)
              %5490 : Tensor = prim::GetAttr[name="tensor"](%t.43)
              %5491 : Tensor = aten::to(%5490, %53, %53, %5458, %53, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:168:21
              %5492 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
              %device.1 : Device = prim::device(%5491)
              %tensor.5 : Tensor = aten::as_tensor(%5491, %21, %device.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:148:17
              %5495 : int = aten::numel(%tensor.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
              %5496 : bool = aten::eq(%5495, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:11
              %tensor : Tensor = prim::If(%5496) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:149:8
                block0():
                  %5498 : int[] = prim::ListConstruct(%51, %52)
                  %5499 : Tensor = aten::reshape(%tensor.5, %5498) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
                  %tensor.8 : Tensor = aten::to(%5499, %device.1, %21, %44, %44, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:152:21
                  -> (%tensor.8)
                block1():
                  -> (%tensor.5)
              %5501 : int = aten::dim(%tensor) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
              %5502 : bool = aten::eq(%5501, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
              %5503 : bool = prim::If(%5502) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:15
                block0():
                  %5504 : int = aten::size(%tensor, %51) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
                  %5505 : bool = aten::eq(%5504, %52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:37
                  -> (%5505)
                block1():
                  -> (%44)
               = prim::If(%5503) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                block0():
                  -> ()
                block1():
                  %5506 : int[] = aten::size(%tensor) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:59
                  %5507 : str = aten::str(%5506) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                  %5508 : str = aten::add(%49, %5507) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                   = prim::RaiseException(%5508) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/structures/boxes.py:153:8
                  -> ()
               = prim::SetAttr[name="tensor"](%5492, %tensor)
               = prim::SetAttr[name="_pred_boxes"](%ret.3, %5492)
              -> ()
            block1():
              -> ()
          %t.44 : Tensor? = prim::GetAttr[name="_scores"](%x.118)
          %5510 : bool = aten::__isnot__(%t.44, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:234:11
           = prim::If(%5510) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:234:8
            block0():
              %t.45 : Tensor = prim::unchecked_cast(%t.44)
              %5512 : Tensor = aten::to(%t.45, %5458, %53, %44, %44) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:235:26
               = prim::SetAttr[name="_scores"](%ret.3, %5512)
              -> ()
            block1():
              -> ()
          %t.52 : Tensor? = prim::GetAttr[name="_pred_classes"](%x.118)
          %5514 : bool = aten::__isnot__(%t.52, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:239:11
           = prim::If(%5514) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:239:8
            block0():
              %t.53 : Tensor = prim::unchecked_cast(%t.52)
              %5516 : Tensor = aten::to(%t.53, %5458, %53, %44, %44) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:240:32
               = prim::SetAttr[name="_pred_classes"](%ret.3, %5516)
              -> ()
            block1():
              -> ()
          %t.54 : Tensor? = prim::GetAttr[name="_pred_masks"](%x.118)
          %5518 : bool = aten::__isnot__(%t.54, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:244:11
           = prim::If(%5518) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:244:8
            block0():
              %t.61 : Tensor = prim::unchecked_cast(%t.54)
              %5520 : Tensor = aten::to(%t.61, %5458, %53, %44, %44) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:245:30
               = prim::SetAttr[name="_pred_masks"](%ret.3, %5520)
              -> ()
            block1():
              -> ()
          %t.62 : Tensor? = prim::GetAttr[name="_pred_keypoints"](%x.118)
          %5522 : bool = aten::__isnot__(%t.62, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:249:11
           = prim::If(%5522) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:249:8
            block0():
              %t.63 : Tensor = prim::unchecked_cast(%t.62)
              %5524 : Tensor = aten::to(%t.63, %5458, %53, %44, %44) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:250:34
               = prim::SetAttr[name="_pred_keypoints"](%ret.3, %5524)
              -> ()
            block1():
              -> ()
          %t.70 : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%x.118)
          %5526 : bool = aten::__isnot__(%t.70, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:254:11
           = prim::If(%5526) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:254:8
            block0():
              %t.71 : Tensor = prim::unchecked_cast(%t.70)
              %5528 : Tensor = aten::to(%t.71, %5458, %53, %44, %44) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:255:42
               = prim::SetAttr[name="_pred_keypoint_heatmaps"](%ret.3, %5528)
              -> ()
            block1():
              -> ()
          %5529 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = aten::append(%results.2, %ret.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:211:33
          -> (%54)
      %5530 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%results.2, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:15
      %5531 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%5530)
      %5532 : bool = aten::__isnot__(%5531, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:188:19
      %5533 : bool = prim::If(%5532) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:15
        block0():
          %5534 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%results.2, %48) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:50
          %5535 : Tensor? = prim::GetAttr[name="_pred_classes"](%5534)
          %5536 : bool = aten::__isnot__(%5535, %53) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:196:19
          -> (%5536)
        block1():
          -> (%44)
       = prim::If(%5533) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:8
        block0():
          -> ()
        block1():
           = prim::RaiseException(%49) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:8
          -> ()
      -> (%results.2)
  %instances.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::If(%4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:214:8
    block0():
       = prim::RaiseException(%55) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:215:12
      -> (%56)
    block1():
      -> (%results)
  %9 : Dict(str, Tensor)[] = prim::ListConstruct()
  %10 : int = aten::len(%instances.1) # src/export_model.py:86:23
   = prim::Loop(%10, %2) # src/export_model.py:86:23
    block0(%11 : int):
      %i.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%instances.1, %11) # src/export_model.py:86:23
      %5538 : None = prim::Constant() # /tmp/detectron2vmennprg/tmp68ws7m9z.py:391:20
      %5539 : str = prim::Constant[value="proposal_boxes"]() # /tmp/detectron2vmennprg/tmp68ws7m9z.py:392:16
      %5540 : str = prim::Constant[value="objectness_logits"]() # /tmp/detectron2vmennprg/tmp68ws7m9z.py:397:16
      %5541 : str = prim::Constant[value="pred_boxes"]() # /tmp/detectron2vmennprg/tmp68ws7m9z.py:402:16
      %5542 : str = prim::Constant[value="scores"]() # /tmp/detectron2vmennprg/tmp68ws7m9z.py:407:16
      %5543 : str = prim::Constant[value="pred_classes"]() # /tmp/detectron2vmennprg/tmp68ws7m9z.py:412:16
      %5544 : str = prim::Constant[value="pred_masks"]() # /tmp/detectron2vmennprg/tmp68ws7m9z.py:417:16
      %5545 : str = prim::Constant[value="pred_keypoints"]() # /tmp/detectron2vmennprg/tmp68ws7m9z.py:422:16
      %5546 : str = prim::Constant[value="pred_keypoint_heatmaps"]() # /tmp/detectron2vmennprg/tmp68ws7m9z.py:427:16
      %ret.1 : Dict(str, Tensor) = prim::DictConstruct()
      %t.1 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%i.1)
      %5549 : bool = aten::__isnot__(%t.1, %5538) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:391:11
       = prim::If(%5549) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:391:8
        block0():
          %t.4 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%t.1)
          %5551 : Tensor = prim::GetAttr[name="tensor"](%t.4)
           = aten::_set_item(%ret.1, %5539, %5551) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:392:12
          -> ()
        block1():
          -> ()
      %t.10 : Tensor? = prim::GetAttr[name="_objectness_logits"](%i.1)
      %5553 : bool = aten::__isnot__(%t.10, %5538) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:396:11
       = prim::If(%5553) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:396:8
        block0():
          %t.13 : Tensor = prim::unchecked_cast(%t.10)
           = aten::_set_item(%ret.1, %5540, %t.13) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:397:12
          -> ()
        block1():
          -> ()
      %t.19 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%i.1)
      %5556 : bool = aten::__isnot__(%t.19, %5538) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:401:11
       = prim::If(%5556) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:401:8
        block0():
          %t.22 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%t.19)
          %5558 : Tensor = prim::GetAttr[name="tensor"](%t.22)
           = aten::_set_item(%ret.1, %5541, %5558) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:402:12
          -> ()
        block1():
          -> ()
      %t.28 : Tensor? = prim::GetAttr[name="_scores"](%i.1)
      %5560 : bool = aten::__isnot__(%t.28, %5538) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:406:11
       = prim::If(%5560) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:406:8
        block0():
          %t.31 : Tensor = prim::unchecked_cast(%t.28)
           = aten::_set_item(%ret.1, %5542, %t.31) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:407:12
          -> ()
        block1():
          -> ()
      %t.37 : Tensor? = prim::GetAttr[name="_pred_classes"](%i.1)
      %5563 : bool = aten::__isnot__(%t.37, %5538) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:411:11
       = prim::If(%5563) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:411:8
        block0():
          %t.40 : Tensor = prim::unchecked_cast(%t.37)
           = aten::_set_item(%ret.1, %5543, %t.40) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:412:12
          -> ()
        block1():
          -> ()
      %t.46 : Tensor? = prim::GetAttr[name="_pred_masks"](%i.1)
      %5566 : bool = aten::__isnot__(%t.46, %5538) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:416:11
       = prim::If(%5566) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:416:8
        block0():
          %t.49 : Tensor = prim::unchecked_cast(%t.46)
           = aten::_set_item(%ret.1, %5544, %t.49) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:417:12
          -> ()
        block1():
          -> ()
      %t.55 : Tensor? = prim::GetAttr[name="_pred_keypoints"](%i.1)
      %5569 : bool = aten::__isnot__(%t.55, %5538) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:421:11
       = prim::If(%5569) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:421:8
        block0():
          %t.58 : Tensor = prim::unchecked_cast(%t.55)
           = aten::_set_item(%ret.1, %5545, %t.58) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:422:12
          -> ()
        block1():
          -> ()
      %t.64 : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%i.1)
      %5572 : bool = aten::__isnot__(%t.64, %5538) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:426:11
       = prim::If(%5572) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:426:8
        block0():
          %t.67 : Tensor = prim::unchecked_cast(%t.64)
           = aten::_set_item(%ret.1, %5546, %t.67) # /tmp/detectron2vmennprg/tmp68ws7m9z.py:427:12
          -> ()
        block1():
          -> ()
      %14 : Dict(str, Tensor)[] = aten::append(%9, %ret.1) # src/export_model.py:86:23
      -> (%2)
  return (%9)
