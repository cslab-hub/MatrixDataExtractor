module __torch__.ScriptableAdapter {
  parameters {
  }
  attributes {
    _is_full_backward_hook = None
    model = <__torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN object at 0x56163ae73cd0>
  }
  methods {
    method forward {
      graph(%self : __torch__.ScriptableAdapter,
            %inputs.1 : (Dict(str, Tensor))):
        %12 : bool = prim::Constant[value=1]() # src/export_model.py:86:23
        %7 : None = prim::Constant()
        %4 : bool = prim::Constant[value=0]() # src/export_model.py:85:72
        %2 : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN = prim::GetAttr[name="model"](%self)
        %5 : Dict(str, Tensor) = prim::TupleUnpack(%inputs.1)
        %6 : Dict(str, Tensor)[] = prim::ListConstruct(%5)
        %instances.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::CallMethod[name="inference"](%2, %6, %7, %4) # src/export_model.py:85:28
        %9 : Dict(str, Tensor)[] = prim::ListConstruct()
        %11 : int = aten::len(%instances.1) # src/export_model.py:86:23
         = prim::Loop(%11, %12) # src/export_model.py:86:23
          block0(%13 : int):
            %i.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%instances.1, %13) # src/export_model.py:86:23
            %16 : Dict(str, Tensor) = prim::CallMethod[name="get_fields"](%i.1) # src/export_model.py:86:24
            %17 : Dict(str, Tensor)[] = aten::append(%9, %16) # src/export_model.py:86:23
            -> (%12)
        return (%9)
  
    }
  }
  submodules {
    module __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN {
      parameters {
      }
      attributes {
        pixel_mean = ...
        pixel_std = ...
        _is_full_backward_hook = None
        input_format = BGR
        vis_period = 0
        backbone = <__torch__.detectron2.modeling.backbone.fpn.FPN object at 0x56163af16c00>
        proposal_generator = <__torch__.detectron2.modeling.proposal_generator.rpn.RPN object at 0x56163e2ba360>
        roi_heads = <__torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads object at 0x56163b44bb10>
      }
      methods {
        method __device_getter {
          graph(%self : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN):
            %1 : Tensor = prim::GetAttr[name="pixel_mean"](%self)
            %2 : Device = prim::device(%1)
            return (%2)
      
        }
        method forward {
          graph(%self : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN,
                %batched_inputs.1 : Dict(str, Tensor)[]):
            %8 : bool = prim::Constant[value=1]()
            %7 : None = prim::Constant()
            %9 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::CallMethod[name="inference"](%self, %batched_inputs.1, %7, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:146:19
            return (%9)
      
        }
        method inference {
          graph(%self : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN,
                %batched_inputs.1 : Dict(str, Tensor)[],
                %detected_instances.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[]?,
                %do_postprocess.1 : bool):
            %86 : str = prim::Constant[value="AssertionError: Scripting is not supported for postprocess."]()
            %41 : bool = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:211:33
            %15 : None = prim::Constant() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:202:33
            %84 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::Uninitialized()
            %images.1 : __torch__.detectron2.structures.image_list.ImageList = prim::CallMethod[name="preprocess_image"](%self, %batched_inputs.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:199:17
            %10 : __torch__.detectron2.modeling.backbone.fpn.FPN = prim::GetAttr[name="backbone"](%self)
            %12 : Tensor = prim::GetAttr[name="tensor"](%images.1)
            %features.1 : Dict(str, Tensor) = prim::CallMethod[name="forward"](%10, %12) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:200:19
            %16 : bool = aten::__is__(%detected_instances.1, %15) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:202:11
            %results : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::If(%16) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:202:8
              block0():
                %20 : __torch__.detectron2.modeling.proposal_generator.rpn.RPN = prim::GetAttr[name="proposal_generator"](%self)
                %24 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Dict(str, Tensor)) = prim::CallMethod[name="forward"](%20, %images.1, %features.1, %15) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:204:31
                %proposals.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], %26 : Dict(str, Tensor) = prim::TupleUnpack(%24)
                %27 : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads = prim::GetAttr[name="roi_heads"](%self)
                %32 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Dict(str, Tensor)) = prim::CallMethod[name="forward"](%27, %images.1, %features.1, %proposals.1, %15) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:209:25
                %results.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], %34 : Dict(str, Tensor) = prim::TupleUnpack(%32)
                -> (%results.1)
              block1():
                %detected_instances.4 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::unchecked_cast(%detected_instances.1)
                %detected_instances.7 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::ListConstruct()
                %40 : int = aten::len(%detected_instances.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:211:33
                 = prim::Loop(%40, %41) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:211:33
                  block0(%42 : int):
                    %x.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%detected_instances.4, %42) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:211:33
                    %45 : Device = prim::CallMethod[name="__device_getter"](%self) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:211:39
                    %46 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = prim::CallMethod[name="to"](%x.1, %45) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:211:34
                    %47 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = aten::append(%detected_instances.7, %46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:211:33
                    -> (%41)
                %49 : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads = prim::GetAttr[name="roi_heads"](%self)
                %results.2 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::CallMethod[name="forward_with_given_boxes"](%49, %features.1, %detected_instances.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:212:22
                -> (%results.2)
            %85 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::If(%do_postprocess.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:214:8
              block0():
                 = prim::RaiseException(%86) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:215:12
                -> (%84)
              block1():
                -> (%results)
            return (%85)
      
        }
        method preprocess_image {
          graph(%self : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN,
                %batched_inputs.1 : Dict(str, Tensor)[]):
            %42 : Function = prim::Constant[name="from_tensors"]()
            %41 : float = prim::Constant[value=0.]()
            %33 : int = prim::Constant[value=1]()
            %21 : bool = prim::Constant[value=0]()
            %20 : None = prim::Constant()
            %10 : str = prim::Constant[value="image"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:20
            %6 : bool = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:17
            %images.1 : Tensor[] = prim::ListConstruct()
            %5 : int = aten::len(%batched_inputs.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:17
             = prim::Loop(%5, %6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:17
              block0(%7 : int):
                %x.1 : Dict(str, Tensor) = aten::__getitem__(%batched_inputs.1, %7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:17
                %11 : Tensor = aten::__getitem__(%x.1, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:18
                %12 : Device = prim::CallMethod[name="__device_getter"](%self) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:32
                %23 : Tensor = aten::to(%11, %12, %20, %21, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:18
                %24 : Tensor[] = aten::append(%images.1, %23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:224:17
                -> (%6)
            %images.3 : Tensor[] = prim::ListConstruct()
            %27 : int = aten::len(%images.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:225:17
             = prim::Loop(%27, %6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:225:17
              block0(%29 : int):
                %x.3 : Tensor = aten::__getitem__(%images.1, %29) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:225:17
                %32 : Tensor = prim::GetAttr[name="pixel_mean"](%self)
                %34 : Tensor = aten::sub(%x.3, %32, %33) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:225:19
                %35 : Tensor = prim::GetAttr[name="pixel_std"](%self)
                %36 : Tensor = aten::div(%34, %35) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:225:19
                %37 : Tensor[] = aten::append(%images.3, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:225:17
                -> (%6)
            %39 : __torch__.detectron2.modeling.backbone.fpn.FPN = prim::GetAttr[name="backbone"](%self)
            %40 : int = prim::CallMethod[name="__size_divisibility_getter"](%39) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:226:48
            %images.5 : __torch__.detectron2.structures.image_list.ImageList = prim::CallFunction(%42, %images.3, %40, %41) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/meta_arch/rcnn.py:226:17
            return (%images.5)
      
        }
      }
      submodules {
            module __torch__.detectron2.modeling.backbone.fpn.FPN {
              parameters {
              }
              attributes {
                _is_full_backward_hook = None
                in_features = (res2, res3, res4, res5)
                _out_feature_strides = {p2: 4, p3: 8, p4: 16, p5: 32, p6: 64}
                _out_features = [p2, p3, p4, p5, p6]
                _out_feature_channels = {p2: 256, p3: 256, p4: 256, p5: 256, p6: 256}
                _size_divisibility = 32
                top_block = <__torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool object at 0x56163b16fac0>
                bottom_up = <__torch__.detectron2.modeling.backbone.resnet.ResNet object at 0x56163ccbcc20>
                lateral_convs = <__torch__.torch.nn.modules.container.___torch_mangle_33.ModuleList object at 0x56163b1e8ab0>
                output_convs = <__torch__.torch.nn.modules.container.___torch_mangle_35.ModuleList object at 0x56163b198800>
              }
              methods {
                method __size_divisibility_getter {
                  graph(%self : __torch__.detectron2.modeling.backbone.fpn.FPN):
                    %1 : int = prim::GetAttr[name="_size_divisibility"](%self)
                    return (%1)
              
                }
                method forward {
                  graph(%self : __torch__.detectron2.modeling.backbone.fpn.FPN,
                        %x.1 : Tensor):
                    %282 : bool = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
                    %339 : str = prim::Constant[value="AssertionError: "]()
                    %337 : int = prim::Constant[value=-4]()
                    %333 : int = prim::Constant[value=-3]()
                    %129 : int = prim::Constant[value=1]()
                    %123 : Function = prim::Constant[name="interpolate"]()
                    %120 : None = prim::Constant()
                    %117 : str = prim::Constant[value="nearest"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:140:88
                    %329 : int = prim::Constant[value=-2]()
                    %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:128:82
                    %idx.1 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:128:43
                    %71 : float = prim::Constant[value=2.]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:140:78
                    %3 : __torch__.detectron2.modeling.backbone.resnet.ResNet = prim::GetAttr[name="bottom_up"](%self)
                    %bottom_up_features.1 : Dict(str, Tensor) = prim::CallMethod[name="forward"](%3, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:126:29
                    %results.1 : Tensor[] = prim::ListConstruct()
                    %7 : __torch__.torch.nn.modules.container.___torch_mangle_33.ModuleList = prim::GetAttr[name="lateral_convs"](%self)
                    %10 : __torch__.detectron2.layers.wrappers.___torch_mangle_29.Conv2d = prim::GetAttr[name="0"](%7)
                    %18 : (str, str, str, str) = prim::GetAttr[name="in_features"](%self)
                    %22 : str = prim::TupleIndex(%18, %21)
                    %23 : Tensor = aten::__getitem__(%bottom_up_features.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:128:46
                    %prev_features.1 : Tensor = prim::CallMethod[name="forward"](%10, %23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:128:24
                    %26 : __torch__.torch.nn.modules.container.___torch_mangle_35.ModuleList = prim::GetAttr[name="output_convs"](%self)
                    %28 : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d = prim::GetAttr[name="0"](%26)
                    %36 : Tensor = prim::CallMethod[name="forward"](%28, %prev_features.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:129:23
                    %37 : Tensor[] = aten::append(%results.1, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:129:8
                    %39 : __torch__.torch.nn.modules.container.___torch_mangle_33.ModuleList = prim::GetAttr[name="lateral_convs"](%self)
                    %43 : __torch__.detectron2.layers.wrappers.___torch_mangle_30.Conv2d = prim::GetAttr[name="1"](%39)
                    %45 : __torch__.detectron2.layers.wrappers.___torch_mangle_31.Conv2d = prim::GetAttr[name="2"](%39)
                    %47 : __torch__.detectron2.layers.wrappers.___torch_mangle_32.Conv2d = prim::GetAttr[name="3"](%39)
                    %48 : __torch__.torch.nn.modules.container.___torch_mangle_35.ModuleList = prim::GetAttr[name="output_convs"](%self)
                    %52 : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d = prim::GetAttr[name="1"](%48)
                    %54 : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d = prim::GetAttr[name="2"](%48)
                    %56 : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d = prim::GetAttr[name="3"](%48)
                    %108 : (str, str, str, str) = prim::GetAttr[name="in_features"](%self)
                    %features.5 : str = prim::TupleIndex(%108, %329)
                    %features.7 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:139:27
                    %top_down_features.3 : Tensor = prim::CallFunction(%123, %prev_features.1, %120, %71, %117, %120, %120) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:140:36
                    %lateral_features.3 : Tensor = prim::CallMethod[name="forward"](%43, %features.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:141:35
                    %prev_features.17 : Tensor = aten::add(%lateral_features.3, %top_down_features.3, %129) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:142:32
                    %144 : Tensor = prim::CallMethod[name="forward"](%52, %prev_features.17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:145:34
                     = aten::insert(%results.1, %idx.1, %144) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:145:16
                    %152 : (str, str, str, str) = prim::GetAttr[name="in_features"](%self)
                    %features.9 : str = prim::TupleIndex(%152, %333)
                    %features.11 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:139:27
                    %top_down_features.5 : Tensor = prim::CallFunction(%123, %prev_features.17, %120, %71, %117, %120, %120) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:140:36
                    %lateral_features.5 : Tensor = prim::CallMethod[name="forward"](%45, %features.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:141:35
                    %prev_features.30 : Tensor = aten::add(%lateral_features.5, %top_down_features.5, %129) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:142:32
                    %188 : Tensor = prim::CallMethod[name="forward"](%54, %prev_features.30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:145:34
                     = aten::insert(%results.1, %idx.1, %188) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:145:16
                    %197 : (str, str, str, str) = prim::GetAttr[name="in_features"](%self)
                    %features.13 : str = prim::TupleIndex(%197, %337)
                    %features.15 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.13) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:139:27
                    %top_down_features.7 : Tensor = prim::CallFunction(%123, %prev_features.30, %120, %71, %117, %120, %120) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:140:36
                    %lateral_features.7 : Tensor = prim::CallMethod[name="forward"](%47, %features.15) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:141:35
                    %prev_features.43 : Tensor = aten::add(%lateral_features.7, %top_down_features.7, %129) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:142:32
                    %233 : Tensor = prim::CallMethod[name="forward"](%56, %prev_features.43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:145:34
                     = aten::insert(%results.1, %idx.1, %233) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:145:16
                    %241 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%self)
                    %242 : str = prim::GetAttr[name="in_feature"](%241)
                    %244 : bool = aten::__contains__(%bottom_up_features.1, %242) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:148:15
                    %top_block_in_feature : Tensor = prim::If(%244) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:148:12
                      block0():
                        %247 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%self)
                        %248 : str = prim::GetAttr[name="in_feature"](%247)
                        %top_block_in_feature.1 : Tensor = aten::__getitem__(%bottom_up_features.1, %248) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:149:39
                        -> (%top_block_in_feature.1)
                      block1():
                        %251 : str[] = prim::GetAttr[name="_out_features"](%self)
                        %252 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%self)
                        %253 : str = prim::GetAttr[name="in_feature"](%252)
                        %254 : int = aten::index(%251, %253) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:151:47
                        %top_block_in_feature.2 : Tensor = aten::__getitem__(%results.1, %254) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:151:39
                        -> (%top_block_in_feature.2)
                    %261 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%self)
                    %263 : Tensor[] = prim::CallMethod[name="forward"](%261, %top_block_in_feature) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:152:27
                     = aten::extend(%results.1, %263) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:152:12
                    %265 : str[] = prim::GetAttr[name="_out_features"](%self)
                    %266 : int = aten::len(%265) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:153:15
                    %268 : int = aten::len(%results.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:153:42
                    %269 : bool = aten::eq(%266, %268) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:153:15
                     = prim::If(%269) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:153:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%339) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:153:8
                        -> ()
                    %275 : Dict(str, Tensor) = prim::DictConstruct()
                    %276 : str[] = prim::GetAttr[name="_out_features"](%self)
                    %278 : int = aten::len(%276) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
                    %279 : int = aten::len(%results.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
                    %280 : int[] = prim::ListConstruct(%278, %279)
                    %281 : int = prim::min(%280) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
                     = prim::Loop(%281, %282) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
                      block0(%283 : int):
                        %f.1 : str = aten::__getitem__(%276, %283) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
                        %res.1 : Tensor = aten::__getitem__(%results.1, %283) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
                         = aten::_set_item(%275, %f.1, %res.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:154:15
                        -> (%282)
                    return (%275)
              
                }
              }
              submodules {
                        module __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            num_levels = 1
                            in_feature = p5
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool,
                                    %x.1 : Tensor):
                                %13 : Function = prim::Constant[name="_max_pool2d"]()
                                %11 : bool = prim::Constant[value=0]()
                                %3 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:187:44
                                %4 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:187:54
                                %5 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:187:65
                                %6 : int[] = prim::ListConstruct(%3, %3)
                                %7 : int[] = prim::ListConstruct(%4, %4)
                                %8 : int[] = prim::ListConstruct(%5, %5)
                                %10 : int[] = prim::ListConstruct(%3, %3)
                                %14 : Tensor = prim::CallFunction(%13, %x.1, %6, %7, %8, %10, %11, %11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/fpn.py:187:16
                                %15 : Tensor[] = prim::ListConstruct(%14)
                                return (%15)
                          
                            }
                          }
                          submodules {
                          }
                        }
                        module __torch__.detectron2.modeling.backbone.resnet.ResNet {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            num_classes = None
                            _out_feature_strides = {stem: 4, res2: 4, res3: 8, res4: 16, res5: 32}
                            _out_feature_channels = {stem: 64, res2: 256, res3: 512, res4: 1024, res5: 2048}
                            stage_names = (res2, res3, res4, res5)
                            _out_features = [res2, res3, res4, res5]
                            stem = <__torch__.detectron2.modeling.backbone.resnet.BasicStem object at 0x56163aefad30>
                            stages = <__torch__.torch.nn.modules.container.ModuleList object at 0x56163af121e0>
                          }
                          methods {
                            method __size_divisibility_getter {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.ResNet):
                                %2 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/backbone.py:40:15
                                return (%2)
                          
                            }
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.ResNet,
                                    %x.1 : Tensor):
                                %19 : str = prim::Constant[value="stem"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:446:11
                                %12 : str = prim::Constant[value="AssertionError: "]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:8
                                %8 : str = prim::Constant[value="ResNet takes an input of shape (N, C, H, W). Got {} instead!"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:29
                                %5 : int = prim::Constant[value=4]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:26
                                %4 : int = aten::dim(%x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:15
                                %6 : bool = aten::eq(%4, %5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:15
                                 = prim::If(%6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:8
                                  block0():
                                    -> ()
                                  block1():
                                    %10 : int[] = aten::size(%x.1) # <string>:7:9
                                    %11 : str = aten::format(%8, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:29
                                    %13 : str = aten::add(%12, %11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:8
                                     = prim::RaiseException(%13) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:443:8
                                    -> ()
                                %outputs.1 : Dict(str, Tensor) = prim::DictConstruct()
                                %16 : __torch__.detectron2.modeling.backbone.resnet.BasicStem = prim::GetAttr[name="stem"](%self)
                                %x.5 : Tensor = prim::CallMethod[name="forward"](%16, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:445:12
                                %20 : str[] = prim::GetAttr[name="_out_features"](%self)
                                %21 : bool = aten::__contains__(%20, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:446:11
                                 = prim::If(%21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:446:8
                                  block0():
                                     = aten::_set_item(%outputs.1, %19, %x.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:447:12
                                    -> ()
                                  block1():
                                    -> ()
                                %27 : (str, str, str, str) = prim::GetAttr[name="stage_names"](%self)
                                %name.1 : str, %name.4 : str, %name.7 : str, %name.10 : str = prim::TupleUnpack(%27)
                                %32 : __torch__.torch.nn.modules.container.ModuleList = prim::GetAttr[name="stages"](%self)
                                %34 : __torch__.torch.nn.modules.container.Sequential = prim::GetAttr[name="0"](%32)
                                %36 : __torch__.torch.nn.modules.container.___torch_mangle_12.Sequential = prim::GetAttr[name="1"](%32)
                                %38 : __torch__.torch.nn.modules.container.___torch_mangle_20.Sequential = prim::GetAttr[name="2"](%32)
                                %40 : __torch__.torch.nn.modules.container.___torch_mangle_28.Sequential = prim::GetAttr[name="3"](%32)
                                %x.8 : Tensor = prim::CallMethod[name="forward"](%34, %x.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:449:16
                                %45 : str[] = prim::GetAttr[name="_out_features"](%self)
                                %46 : bool = aten::__contains__(%45, %name.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:15
                                 = prim::If(%46) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:12
                                  block0():
                                     = aten::_set_item(%outputs.1, %name.1, %x.8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:451:16
                                    -> ()
                                  block1():
                                    -> ()
                                %x.11 : Tensor = prim::CallMethod[name="forward"](%36, %x.8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:449:16
                                %56 : str[] = prim::GetAttr[name="_out_features"](%self)
                                %57 : bool = aten::__contains__(%56, %name.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:15
                                 = prim::If(%57) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:12
                                  block0():
                                     = aten::_set_item(%outputs.1, %name.4, %x.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:451:16
                                    -> ()
                                  block1():
                                    -> ()
                                %x.14 : Tensor = prim::CallMethod[name="forward"](%38, %x.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:449:16
                                %67 : str[] = prim::GetAttr[name="_out_features"](%self)
                                %68 : bool = aten::__contains__(%67, %name.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:15
                                 = prim::If(%68) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:12
                                  block0():
                                     = aten::_set_item(%outputs.1, %name.7, %x.14) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:451:16
                                    -> ()
                                  block1():
                                    -> ()
                                %x.17 : Tensor = prim::CallMethod[name="forward"](%40, %x.14) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:449:16
                                %78 : str[] = prim::GetAttr[name="_out_features"](%self)
                                %79 : bool = aten::__contains__(%78, %name.10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:15
                                 = prim::If(%79) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:450:12
                                  block0():
                                     = aten::_set_item(%outputs.1, %name.10, %x.17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:451:16
                                    -> ()
                                  block1():
                                    -> ()
                                return (%outputs.1)
                          
                            }
                          }
                          submodules {
                                        module __torch__.detectron2.modeling.backbone.resnet.BasicStem {
                                          parameters {
                                          }
                                          attributes {
                                            _is_full_backward_hook = None
                                            in_channels = 3
                                            out_channels = 64
                                            stride = 4
                                            conv1 = <__torch__.detectron2.layers.wrappers.Conv2d object at 0x56163e25ecb0>
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.detectron2.modeling.backbone.resnet.BasicStem,
                                                    %x.1 : Tensor):
                                                %18 : Function = prim::Constant[name="_max_pool2d"]()
                                                %16 : bool = prim::Constant[value=0]()
                                                %8 : int = prim::Constant[value=3]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:358:40
                                                %9 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:358:50
                                                %10 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:358:61
                                                %2 : __torch__.detectron2.layers.wrappers.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                %x.3 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:356:12
                                                %x.5 : Tensor = aten::relu_(%x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:357:12
                                                %11 : int[] = prim::ListConstruct(%8, %8)
                                                %12 : int[] = prim::ListConstruct(%9, %9)
                                                %13 : int[] = prim::ListConstruct(%10, %10)
                                                %15 : int[] = prim::ListConstruct(%10, %10)
                                                %x.7 : Tensor = prim::CallFunction(%18, %x.5, %11, %12, %13, %15, %16, %16) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:358:12
                                                return (%x.7)
                                          
                                            }
                                          }
                                          submodules {
                                                            module __torch__.detectron2.layers.wrappers.Conv2d {
                                                              parameters {
                                                                weight = ...
                                                              }
                                                              attributes {
                                                                weight = ...
                                                                bias = None
                                                                training = False
                                                                _is_full_backward_hook = None
                                                                transposed = False
                                                                _reversed_padding_repeated_twice = (3, 3, 3, 3)
                                                                activation = None
                                                                norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163cec5ac0>
                                                              }
                                                              methods {
                                                                method forward {
                                                                  graph(%self : __torch__.detectron2.layers.wrappers.Conv2d,
                                                                        %x.1 : Tensor):
                                                                    %14 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:66
                                                                    %11 : int = prim::Constant[value=3]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                    %8 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                    %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                    %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                    %18 : int[] = prim::ListConstruct(%8, %8)
                                                                    %19 : int[] = prim::ListConstruct(%11, %11)
                                                                    %20 : int[] = prim::ListConstruct(%14, %14)
                                                                    %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %14) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                    %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                    %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                    return (%x.5)
                                                              
                                                                }
                                                              }
                                                              submodules {
                                                                                    module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        weight = ...
                                                                                        bias = ...
                                                                                        running_mean = ...
                                                                                        running_var = ...
                                                                                        _is_full_backward_hook = None
                                                                                        num_features = 64
                                                                                        eps = 1.0000000000000001e-05
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                %x.1 : Tensor):
                                                                                            %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                            %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                            %36 : None = prim::Constant()
                                                                                            %34 : bool = prim::Constant[value=0]()
                                                                                            %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                            %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                            %3 : bool = prim::requires_grad(%x.1)
                                                                                            %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                              block0():
                                                                                                %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                -> (%46)
                                                                                              block1():
                                                                                                %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                -> (%56)
                                                                                            return (%65)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                      }
                                                                                    }
                                                              }
                                                            }
                                          }
                                        }
                                        module __torch__.torch.nn.modules.container.ModuleList {
                                          parameters {
                                          }
                                          attributes {
                                            _is_full_backward_hook = None
                                            0 = <__torch__.torch.nn.modules.container.Sequential object at 0x56163b179ba0>
                                            1 = <__torch__.torch.nn.modules.container.___torch_mangle_12.Sequential object at 0x56163c298f80>
                                            2 = <__torch__.torch.nn.modules.container.___torch_mangle_20.Sequential object at 0x56163b181f90>
                                            3 = <__torch__.torch.nn.modules.container.___torch_mangle_28.Sequential object at 0x56163c6a4930>
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.torch.nn.modules.container.ModuleList):
                                                %1 : str = prim::Constant[value=""]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:234:14
                                                %8 : None = prim::Uninitialized()
                                                 = prim::RaiseException(%1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:234:8
                                                return (%8)
                                          
                                            }
                                            method __len__ {
                                              graph(%self : __torch__.torch.nn.modules.container.ModuleList):
                                                %1 : int = prim::Constant[value=4]() # <string>:2:10
                                                return (%1)
                                          
                                            }
                                          }
                                          submodules {
                                                            module __torch__.torch.nn.modules.container.Sequential {
                                                              parameters {
                                                              }
                                                              attributes {
                                                                _is_full_backward_hook = None
                                                                0 = <__torch__.detectron2.modeling.backbone.resnet.BottleneckBlock object at 0x56163ae84cf0>
                                                                1 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_4.BottleneckBlock object at 0x56163aeba9d0>
                                                                2 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_4.BottleneckBlock object at 0x56163e252740>
                                                              }
                                                              methods {
                                                                method forward {
                                                                  graph(%self : __torch__.torch.nn.modules.container.Sequential,
                                                                        %input.1 : Tensor):
                                                                    %3 : __torch__.detectron2.modeling.backbone.resnet.BottleneckBlock = prim::GetAttr[name="0"](%self)
                                                                    %5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_4.BottleneckBlock = prim::GetAttr[name="1"](%self)
                                                                    %7 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_4.BottleneckBlock = prim::GetAttr[name="2"](%self)
                                                                    %input.3 : Tensor = prim::CallMethod[name="forward"](%3, %input.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.5 : Tensor = prim::CallMethod[name="forward"](%5, %input.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.7 : Tensor = prim::CallMethod[name="forward"](%7, %input.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    return (%input.7)
                                                              
                                                                }
                                                                method __len__ {
                                                                  graph(%self : __torch__.torch.nn.modules.container.Sequential):
                                                                    %1 : int = prim::Constant[value=3]() # <string>:2:10
                                                                    return (%1)
                                                              
                                                                }
                                                              }
                                                              submodules {
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 64
                                                                                        out_channels = 256
                                                                                        stride = 1
                                                                                        shortcut = <__torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d object at 0x56163df05620>
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d object at 0x56163d1d1880>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d object at 0x56163d8ec060>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d object at 0x56163d4ddd90>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %23 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %18 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d = prim::GetAttr[name="shortcut"](%self)
                                                                                            %shortcut.1 : Tensor = prim::CallMethod[name="forward"](%18, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:204:23
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %shortcut.1, %23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163e21b8a0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163e307770>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 64
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163aef91e0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 64
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163aecd8e0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_4.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 256
                                                                                        out_channels = 256
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d object at 0x56163c8ac080>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d object at 0x56163dcfc130>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d object at 0x56163cab7830>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_4.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163c6a79c0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 64
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163cab7670>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 64
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1b29e0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_4.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 256
                                                                                        out_channels = 256
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d object at 0x56163c7a9480>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d object at 0x56163dcfd340>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d object at 0x56163b1a1f00>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_4.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163ea39ec0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 64
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163c298890>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 64
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163ae908e0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                              }
                                                            }
                                                            module __torch__.torch.nn.modules.container.___torch_mangle_12.Sequential {
                                                              parameters {
                                                              }
                                                              attributes {
                                                                _is_full_backward_hook = None
                                                                0 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_9.BottleneckBlock object at 0x56163e10ead0>
                                                                1 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock object at 0x56163ae89550>
                                                                2 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock object at 0x56163ae79ee0>
                                                                3 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock object at 0x56163b17e570>
                                                              }
                                                              methods {
                                                                method forward {
                                                                  graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_12.Sequential,
                                                                        %input.1 : Tensor):
                                                                    %3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_9.BottleneckBlock = prim::GetAttr[name="0"](%self)
                                                                    %5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock = prim::GetAttr[name="1"](%self)
                                                                    %7 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock = prim::GetAttr[name="2"](%self)
                                                                    %9 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock = prim::GetAttr[name="3"](%self)
                                                                    %input.3 : Tensor = prim::CallMethod[name="forward"](%3, %input.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.5 : Tensor = prim::CallMethod[name="forward"](%5, %input.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.7 : Tensor = prim::CallMethod[name="forward"](%7, %input.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.9 : Tensor = prim::CallMethod[name="forward"](%9, %input.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    return (%input.9)
                                                              
                                                                }
                                                                method __len__ {
                                                                  graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_12.Sequential):
                                                                    %1 : int = prim::Constant[value=4]() # <string>:2:10
                                                                    return (%1)
                                                              
                                                                }
                                                              }
                                                              submodules {
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_9.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 256
                                                                                        out_channels = 512
                                                                                        stride = 2
                                                                                        shortcut = <__torch__.detectron2.layers.wrappers.___torch_mangle_5.Conv2d object at 0x56163af0fde0>
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_6.Conv2d object at 0x56163ae89a30>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d object at 0x56163ae8d640>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d object at 0x56163ae8f280>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_9.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %23 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_6.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %18 : __torch__.detectron2.layers.wrappers.___torch_mangle_5.Conv2d = prim::GetAttr[name="shortcut"](%self)
                                                                                            %shortcut.1 : Tensor = prim::CallMethod[name="forward"](%18, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:204:23
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %shortcut.1, %23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_5.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163e4085c0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_5.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %14 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:66
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%14, %14)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %14) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 512
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_6.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163e2526e0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_6.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %14 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:66
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%14, %14)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %14) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 128
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163af0ffb0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 128
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163aefe760>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 512
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 512
                                                                                        out_channels = 512
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d object at 0x56163c8aec00>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d object at 0x56163b870020>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d object at 0x56163be84de0>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b180c30>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 128
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b185610>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 128
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163aec27d0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 512
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 512
                                                                                        out_channels = 512
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d object at 0x56163b1821f0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d object at 0x56163b1a2040>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d object at 0x56163b190470>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163c298eb0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 128
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163c298830>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 128
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b181a30>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 512
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 512
                                                                                        out_channels = 512
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d object at 0x56163bc7e8b0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d object at 0x56163af09090>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d object at 0x56163b1814d0>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b192f00>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 128
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b172680>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 128
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b17ec70>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 512
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                              }
                                                            }
                                                            module __torch__.torch.nn.modules.container.___torch_mangle_20.Sequential {
                                                              parameters {
                                                              }
                                                              attributes {
                                                                _is_full_backward_hook = None
                                                                0 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_17.BottleneckBlock object at 0x56163b18bbf0>
                                                                1 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1bd8e0>
                                                                2 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1ca010>
                                                                3 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1c68b0>
                                                                4 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1966f0>
                                                                5 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1bf7b0>
                                                                6 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163aec8030>
                                                                7 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1c5560>
                                                                8 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1ccf90>
                                                                9 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b17df90>
                                                                10 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163c6a5030>
                                                                11 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1d1000>
                                                                12 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1d36d0>
                                                                13 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b18b910>
                                                                14 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1ced00>
                                                                15 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1e3700>
                                                                16 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1ee5e0>
                                                                17 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1e0e70>
                                                                18 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1cd6e0>
                                                                19 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b39be80>
                                                                20 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b194630>
                                                                21 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b1d4cb0>
                                                                22 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock object at 0x56163b3a7c20>
                                                              }
                                                              methods {
                                                                method forward {
                                                                  graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_20.Sequential,
                                                                        %input.1 : Tensor):
                                                                    %3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_17.BottleneckBlock = prim::GetAttr[name="0"](%self)
                                                                    %5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="1"](%self)
                                                                    %7 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="2"](%self)
                                                                    %9 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="3"](%self)
                                                                    %11 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="4"](%self)
                                                                    %13 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="5"](%self)
                                                                    %15 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="6"](%self)
                                                                    %17 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="7"](%self)
                                                                    %19 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="8"](%self)
                                                                    %21 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="9"](%self)
                                                                    %23 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="10"](%self)
                                                                    %25 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="11"](%self)
                                                                    %27 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="12"](%self)
                                                                    %29 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="13"](%self)
                                                                    %31 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="14"](%self)
                                                                    %33 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="15"](%self)
                                                                    %35 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="16"](%self)
                                                                    %37 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="17"](%self)
                                                                    %39 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="18"](%self)
                                                                    %41 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="19"](%self)
                                                                    %43 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="20"](%self)
                                                                    %45 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="21"](%self)
                                                                    %47 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="22"](%self)
                                                                    %input.3 : Tensor = prim::CallMethod[name="forward"](%3, %input.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.5 : Tensor = prim::CallMethod[name="forward"](%5, %input.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.7 : Tensor = prim::CallMethod[name="forward"](%7, %input.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.9 : Tensor = prim::CallMethod[name="forward"](%9, %input.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.11 : Tensor = prim::CallMethod[name="forward"](%11, %input.9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.13 : Tensor = prim::CallMethod[name="forward"](%13, %input.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.15 : Tensor = prim::CallMethod[name="forward"](%15, %input.13) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.17 : Tensor = prim::CallMethod[name="forward"](%17, %input.15) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.19 : Tensor = prim::CallMethod[name="forward"](%19, %input.17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.21 : Tensor = prim::CallMethod[name="forward"](%21, %input.19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.23 : Tensor = prim::CallMethod[name="forward"](%23, %input.21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.25 : Tensor = prim::CallMethod[name="forward"](%25, %input.23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.27 : Tensor = prim::CallMethod[name="forward"](%27, %input.25) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.29 : Tensor = prim::CallMethod[name="forward"](%29, %input.27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.31 : Tensor = prim::CallMethod[name="forward"](%31, %input.29) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.33 : Tensor = prim::CallMethod[name="forward"](%33, %input.31) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.35 : Tensor = prim::CallMethod[name="forward"](%35, %input.33) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.37 : Tensor = prim::CallMethod[name="forward"](%37, %input.35) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.39 : Tensor = prim::CallMethod[name="forward"](%39, %input.37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.41 : Tensor = prim::CallMethod[name="forward"](%41, %input.39) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.43 : Tensor = prim::CallMethod[name="forward"](%43, %input.41) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.45 : Tensor = prim::CallMethod[name="forward"](%45, %input.43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.47 : Tensor = prim::CallMethod[name="forward"](%47, %input.45) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    return (%input.47)
                                                              
                                                                }
                                                                method __len__ {
                                                                  graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_20.Sequential):
                                                                    %1 : int = prim::Constant[value=23]() # <string>:2:10
                                                                    return (%1)
                                                              
                                                                }
                                                              }
                                                              submodules {
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_17.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 512
                                                                                        out_channels = 1024
                                                                                        stride = 2
                                                                                        shortcut = <__torch__.detectron2.layers.wrappers.___torch_mangle_13.Conv2d object at 0x56163b18d040>
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_14.Conv2d object at 0x56163ae926b0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b194800>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b17dea0>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_17.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %23 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_14.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %18 : __torch__.detectron2.layers.wrappers.___torch_mangle_13.Conv2d = prim::GetAttr[name="shortcut"](%self)
                                                                                            %shortcut.1 : Tensor = prim::CallMethod[name="forward"](%18, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:204:23
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %shortcut.1, %23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_13.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b18de00>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_13.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %14 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:66
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%14, %14)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %14) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_14.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163e307ba0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_14.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %14 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:66
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%14, %14)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %14) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1b5670>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163af054e0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b193950>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163e218840>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1bc520>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1bbb60>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1c6f10>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1cc680>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b18fc90>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b19c110>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1cbaa0>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163c4a0de0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1d16e0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163c8aae80>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1c8850>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1d0280>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1d0220>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163c6a4e10>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1d81b0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1d3550>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1d29b0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1d5c20>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1da830>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1d1080>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163aec0830>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1dc700>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1ced80>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1b50c0>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1d24d0>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163e218a10>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1da7d0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1c82f0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1d78e0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1cf760>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1cddc0>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1da5e0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1d4590>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1d31c0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1d61f0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163d2d5a80>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1cbe10>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1cb840>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1c6240>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1d9650>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b19c070>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1c6a10>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1d6940>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1d68e0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1d4820>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163d8ee9b0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1d49e0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1b8670>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1bb440>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1cf700>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1d99f0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1cda30>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1c00a0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1cea90>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1d67b0>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1e9300>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163af05480>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1de0c0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1f14d0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1d8560>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1d5370>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1e9970>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1c0c40>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1930a0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1ed5a0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1bb970>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1a86c0>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b464580>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b19c570>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1cdbd0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b39d130>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163aec95b0>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163aec0790>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1e3990>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b18b450>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1d5e90>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1e7c90>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1e77a0>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1c0f00>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1efec0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1e7480>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1ce510>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1e5cd0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163ae92730>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b3a32b0>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163d2d59e0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1c5820>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b198000>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163d0cb250>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1855b0>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1d4b70>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b19c6a0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163c8af1d0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1ddcf0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b3a14a0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b39fa60>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1dc9b0>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1d72e0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b187cc0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1b40a0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1e1eb0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1d48a0>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1974c0>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1e54b0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b3996a0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1eab70>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1d83a0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b3a6b20>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1c4590>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1ec770>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1e0000>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b3a5b60>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b3a66a0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1bb700>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1c9400>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1d3ec0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b3b2f30>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b3b6eb0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1dff00>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1e9780>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1ebf60>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b192f80>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b3a7b70>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1c3c10>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 1024
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d object at 0x56163b1eac30>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x56163b1de4e0>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d object at 0x56163b1ddc70>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b39ddf0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b3aa010>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 256
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163ae2dc40>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 1024
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                              }
                                                            }
                                                            module __torch__.torch.nn.modules.container.___torch_mangle_28.Sequential {
                                                              parameters {
                                                              }
                                                              attributes {
                                                                _is_full_backward_hook = None
                                                                0 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_25.BottleneckBlock object at 0x56163b1c3090>
                                                                1 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_27.BottleneckBlock object at 0x56163b1edf10>
                                                                2 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_27.BottleneckBlock object at 0x56163b3a2560>
                                                              }
                                                              methods {
                                                                method forward {
                                                                  graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_28.Sequential,
                                                                        %input.1 : Tensor):
                                                                    %3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_25.BottleneckBlock = prim::GetAttr[name="0"](%self)
                                                                    %5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_27.BottleneckBlock = prim::GetAttr[name="1"](%self)
                                                                    %7 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_27.BottleneckBlock = prim::GetAttr[name="2"](%self)
                                                                    %input.3 : Tensor = prim::CallMethod[name="forward"](%3, %input.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.5 : Tensor = prim::CallMethod[name="forward"](%5, %input.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    %input.7 : Tensor = prim::CallMethod[name="forward"](%7, %input.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:119:20
                                                                    return (%input.7)
                                                              
                                                                }
                                                                method __len__ {
                                                                  graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_28.Sequential):
                                                                    %1 : int = prim::Constant[value=3]() # <string>:2:10
                                                                    return (%1)
                                                              
                                                                }
                                                              }
                                                              submodules {
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_25.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 1024
                                                                                        out_channels = 2048
                                                                                        stride = 2
                                                                                        shortcut = <__torch__.detectron2.layers.wrappers.___torch_mangle_21.Conv2d object at 0x56163b1e04d0>
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_22.Conv2d object at 0x56163b1977a0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d object at 0x56163b3b8d90>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d object at 0x56163b3b3ba0>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_25.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %23 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_22.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %18 : __torch__.detectron2.layers.wrappers.___torch_mangle_21.Conv2d = prim::GetAttr[name="shortcut"](%self)
                                                                                            %shortcut.1 : Tensor = prim::CallMethod[name="forward"](%18, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:204:23
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %shortcut.1, %23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_21.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163d6e7dc0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_21.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %14 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:66
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%14, %14)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %14) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 2048
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_22.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b3bb4c0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_22.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %14 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:66
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%14, %14)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %14) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 512
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163c08cc90>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 512
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b3c3530>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 2048
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_27.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 2048
                                                                                        out_channels = 2048
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d object at 0x56163b1907d0>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d object at 0x56163b3c9ee0>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d object at 0x56163b3c2fc0>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_27.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b3a9ac0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 512
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b1cfdf0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 512
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b3cc1c0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 2048
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                                                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_27.BottleneckBlock {
                                                                                      parameters {
                                                                                      }
                                                                                      attributes {
                                                                                        _is_full_backward_hook = None
                                                                                        in_channels = 2048
                                                                                        out_channels = 2048
                                                                                        stride = 1
                                                                                        shortcut = None
                                                                                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d object at 0x56163b190410>
                                                                                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d object at 0x56163b3a2f00>
                                                                                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d object at 0x56163b3cb590>
                                                                                      }
                                                                                      methods {
                                                                                        method forward {
                                                                                          graph(%self : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_27.BottleneckBlock,
                                                                                                %x.1 : Tensor):
                                                                                            %21 : int = prim::Constant[value=1]()
                                                                                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d = prim::GetAttr[name="conv1"](%self)
                                                                                            %out.1 : Tensor = prim::CallMethod[name="forward"](%2, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:195:14
                                                                                            %out.3 : Tensor = aten::relu_(%out.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:196:14
                                                                                            %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d = prim::GetAttr[name="conv2"](%self)
                                                                                            %out.5 : Tensor = prim::CallMethod[name="forward"](%7, %out.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:198:14
                                                                                            %out.7 : Tensor = aten::relu_(%out.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:199:14
                                                                                            %12 : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d = prim::GetAttr[name="conv3"](%self)
                                                                                            %out.9 : Tensor = prim::CallMethod[name="forward"](%12, %out.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:201:14
                                                                                            %out.11 : Tensor = aten::add_(%out.9, %x.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:208:8
                                                                                            %out.13 : Tensor = aten::relu_(%out.11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/backbone/resnet.py:209:14
                                                                                            return (%out.13)
                                                                                      
                                                                                        }
                                                                                      }
                                                                                      submodules {
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b3cf4a0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 512
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b3a80a0>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 512
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                                                module __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d {
                                                                                                                  parameters {
                                                                                                                    weight = ...
                                                                                                                  }
                                                                                                                  attributes {
                                                                                                                    weight = ...
                                                                                                                    bias = None
                                                                                                                    training = False
                                                                                                                    _is_full_backward_hook = None
                                                                                                                    transposed = False
                                                                                                                    _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                                                                                                    activation = None
                                                                                                                    norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x56163b288740>
                                                                                                                  }
                                                                                                                  methods {
                                                                                                                    method forward {
                                                                                                                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d,
                                                                                                                            %x.1 : Tensor):
                                                                                                                        %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                                                                                        %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                                                                                        %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                        %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                                                                                        %18 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %19 : int[] = prim::ListConstruct(%11, %11)
                                                                                                                        %20 : int[] = prim::ListConstruct(%8, %8)
                                                                                                                        %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                                                                                        %25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self)
                                                                                                                        %x.5 : Tensor = prim::CallMethod[name="forward"](%25, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:110:16
                                                                                                                        return (%x.5)
                                                                                                                  
                                                                                                                    }
                                                                                                                  }
                                                                                                                  submodules {
                                                                                                                                                module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                                                                                                                                                  parameters {
                                                                                                                                                  }
                                                                                                                                                  attributes {
                                                                                                                                                    weight = ...
                                                                                                                                                    bias = ...
                                                                                                                                                    running_mean = ...
                                                                                                                                                    running_var = ...
                                                                                                                                                    _is_full_backward_hook = None
                                                                                                                                                    num_features = 2048
                                                                                                                                                    eps = 1.0000000000000001e-05
                                                                                                                                                  }
                                                                                                                                                  methods {
                                                                                                                                                    method forward {
                                                                                                                                                      graph(%self : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                                                                                                                                            %x.1 : Tensor):
                                                                                                                                                        %55 : Function = prim::Constant[name="batch_norm"]()
                                                                                                                                                        %54 : float = prim::Constant[value=0.10000000000000001]()
                                                                                                                                                        %36 : None = prim::Constant()
                                                                                                                                                        %34 : bool = prim::Constant[value=0]()
                                                                                                                                                        %21 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:37
                                                                                                                                                        %19 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:34
                                                                                                                                                        %3 : bool = prim::requires_grad(%x.1)
                                                                                                                                                        %65 : Tensor = prim::If(%3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:45:8
                                                                                                                                                          block0():
                                                                                                                                                            %5 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %6 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %7 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %9 : Tensor = aten::add(%6, %7, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %10 : Tensor = aten::rsqrt(%9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:35
                                                                                                                                                            %scale.1 : Tensor = aten::mul(%5, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:48:20
                                                                                                                                                            %12 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %13 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %15 : Tensor = aten::mul(%13, %scale.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:31
                                                                                                                                                            %bias.1 : Tensor = aten::sub(%12, %15, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:49:19
                                                                                                                                                            %22 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %scale.4 : Tensor = aten::reshape(%scale.1, %22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:50:20
                                                                                                                                                            %27 : int[] = prim::ListConstruct(%19, %21, %19, %19)
                                                                                                                                                            %bias.3 : Tensor = aten::reshape(%bias.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:51:19
                                                                                                                                                            %out_dtype.1 : int = prim::dtype(%x.1)
                                                                                                                                                            %37 : Tensor = aten::to(%scale.4, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:23
                                                                                                                                                            %38 : Tensor = aten::mul(%x.1, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            %44 : Tensor = aten::to(%bias.3, %out_dtype.1, %34, %34, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:45
                                                                                                                                                            %46 : Tensor = aten::add(%38, %44, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:53:19
                                                                                                                                                            -> (%46)
                                                                                                                                                          block1():
                                                                                                                                                            %48 : Tensor = prim::GetAttr[name="running_mean"](%self)
                                                                                                                                                            %49 : Tensor = prim::GetAttr[name="running_var"](%self)
                                                                                                                                                            %50 : Tensor = prim::GetAttr[name="weight"](%self)
                                                                                                                                                            %51 : Tensor = prim::GetAttr[name="bias"](%self)
                                                                                                                                                            %53 : float = prim::GetAttr[name="eps"](%self)
                                                                                                                                                            %56 : Tensor = prim::CallFunction(%55, %x.1, %48, %49, %50, %51, %34, %54, %53) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/batch_norm.py:57:19
                                                                                                                                                            -> (%56)
                                                                                                                                                        return (%65)
                                                                                                                                                  
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  submodules {
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                  }
                                                                                                                }
                                                                                      }
                                                                                    }
                                                              }
                                                            }
                                          }
                                        }
                          }
                        }
                        module __torch__.torch.nn.modules.container.___torch_mangle_33.ModuleList {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            0 = <__torch__.detectron2.layers.wrappers.___torch_mangle_29.Conv2d object at 0x56163b28a840>
                            1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_30.Conv2d object at 0x56163b2886b0>
                            2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_31.Conv2d object at 0x56163b1e1d10>
                            3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_32.Conv2d object at 0x56163b1dfdd0>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_33.ModuleList):
                                %1 : str = prim::Constant[value=""]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:234:14
                                %8 : None = prim::Uninitialized()
                                 = prim::RaiseException(%1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:234:8
                                return (%8)
                          
                            }
                            method __len__ {
                              graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_33.ModuleList):
                                %1 : int = prim::Constant[value=4]() # <string>:2:10
                                return (%1)
                          
                            }
                          }
                          submodules {
                                        module __torch__.detectron2.layers.wrappers.___torch_mangle_29.Conv2d {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                            transposed = False
                                            _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                            norm = None
                                            activation = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_29.Conv2d,
                                                    %x.1 : Tensor):
                                                %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                %18 : int[] = prim::ListConstruct(%8, %8)
                                                %19 : int[] = prim::ListConstruct(%11, %11)
                                                %20 : int[] = prim::ListConstruct(%8, %8)
                                                %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                return (%x.3)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                                        module __torch__.detectron2.layers.wrappers.___torch_mangle_30.Conv2d {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                            transposed = False
                                            _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                            norm = None
                                            activation = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_30.Conv2d,
                                                    %x.1 : Tensor):
                                                %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                %18 : int[] = prim::ListConstruct(%8, %8)
                                                %19 : int[] = prim::ListConstruct(%11, %11)
                                                %20 : int[] = prim::ListConstruct(%8, %8)
                                                %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                return (%x.3)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                                        module __torch__.detectron2.layers.wrappers.___torch_mangle_31.Conv2d {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                            transposed = False
                                            _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                            norm = None
                                            activation = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_31.Conv2d,
                                                    %x.1 : Tensor):
                                                %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                %18 : int[] = prim::ListConstruct(%8, %8)
                                                %19 : int[] = prim::ListConstruct(%11, %11)
                                                %20 : int[] = prim::ListConstruct(%8, %8)
                                                %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                return (%x.3)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                                        module __torch__.detectron2.layers.wrappers.___torch_mangle_32.Conv2d {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                            transposed = False
                                            _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                            norm = None
                                            activation = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_32.Conv2d,
                                                    %x.1 : Tensor):
                                                %11 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:52
                                                %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                %18 : int[] = prim::ListConstruct(%8, %8)
                                                %19 : int[] = prim::ListConstruct(%11, %11)
                                                %20 : int[] = prim::ListConstruct(%8, %8)
                                                %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                return (%x.3)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                          }
                        }
                        module __torch__.torch.nn.modules.container.___torch_mangle_35.ModuleList {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            0 = <__torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d object at 0x56163b3a92d0>
                            1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d object at 0x56163aed4210>
                            2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d object at 0x56163e26f120>
                            3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d object at 0x56163b28ba10>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_35.ModuleList):
                                %1 : str = prim::Constant[value=""]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:234:14
                                %8 : None = prim::Uninitialized()
                                 = prim::RaiseException(%1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:234:8
                                return (%8)
                          
                            }
                            method __len__ {
                              graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_35.ModuleList):
                                %1 : int = prim::Constant[value=4]() # <string>:2:10
                                return (%1)
                          
                            }
                          }
                          submodules {
                                        module __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                            transposed = False
                                            _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                            norm = None
                                            activation = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d,
                                                    %x.1 : Tensor):
                                                %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                %18 : int[] = prim::ListConstruct(%8, %8)
                                                %19 : int[] = prim::ListConstruct(%8, %8)
                                                %20 : int[] = prim::ListConstruct(%8, %8)
                                                %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                return (%x.3)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                                        module __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                            transposed = False
                                            _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                            norm = None
                                            activation = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d,
                                                    %x.1 : Tensor):
                                                %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                %18 : int[] = prim::ListConstruct(%8, %8)
                                                %19 : int[] = prim::ListConstruct(%8, %8)
                                                %20 : int[] = prim::ListConstruct(%8, %8)
                                                %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                return (%x.3)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                                        module __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                            transposed = False
                                            _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                            norm = None
                                            activation = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d,
                                                    %x.1 : Tensor):
                                                %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                %18 : int[] = prim::ListConstruct(%8, %8)
                                                %19 : int[] = prim::ListConstruct(%8, %8)
                                                %20 : int[] = prim::ListConstruct(%8, %8)
                                                %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                return (%x.3)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                                        module __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                            transposed = False
                                            _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                            norm = None
                                            activation = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d,
                                                    %x.1 : Tensor):
                                                %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                %18 : int[] = prim::ListConstruct(%8, %8)
                                                %19 : int[] = prim::ListConstruct(%8, %8)
                                                %20 : int[] = prim::ListConstruct(%8, %8)
                                                %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                return (%x.3)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                          }
                        }
              }
            }
            module __torch__.detectron2.modeling.proposal_generator.rpn.RPN {
              parameters {
              }
              attributes {
                _is_full_backward_hook = None
                in_features = [p2, p3, p4, p5, p6]
                box2box_transform = <__torch__.detectron2.modeling.box_regression.Box2BoxTransform object at 0x56163af7a140>
                batch_size_per_image = 256
                positive_fraction = 0.5
                pre_nms_topk = {True: 2000, False: 1000}
                post_nms_topk = {True: 1000, False: 1000}
                nms_thresh = 0.69999999999999996
                min_box_size = 0.
                anchor_boundary_thresh = -1
                loss_weight = {loss_rpn_cls: 1., loss_rpn_loc: 1.}
                box_reg_loss_type = smooth_l1
                smooth_l1_beta = 0.
                rpn_head = <__torch__.detectron2.modeling.proposal_generator.rpn.StandardRPNHead object at 0x56163b05ec60>
                anchor_generator = <__torch__.detectron2.modeling.anchor_generator.DefaultAnchorGenerator object at 0x56163e2aec40>
              }
              methods {
                method forward {
                  graph(%self : __torch__.detectron2.modeling.proposal_generator.rpn.RPN,
                        %images.1 : __torch__.detectron2.structures.image_list.ImageList,
                        %features.1 : Dict(str, Tensor),
                        %gt_instances : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[]?):
                    %56 : int = prim::Constant[value=-2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:74
                    %36 : int = prim::Constant[value=-1]()
                    %8 : bool = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:19
                    %30 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:458:26
                    %31 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:458:29
                    %32 : int = prim::Constant[value=3]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:458:32
                    %33 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:458:35
                    %65 : int = prim::Constant[value=4]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:464:27
                    %features.3 : Tensor[] = prim::ListConstruct()
                    %6 : str[] = prim::GetAttr[name="in_features"](%self)
                    %7 : int = aten::len(%6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:19
                     = prim::Loop(%7, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:19
                      block0(%9 : int):
                        %f.1 : str = aten::__getitem__(%6, %9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:19
                        %13 : Tensor = aten::__getitem__(%features.1, %f.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:20
                        %14 : Tensor[] = aten::append(%features.3, %13) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:451:19
                        -> (%8)
                    %15 : __torch__.detectron2.modeling.anchor_generator.DefaultAnchorGenerator = prim::GetAttr[name="anchor_generator"](%self)
                    %anchors.1 : __torch__.detectron2.structures.boxes.Boxes[] = prim::CallMethod[name="forward"](%15, %features.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:452:18
                    %18 : __torch__.detectron2.modeling.proposal_generator.rpn.StandardRPNHead = prim::GetAttr[name="rpn_head"](%self)
                    %20 : (Tensor[], Tensor[]) = prim::CallMethod[name="forward"](%18, %features.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:454:53
                    %pred_objectness_logits.1 : Tensor[], %pred_anchor_deltas.1 : Tensor[] = prim::TupleUnpack(%20)
                    %pred_objectness_logits.3 : Tensor[] = prim::ListConstruct()
                    %25 : int = aten::len(%pred_objectness_logits.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:456:33
                     = prim::Loop(%25, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:456:33
                      block0(%27 : int):
                        %score.1 : Tensor = aten::__getitem__(%pred_objectness_logits.1, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:456:33
                        %34 : int[] = prim::ListConstruct(%30, %31, %32, %33)
                        %35 : Tensor = aten::permute(%score.1, %34) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:458:12
                        %37 : Tensor = aten::flatten(%35, %33, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:458:12
                        %38 : Tensor[] = aten::append(%pred_objectness_logits.3, %37) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:456:33
                        -> (%8)
                    %pred_anchor_deltas.3 : Tensor[] = prim::ListConstruct()
                    %41 : int = aten::len(%pred_anchor_deltas.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:461:29
                     = prim::Loop(%41, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:461:29
                      block0(%43 : int):
                        %x.1 : Tensor = aten::__getitem__(%pred_anchor_deltas.1, %43) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:461:29
                        %47 : int[] = aten::size(%x.1) # <string>:7:9
                        %48 : int = aten::__getitem__(%47, %30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:19
                        %54 : int[] = aten::size(%x.1) # <string>:7:9
                        %57 : int = aten::__getitem__(%54, %56) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:66
                        %59 : int[] = aten::size(%x.1) # <string>:7:9
                        %62 : int = aten::__getitem__(%59, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:79
                        %63 : int[] = prim::ListConstruct(%48, %36, %65, %57, %62)
                        %64 : Tensor = aten::view(%x.1, %63) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:12
                        %66 : int[] = prim::ListConstruct(%30, %32, %65, %33, %31)
                        %67 : Tensor = aten::permute(%64, %66) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:12
                        %70 : Tensor = aten::flatten(%67, %33, %56) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:463:12
                        %71 : Tensor[] = aten::append(%pred_anchor_deltas.3, %70) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:461:29
                        -> (%8)
                    %losses.1 : Dict(str, Tensor) = prim::DictConstruct()
                    %79 : (int, int)[] = prim::GetAttr[name="image_sizes"](%images.1)
                    %proposals.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::CallMethod[name="predict_proposals"](%self, %anchors.1, %pred_objectness_logits.3, %pred_anchor_deltas.3, %79) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:477:20
                    %83 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Dict(str, Tensor)) = prim::TupleConstruct(%proposals.1, %losses.1)
                    return (%83)
              
                }
                method predict_proposals {
                  graph(%self : __torch__.detectron2.modeling.proposal_generator.rpn.RPN,
                        %anchors.1 : __torch__.detectron2.structures.boxes.Boxes[],
                        %pred_objectness_logits.1 : Tensor[],
                        %pred_anchor_deltas.1 : Tensor[],
                        %image_sizes.1 : (int, int)[]):
                    %24 : Function = prim::Constant[name="find_top_rpn_proposals"]()
                    %17 : bool = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:508:34
                    %6 : __torch__.torch.autograd.grad_mode.no_grad = prim::CreateObject()
                    %7 : None = prim::CallMethod[name="__init__"](%6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:501:13
                    %8 : None = prim::Enter(%6)
                    %pred_proposals.1 : Tensor[] = prim::CallMethod[name="_decode_proposals"](%self, %anchors.1, %pred_anchor_deltas.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:502:29
                    %15 : float = prim::GetAttr[name="nms_thresh"](%self)
                    %16 : Dict(bool, int) = prim::GetAttr[name="pre_nms_topk"](%self)
                    %18 : int = aten::__getitem__(%16, %17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:508:16
                    %19 : Dict(bool, int) = prim::GetAttr[name="post_nms_topk"](%self)
                    %21 : int = aten::__getitem__(%19, %17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:509:16
                    %22 : float = prim::GetAttr[name="min_box_size"](%self)
                    %25 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::CallFunction(%24, %pred_proposals.1, %pred_objectness_logits.1, %image_sizes.1, %15, %18, %21, %22, %17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:503:19
                    %26 : Tensor = prim::Exit(%6)
                    return (%25)
              
                }
                method _decode_proposals {
                  graph(%self : __torch__.detectron2.modeling.proposal_generator.rpn.RPN,
                        %anchors.1 : __torch__.detectron2.structures.boxes.Boxes[],
                        %pred_anchor_deltas.1 : Tensor[]):
                    %40 : bool = prim::Constant[value=0]()
                    %27 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:527:64
                    %16 : bool = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
                    %5 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:522:31
                    %23 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:526:38
                    %6 : Tensor = aten::__getitem__(%pred_anchor_deltas.1, %5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:522:12
                    %7 : int[] = aten::size(%6) # <string>:7:9
                    %N.1 : int = aten::__getitem__(%7, %5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:522:12
                    %proposals.1 : Tensor[] = prim::ListConstruct()
                    %12 : int = aten::len(%anchors.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
                    %13 : int = aten::len(%pred_anchor_deltas.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
                    %14 : int[] = prim::ListConstruct(%12, %13)
                    %15 : int = prim::min(%14) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
                     = prim::Loop(%15, %16) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
                      block0(%17 : int):
                        %anchors_i.1 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%anchors.1, %17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
                        %pred_anchor_deltas_i.1 : Tensor = aten::__getitem__(%pred_anchor_deltas.1, %17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:525:8
                        %22 : Tensor = prim::GetAttr[name="tensor"](%anchors_i.1)
                        %B.1 : int = aten::size(%22, %23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:526:16
                        %29 : int[] = prim::ListConstruct(%27, %B.1)
                        %pred_anchor_deltas_i.3 : Tensor = aten::reshape(%pred_anchor_deltas_i.1, %29) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:527:35
                        %32 : Tensor = prim::GetAttr[name="tensor"](%anchors_i.1)
                        %33 : Tensor = aten::unsqueeze(%32, %5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:529:24
                        %39 : int[] = prim::ListConstruct(%N.1, %27, %27)
                        %41 : Tensor = aten::expand(%33, %39, %40) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:529:24
                        %45 : int[] = prim::ListConstruct(%27, %B.1)
                        %anchors_i.4 : Tensor = aten::reshape(%41, %45) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:529:24
                        %47 : __torch__.detectron2.modeling.box_regression.Box2BoxTransform = prim::GetAttr[name="box2box_transform"](%self)
                        %proposals_i.1 : Tensor = prim::CallMethod[name="apply_deltas"](%47, %pred_anchor_deltas_i.3, %anchors_i.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:530:26
                        %57 : int[] = prim::ListConstruct(%N.1, %27, %B.1)
                        %58 : Tensor = aten::view(%proposals_i.1, %57) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:532:29
                        %59 : Tensor[] = aten::append(%proposals.1, %58) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:532:12
                        -> (%16)
                    return (%proposals.1)
              
                }
              }
              submodules {
                        module __torch__.detectron2.modeling.proposal_generator.rpn.StandardRPNHead {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            conv = <__torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d object at 0x56163b076f40>
                            objectness_logits = <__torch__.torch.nn.modules.conv.Conv2d object at 0x56163af69680>
                            anchor_deltas = <__torch__.torch.nn.modules.conv.___torch_mangle_37.Conv2d object at 0x56163e2f1180>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.proposal_generator.rpn.StandardRPNHead,
                                    %features.1 : Tensor[]):
                                %7 : bool = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:173:8
                                %pred_objectness_logits.1 : Tensor[] = prim::ListConstruct()
                                %pred_anchor_deltas.1 : Tensor[] = prim::ListConstruct()
                                %6 : int = aten::len(%features.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:173:8
                                 = prim::Loop(%6, %7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:173:8
                                  block0(%8 : int):
                                    %x.1 : Tensor = aten::__getitem__(%features.1, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:173:8
                                    %10 : __torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d = prim::GetAttr[name="conv"](%self)
                                    %t.1 : Tensor = prim::CallMethod[name="forward"](%10, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:174:16
                                    %14 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="objectness_logits"](%self)
                                    %16 : Tensor = prim::CallMethod[name="forward"](%14, %t.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:175:42
                                    %17 : Tensor[] = aten::append(%pred_objectness_logits.1, %16) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:175:12
                                    %19 : __torch__.torch.nn.modules.conv.___torch_mangle_37.Conv2d = prim::GetAttr[name="anchor_deltas"](%self)
                                    %21 : Tensor = prim::CallMethod[name="forward"](%19, %t.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:176:38
                                    %22 : Tensor[] = aten::append(%pred_anchor_deltas.1, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/proposal_generator/rpn.py:176:12
                                    -> (%7)
                                %25 : (Tensor[], Tensor[]) = prim::TupleConstruct(%pred_objectness_logits.1, %pred_anchor_deltas.1)
                                return (%25)
                          
                            }
                          }
                          submodules {
                                        module __torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                            transposed = False
                                            _reversed_padding_repeated_twice = (1, 1, 1, 1)
                                            norm = None
                                            activation = <__torch__.torch.nn.modules.activation.ReLU object at 0x56163e2f93f0>
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d,
                                                    %x.1 : Tensor):
                                                %8 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:107:39
                                                %6 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %7 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                %18 : int[] = prim::ListConstruct(%8, %8)
                                                %19 : int[] = prim::ListConstruct(%8, %8)
                                                %20 : int[] = prim::ListConstruct(%8, %8)
                                                %x.3 : Tensor = aten::conv2d(%x.1, %6, %7, %18, %19, %20, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:106:12
                                                %28 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="activation"](%self)
                                                %x.5 : Tensor = prim::CallMethod[name="forward"](%28, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/wrappers.py:112:16
                                                return (%x.5)
                                          
                                            }
                                          }
                                          submodules {
                                                            module __torch__.torch.nn.modules.activation.ReLU {
                                                              parameters {
                                                              }
                                                              attributes {
                                                                training = False
                                                                _is_full_backward_hook = None
                                                              }
                                                              methods {
                                                                method forward {
                                                                  graph(%self : __torch__.torch.nn.modules.activation.ReLU,
                                                                        %input.1 : Tensor):
                                                                    %4 : Function = prim::Constant[name="relu"]()
                                                                    %3 : bool = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/activation.py:102:37
                                                                    %5 : Tensor = prim::CallFunction(%4, %input.1, %3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/activation.py:102:15
                                                                    return (%5)
                                                              
                                                                }
                                                              }
                                                              submodules {
                                                              }
                                                            }
                                          }
                                        }
                                        module __torch__.torch.nn.modules.conv.Conv2d {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                            transposed = False
                                            _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.torch.nn.modules.conv.Conv2d,
                                                    %input.1 : Tensor):
                                                %3 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %4 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                %5 : Tensor = prim::CallMethod[name="_conv_forward"](%self, %input.1, %3, %4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/conv.py:399:15
                                                return (%5)
                                          
                                            }
                                            method _conv_forward {
                                              graph(%self : __torch__.torch.nn.modules.conv.Conv2d,
                                                    %input.1 : Tensor,
                                                    %weight.1 : Tensor,
                                                    %bias.1 : Tensor?):
                                                %66 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/conv.py:396:24
                                                %63 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/conv.py:395:45
                                                %73 : int[] = prim::ListConstruct(%63, %63)
                                                %74 : int[] = prim::ListConstruct(%66, %66)
                                                %75 : int[] = prim::ListConstruct(%63, %63)
                                                %76 : Tensor = aten::conv2d(%input.1, %weight.1, %bias.1, %73, %74, %75, %63) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/conv.py:395:15
                                                return (%76)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                                        module __torch__.torch.nn.modules.conv.___torch_mangle_37.Conv2d {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                            transposed = False
                                            _reversed_padding_repeated_twice = (0, 0, 0, 0)
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.torch.nn.modules.conv.___torch_mangle_37.Conv2d,
                                                    %input.1 : Tensor):
                                                %3 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %4 : Tensor? = prim::GetAttr[name="bias"](%self)
                                                %5 : Tensor = prim::CallMethod[name="_conv_forward"](%self, %input.1, %3, %4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/conv.py:399:15
                                                return (%5)
                                          
                                            }
                                            method _conv_forward {
                                              graph(%self : __torch__.torch.nn.modules.conv.___torch_mangle_37.Conv2d,
                                                    %input.1 : Tensor,
                                                    %weight.1 : Tensor,
                                                    %bias.1 : Tensor?):
                                                %66 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/conv.py:396:24
                                                %63 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/conv.py:395:45
                                                %73 : int[] = prim::ListConstruct(%63, %63)
                                                %74 : int[] = prim::ListConstruct(%66, %66)
                                                %75 : int[] = prim::ListConstruct(%63, %63)
                                                %76 : Tensor = aten::conv2d(%input.1, %weight.1, %bias.1, %73, %74, %75, %63) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/conv.py:395:15
                                                return (%76)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                          }
                        }
                        module __torch__.detectron2.modeling.anchor_generator.DefaultAnchorGenerator {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            strides = [4, 8, 16, 32, 64]
                            num_features = 5
                            offset = 0.
                            cell_anchors = <__torch__.detectron2.modeling.anchor_generator.BufferList object at 0x56163b29bce0>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.anchor_generator.DefaultAnchorGenerator,
                                    %features.1 : Tensor[]):
                                %15 : int = prim::Constant[value=9223372036854775807]()
                                %14 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:225:22
                                %13 : int = prim::Constant[value=-2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:225:40
                                %6 : bool = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:225:21
                                %grid_sizes.1 : int[][] = prim::ListConstruct()
                                %5 : int = aten::len(%features.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:225:21
                                 = prim::Loop(%5, %6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:225:21
                                  block0(%7 : int):
                                    %feature_map.1 : Tensor = aten::__getitem__(%features.1, %7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:225:21
                                    %10 : int[] = aten::size(%feature_map.1) # <string>:7:9
                                    %16 : int[] = aten::slice(%10, %13, %15, %14) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:225:22
                                    %17 : int[][] = aten::append(%grid_sizes.1, %16) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:225:21
                                    -> (%6)
                                %anchors_over_all_feature_maps.1 : Tensor[] = prim::CallMethod[name="_grid_anchors"](%self, %grid_sizes.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:226:40
                                %20 : __torch__.detectron2.structures.boxes.Boxes[] = prim::ListConstruct()
                                %22 : int = aten::len(%anchors_over_all_feature_maps.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:227:15
                                 = prim::Loop(%22, %6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:227:15
                                  block0(%24 : int):
                                    %x.1 : Tensor = aten::__getitem__(%anchors_over_all_feature_maps.1, %24) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:227:15
                                    %27 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject()
                                    %28 : None = prim::CallMethod[name="__init__"](%27, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:227:16
                                    %29 : __torch__.detectron2.structures.boxes.Boxes[] = aten::append(%20, %27) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:227:15
                                    -> (%6)
                                return (%20)
                          
                            }
                            method _grid_anchors {
                              graph(%self : __torch__.detectron2.modeling.anchor_generator.DefaultAnchorGenerator,
                                    %grid_sizes.1 : int[][]):
                                %79 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:40
                                %65 : Function = prim::Constant[name="_create_grid_offsets"]()
                                %54 : bool = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
                                %23 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:168:41
                                %41 : int = prim::Constant[value=4]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:168:38
                                %anchors.1 : Tensor[] = prim::ListConstruct()
                                %buffers.1 : Tensor[] = prim::ListConstruct()
                                %5 : __torch__.detectron2.modeling.anchor_generator.BufferList = prim::GetAttr[name="cell_anchors"](%self)
                                %8 : Tensor = prim::GetAttr[name="0"](%5)
                                %11 : Tensor = prim::GetAttr[name="1"](%5)
                                %14 : Tensor = prim::GetAttr[name="2"](%5)
                                %17 : Tensor = prim::GetAttr[name="3"](%5)
                                %20 : Tensor = prim::GetAttr[name="4"](%5)
                                %26 : Tensor[] = aten::append(%buffers.1, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:168:38
                                %30 : Tensor[] = aten::append(%buffers.1, %11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:168:38
                                %35 : Tensor[] = aten::append(%buffers.1, %14) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:168:38
                                %40 : Tensor[] = aten::append(%buffers.1, %17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:168:38
                                %45 : Tensor[] = aten::append(%buffers.1, %20) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:168:38
                                %47 : int[] = prim::GetAttr[name="strides"](%self)
                                %49 : int = aten::len(%grid_sizes.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
                                %50 : int = aten::len(%47) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
                                %51 : int = aten::len(%buffers.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
                                %52 : int[] = prim::ListConstruct(%49, %50, %51)
                                %53 : int = prim::min(%52) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
                                 = prim::Loop(%53, %54) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
                                  block0(%55 : int):
                                    %size.1 : int[] = aten::__getitem__(%grid_sizes.1, %55) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
                                    %stride.1 : int = aten::__getitem__(%47, %55) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
                                    %base_anchors.1 : Tensor = aten::__getitem__(%buffers.1, %55) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:169:8
                                    %62 : float = prim::GetAttr[name="offset"](%self)
                                    %64 : Device = prim::device(%base_anchors.1)
                                    %66 : (Tensor, Tensor) = prim::CallFunction(%65, %size.1, %stride.1, %62, %64) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:170:31
                                    %shift_x.1 : Tensor, %shift_y.1 : Tensor = prim::TupleUnpack(%66)
                                    %74 : Tensor[] = prim::ListConstruct(%shift_x.1, %shift_y.1, %shift_x.1, %shift_y.1)
                                    %shifts.1 : Tensor = aten::stack(%74, %23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:171:21
                                    %80 : int[] = prim::ListConstruct(%79, %23, %41)
                                    %81 : Tensor = aten::view(%shifts.1, %80) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:28
                                    %85 : int[] = prim::ListConstruct(%23, %79, %41)
                                    %86 : Tensor = aten::view(%base_anchors.1, %85) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:52
                                    %88 : Tensor = aten::add(%81, %86, %23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:28
                                    %91 : int[] = prim::ListConstruct(%79, %41)
                                    %92 : Tensor = aten::reshape(%88, %91) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:28
                                    %93 : Tensor[] = aten::append(%anchors.1, %92) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/anchor_generator.py:173:12
                                    -> (%54)
                                return (%anchors.1)
                          
                            }
                          }
                          submodules {
                                        module __torch__.detectron2.modeling.anchor_generator.BufferList {
                                          parameters {
                                          }
                                          attributes {
                                            0 = ...
                                            1 = ...
                                            2 = ...
                                            3 = ...
                                            4 = ...
                                            _is_full_backward_hook = None
                                          }
                                          methods {
                                          }
                                          submodules {
                                          }
                                        }
                          }
                        }
              }
            }
            module __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads {
              parameters {
              }
              attributes {
                _is_full_backward_hook = None
                batch_size_per_image = 64
                positive_fraction = 0.25
                num_classes = 1
                proposal_append_gt = True
                in_features = [p2, p3, p4, p5]
                box_in_features = [p2, p3, p4, p5]
                train_on_pred_boxes = False
                box_pooler = <__torch__.detectron2.modeling.poolers.ROIPooler object at 0x56163b44cb60>
                box_head = <__torch__.detectron2.modeling.roi_heads.box_head.FastRCNNConvFCHead object at 0x56163b3e9670>
                box_predictor = <__torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers object at 0x56163b2bc510>
              }
              methods {
                method forward {
                  graph(%self : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads,
                        %images : __torch__.detectron2.structures.image_list.ImageList,
                        %features.1 : Dict(str, Tensor),
                        %proposals.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[],
                        %targets : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[]?):
                    %pred_instances.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::CallMethod[name="_forward_box"](%self, %features.1, %proposals.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:747:29
                    %pred_instances.3 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::CallMethod[name="forward_with_given_boxes"](%self, %features.1, %pred_instances.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:750:29
                    %17 : Dict(str, Tensor) = prim::DictConstruct()
                    %18 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Dict(str, Tensor)) = prim::TupleConstruct(%pred_instances.3, %17)
                    return (%18)
              
                }
                method _forward_box {
                  graph(%self : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads,
                        %features.1 : Dict(str, Tensor),
                        %proposals.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[]):
                    %7 : bool = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:19
                    %features.3 : Tensor[] = prim::ListConstruct()
                    %5 : str[] = prim::GetAttr[name="box_in_features"](%self)
                    %6 : int = aten::len(%5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:19
                     = prim::Loop(%6, %7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:19
                      block0(%8 : int):
                        %f.1 : str = aten::__getitem__(%5, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:19
                        %12 : Tensor = aten::__getitem__(%features.1, %f.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:20
                        %13 : Tensor[] = aten::append(%features.3, %12) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:797:19
                        -> (%7)
                    %14 : __torch__.detectron2.modeling.poolers.ROIPooler = prim::GetAttr[name="box_pooler"](%self)
                    %16 : __torch__.detectron2.structures.boxes.Boxes[] = prim::ListConstruct()
                    %18 : int = aten::len(%proposals.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:798:49
                     = prim::Loop(%18, %7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:798:49
                      block0(%20 : int):
                        %x.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.1, %20) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:798:49
                        %23 : __torch__.detectron2.structures.boxes.Boxes = prim::CallMethod[name="__proposal_boxes_getter"](%x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:798:50
                        %24 : __torch__.detectron2.structures.boxes.Boxes[] = aten::append(%16, %23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:798:49
                        -> (%7)
                    %box_features.1 : Tensor = prim::CallMethod[name="forward"](%14, %features.3, %16) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:798:23
                    %26 : __torch__.detectron2.modeling.roi_heads.box_head.FastRCNNConvFCHead = prim::GetAttr[name="box_head"](%self)
                    %box_features.3 : Tensor = prim::CallMethod[name="forward"](%26, %box_features.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:799:23
                    %29 : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers = prim::GetAttr[name="box_predictor"](%self)
                    %predictions.1 : (Tensor, Tensor) = prim::CallMethod[name="forward"](%29, %box_features.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:800:22
                    %34 : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers = prim::GetAttr[name="box_predictor"](%self)
                    %37 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Tensor[]) = prim::CallMethod[name="inference"](%34, %predictions.1, %proposals.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:815:32
                    %pred_instances.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], %39 : Tensor[] = prim::TupleUnpack(%37)
                    return (%pred_instances.1)
              
                }
                method forward_with_given_boxes {
                  graph(%self : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads,
                        %features.1 : Dict(str, Tensor),
                        %instances.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[]):
                    %44 : str = prim::Constant[value="AssertionError: "]()
                    %22 : bool = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:15
                    %19 : str = prim::Constant[value="pred_classes"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:67
                    %12 : str = prim::Constant[value="pred_boxes"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:32
                    %8 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:25
                    %11 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%instances.1, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:15
                    %13 : bool = prim::CallMethod[name="has"](%11, %12) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:15
                    %23 : bool = prim::If(%13) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:15
                      block0():
                        %18 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%instances.1, %8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:50
                        %20 : bool = prim::CallMethod[name="has"](%18, %19) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:50
                        -> (%20)
                      block1():
                        -> (%22)
                     = prim::If(%23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%44) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:774:8
                        -> ()
                    %instances.7 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::CallMethod[name="_forward_mask"](%self, %features.1, %instances.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:776:20
                    %instances.9 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::CallMethod[name="_forward_keypoint"](%self, %features.1, %instances.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/roi_heads.py:777:20
                    return (%instances.9)
              
                }
                method _forward_mask {
                  graph(%self : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads,
                        %features : Dict(str, Tensor),
                        %instances.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[]):
                    return (%instances.1)
              
                }
                method _forward_keypoint {
                  graph(%self : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads,
                        %features : Dict(str, Tensor),
                        %instances.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[]):
                    return (%instances.1)
              
                }
              }
              submodules {
                        module __torch__.detectron2.modeling.poolers.ROIPooler {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            output_size = (7, 7)
                            min_level = 2
                            max_level = 5
                            canonical_level = 4
                            canonical_box_size = 224
                            level_poolers = <__torch__.torch.nn.modules.container.___torch_mangle_38.ModuleList object at 0x56163b45c610>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.poolers.ROIPooler,
                                    %x.1 : Tensor[],
                                    %box_lists.1 : __torch__.detectron2.structures.boxes.Boxes[]):
                                %392 : bool = prim::Constant[value=0]()
                                %383 : Function = prim::Constant[name="nonzero_tuple"]()
                                %352 : Function = prim::Constant[name="assign_boxes_to_levels"]()
                                %245 : Function = prim::Constant[name="convert_boxes_to_pooler_format"]()
                                %65 : None = prim::Constant()
                                %33 : str = prim::Constant[value="unequal value, x[0] batch dim 0 is {}, but box_list has length {}"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:213:11
                                %22 : str = prim::Constant[value="AssertionError: "]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:205:8
                                %17 : str = prim::Constant[value="unequal value, num_level_assignments={}, but x is list of {} Tensors"]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:207:11
                                %level.1 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:35
                                %level.4 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:218:31
                                %level.7 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:239:8
                                %level.10 : int = prim::Constant[value=3]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:239:8
                                %4 : __torch__.torch.nn.modules.container.___torch_mangle_38.ModuleList = prim::GetAttr[name="level_poolers"](%self)
                                %num_level_assignments.1 : int = prim::CallMethod[name="__len__"](%4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:200:32
                                %13 : int = aten::len(%x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:206:12
                                %15 : bool = aten::eq(%13, %num_level_assignments.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:206:12
                                 = prim::If(%15) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:205:8
                                  block0():
                                    -> ()
                                  block1():
                                    %20 : int = aten::len(%x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:208:35
                                    %21 : str = aten::format(%17, %num_level_assignments.1, %20) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:207:11
                                    %23 : str = aten::add(%22, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:205:8
                                     = prim::RaiseException(%23) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:205:8
                                    -> ()
                                %26 : int = aten::len(%box_lists.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:15
                                %29 : Tensor = aten::__getitem__(%x.1, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:33
                                %30 : int = aten::size(%29, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:33
                                %31 : bool = aten::eq(%26, %30) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:15
                                 = prim::If(%31) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:8
                                  block0():
                                    -> ()
                                  block1():
                                    %35 : Tensor = aten::__getitem__(%x.1, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:214:12
                                    %36 : int = aten::size(%35, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:214:12
                                    %38 : int = aten::len(%box_lists.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:214:26
                                    %39 : str = aten::format(%33, %36, %38) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:213:11
                                    %41 : str = aten::add(%22, %39) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:8
                                     = prim::RaiseException(%41) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:211:8
                                    -> ()
                                %44 : int = aten::len(%box_lists.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:216:11
                                %45 : bool = aten::eq(%44, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:216:11
                                %347 : Tensor = prim::If(%45) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:216:8
                                  block0():
                                    %48 : Tensor = aten::__getitem__(%x.1, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:218:20
                                    %49 : int[] = aten::size(%48) # <string>:7:9
                                    %51 : int = aten::__getitem__(%49, %level.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:218:20
                                    %53 : (int, int) = prim::GetAttr[name="output_size"](%self)
                                    %54 : int[] = prim::ListConstruct(%level.1, %51)
                                    %55 : int, %56 : int = prim::TupleUnpack(%53)
                                    %57 : int[] = prim::ListConstruct(%55, %56)
                                    %58 : int[] = aten::add(%54, %57) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:218:16
                                    %60 : Tensor = aten::__getitem__(%x.1, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:218:62
                                    %61 : Device = prim::device(%60)
                                    %63 : Tensor = aten::__getitem__(%x.1, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:218:81
                                    %64 : int = prim::dtype(%63)
                                    %67 : Tensor = aten::zeros(%58, %64, %65, %61, %65) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:217:19
                                    -> (%67)
                                  block1():
                                    %pooler_fmt_boxes.2 : Tensor = prim::CallFunction(%245, %box_lists.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:221:27
                                    %247 : bool = aten::eq(%num_level_assignments.1, %level.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:223:11
                                    %431 : Tensor = prim::If(%247) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:223:8
                                      block0():
                                        %251 : __torch__.torch.nn.modules.container.___torch_mangle_38.ModuleList = prim::GetAttr[name="level_poolers"](%self)
                                        %253 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="0"](%251)
                                        %260 : Tensor = aten::__getitem__(%x.1, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:224:41
                                        %261 : Tensor = prim::CallMethod[name="forward"](%253, %260, %pooler_fmt_boxes.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:224:19
                                        -> (%261)
                                      block1():
                                        %348 : int = prim::GetAttr[name="min_level"](%self)
                                        %349 : int = prim::GetAttr[name="max_level"](%self)
                                        %350 : int = prim::GetAttr[name="canonical_box_size"](%self)
                                        %351 : int = prim::GetAttr[name="canonical_level"](%self)
                                        %level_assignments.3 : Tensor = prim::CallFunction(%352, %box_lists.1, %348, %349, %350, %351) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:226:28
                                        %num_boxes.3 : int = aten::size(%pooler_fmt_boxes.2, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:230:20
                                        %355 : Tensor = aten::__getitem__(%x.1, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:23
                                        %356 : int[] = aten::size(%355) # <string>:7:9
                                        %num_channels.3 : int = aten::__getitem__(%356, %level.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:231:23
                                        %358 : (int, int) = prim::GetAttr[name="output_size"](%self)
                                        %output_size.3 : int = prim::TupleIndex(%358, %level.1)
                                        %360 : Tensor = aten::__getitem__(%x.1, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:234:24
                                        %dtype.3 : int = prim::dtype(%360)
                                        %362 : Tensor = aten::__getitem__(%x.1, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:234:36
                                        %device.3 : Device = prim::device(%362)
                                        %367 : int[] = prim::ListConstruct(%num_boxes.3, %num_channels.3, %output_size.3, %output_size.3)
                                        %output.3 : Tensor = aten::zeros(%367, %dtype.3, %65, %device.3, %65) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:235:17
                                        %371 : __torch__.torch.nn.modules.container.___torch_mangle_38.ModuleList = prim::GetAttr[name="level_poolers"](%self)
                                        %373 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="0"](%371)
                                        %375 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="1"](%371)
                                        %377 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="2"](%371)
                                        %379 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="3"](%371)
                                        %382 : Tensor = aten::eq(%level_assignments.3, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:33
                                        %384 : Tensor[] = prim::CallFunction(%383, %382) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:19
                                        %inds.3 : Tensor = aten::__getitem__(%384, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:19
                                        %386 : Tensor?[] = prim::ListConstruct(%inds.3)
                                        %pooler_fmt_boxes_level.3 : Tensor = aten::index(%pooler_fmt_boxes.2, %386) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:241:37
                                        %389 : Tensor = aten::__getitem__(%x.1, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:46
                                        %390 : Tensor = prim::CallMethod[name="forward"](%373, %389, %pooler_fmt_boxes_level.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:39
                                        %391 : Tensor?[] = prim::ListConstruct(%inds.3)
                                        %393 : Tensor = aten::index_put_(%output.3, %391, %390, %392) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:12
                                        %394 : Tensor = aten::eq(%level_assignments.3, %level.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:33
                                        %396 : Tensor[] = prim::CallFunction(%383, %394) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:19
                                        %inds.8 : Tensor = aten::__getitem__(%396, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:19
                                        %398 : Tensor?[] = prim::ListConstruct(%inds.8)
                                        %pooler_fmt_boxes_level.7 : Tensor = aten::index(%pooler_fmt_boxes.2, %398) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:241:37
                                        %401 : Tensor = aten::__getitem__(%x.1, %level.4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:46
                                        %402 : Tensor = prim::CallMethod[name="forward"](%375, %401, %pooler_fmt_boxes_level.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:39
                                        %403 : Tensor?[] = prim::ListConstruct(%inds.8)
                                        %405 : Tensor = aten::index_put_(%output.3, %403, %402, %392) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:12
                                        %406 : Tensor = aten::eq(%level_assignments.3, %level.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:33
                                        %408 : Tensor[] = prim::CallFunction(%383, %406) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:19
                                        %inds.13 : Tensor = aten::__getitem__(%408, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:19
                                        %410 : Tensor?[] = prim::ListConstruct(%inds.13)
                                        %pooler_fmt_boxes_level.10 : Tensor = aten::index(%pooler_fmt_boxes.2, %410) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:241:37
                                        %413 : Tensor = aten::__getitem__(%x.1, %level.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:46
                                        %414 : Tensor = prim::CallMethod[name="forward"](%377, %413, %pooler_fmt_boxes_level.10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:39
                                        %415 : Tensor?[] = prim::ListConstruct(%inds.13)
                                        %417 : Tensor = aten::index_put_(%output.3, %415, %414, %392) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:12
                                        %418 : Tensor = aten::eq(%level_assignments.3, %level.10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:33
                                        %420 : Tensor[] = prim::CallFunction(%383, %418) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:19
                                        %inds.18 : Tensor = aten::__getitem__(%420, %level.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:240:19
                                        %422 : Tensor?[] = prim::ListConstruct(%inds.18)
                                        %pooler_fmt_boxes_level.13 : Tensor = aten::index(%pooler_fmt_boxes.2, %422) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:241:37
                                        %425 : Tensor = aten::__getitem__(%x.1, %level.10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:46
                                        %426 : Tensor = prim::CallMethod[name="forward"](%379, %425, %pooler_fmt_boxes_level.13) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:39
                                        %427 : Tensor?[] = prim::ListConstruct(%inds.18)
                                        %429 : Tensor = aten::index_put_(%output.3, %427, %426, %392) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/poolers.py:243:12
                                        -> (%output.3)
                                    -> (%431)
                                return (%347)
                          
                            }
                          }
                          submodules {
                                        module __torch__.torch.nn.modules.container.___torch_mangle_38.ModuleList {
                                          parameters {
                                          }
                                          attributes {
                                            _is_full_backward_hook = None
                                            0 = <__torch__.detectron2.layers.roi_align.ROIAlign object at 0x56163b447ae0>
                                            1 = <__torch__.detectron2.layers.roi_align.ROIAlign object at 0x56163af577b0>
                                            2 = <__torch__.detectron2.layers.roi_align.ROIAlign object at 0x56163e2de320>
                                            3 = <__torch__.detectron2.layers.roi_align.ROIAlign object at 0x56163af2be10>
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_38.ModuleList):
                                                %1 : str = prim::Constant[value=""]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:234:14
                                                %8 : None = prim::Uninitialized()
                                                 = prim::RaiseException(%1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/container.py:234:8
                                                return (%8)
                                          
                                            }
                                            method __len__ {
                                              graph(%self : __torch__.torch.nn.modules.container.___torch_mangle_38.ModuleList):
                                                %1 : int = prim::Constant[value=4]() # <string>:2:10
                                                return (%1)
                                          
                                            }
                                          }
                                          submodules {
                                                            module __torch__.detectron2.layers.roi_align.ROIAlign {
                                                              parameters {
                                                              }
                                                              attributes {
                                                                _is_full_backward_hook = None
                                                                output_size = (7, 7)
                                                                spatial_scale = 0.25
                                                                sampling_ratio = 0
                                                                aligned = True
                                                              }
                                                              methods {
                                                                method forward {
                                                                  graph(%self : __torch__.detectron2.layers.roi_align.ROIAlign,
                                                                        %input.1 : Tensor,
                                                                        %rois.1 : Tensor):
                                                                    %45 : Function = prim::Constant[name="roi_align"]()
                                                                    %36 : None = prim::Constant()
                                                                    %59 : str = prim::Constant[value="AssertionError: "]()
                                                                    %15 : bool = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                    %6 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:29
                                                                    %10 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:45
                                                                    %12 : int = prim::Constant[value=5]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:51
                                                                    %5 : int = aten::dim(%rois.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                    %7 : bool = aten::eq(%5, %6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                    %16 : bool = prim::If(%7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                      block0():
                                                                        %11 : int = aten::size(%rois.1, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
                                                                        %13 : bool = aten::eq(%11, %12) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
                                                                        -> (%13)
                                                                      block1():
                                                                        -> (%15)
                                                                     = prim::If(%16) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
                                                                      block0():
                                                                        -> ()
                                                                      block1():
                                                                         = prim::RaiseException(%59) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
                                                                        -> ()
                                                                    %22 : bool = prim::is_quantized(%input.1)
                                                                    %input : Tensor = prim::If(%22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
                                                                      block0():
                                                                        %input.4 : Tensor = aten::dequantize(%input.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
                                                                        -> (%input.4)
                                                                      block1():
                                                                        -> (%input.1)
                                                                    %33 : int = prim::dtype(%input)
                                                                    %37 : Tensor = aten::to(%rois.1, %33, %15, %15, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
                                                                    %38 : (int, int) = prim::GetAttr[name="output_size"](%self)
                                                                    %39 : float = prim::GetAttr[name="spatial_scale"](%self)
                                                                    %40 : int = prim::GetAttr[name="sampling_ratio"](%self)
                                                                    %41 : bool = prim::GetAttr[name="aligned"](%self)
                                                                    %42 : int, %43 : int = prim::TupleUnpack(%38)
                                                                    %44 : int[] = prim::ListConstruct(%42, %43)
                                                                    %46 : Tensor = prim::CallFunction(%45, %input, %37, %44, %39, %40, %41) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:58:15
                                                                    return (%46)
                                                              
                                                                }
                                                              }
                                                              submodules {
                                                              }
                                                            }
                                                            module __torch__.detectron2.layers.roi_align.ROIAlign {
                                                              parameters {
                                                              }
                                                              attributes {
                                                                _is_full_backward_hook = None
                                                                output_size = (7, 7)
                                                                spatial_scale = 0.125
                                                                sampling_ratio = 0
                                                                aligned = True
                                                              }
                                                              methods {
                                                                method forward {
                                                                  graph(%self : __torch__.detectron2.layers.roi_align.ROIAlign,
                                                                        %input.1 : Tensor,
                                                                        %rois.1 : Tensor):
                                                                    %45 : Function = prim::Constant[name="roi_align"]()
                                                                    %36 : None = prim::Constant()
                                                                    %59 : str = prim::Constant[value="AssertionError: "]()
                                                                    %15 : bool = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                    %6 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:29
                                                                    %10 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:45
                                                                    %12 : int = prim::Constant[value=5]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:51
                                                                    %5 : int = aten::dim(%rois.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                    %7 : bool = aten::eq(%5, %6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                    %16 : bool = prim::If(%7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                      block0():
                                                                        %11 : int = aten::size(%rois.1, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
                                                                        %13 : bool = aten::eq(%11, %12) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
                                                                        -> (%13)
                                                                      block1():
                                                                        -> (%15)
                                                                     = prim::If(%16) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
                                                                      block0():
                                                                        -> ()
                                                                      block1():
                                                                         = prim::RaiseException(%59) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
                                                                        -> ()
                                                                    %22 : bool = prim::is_quantized(%input.1)
                                                                    %input : Tensor = prim::If(%22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
                                                                      block0():
                                                                        %input.4 : Tensor = aten::dequantize(%input.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
                                                                        -> (%input.4)
                                                                      block1():
                                                                        -> (%input.1)
                                                                    %33 : int = prim::dtype(%input)
                                                                    %37 : Tensor = aten::to(%rois.1, %33, %15, %15, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
                                                                    %38 : (int, int) = prim::GetAttr[name="output_size"](%self)
                                                                    %39 : float = prim::GetAttr[name="spatial_scale"](%self)
                                                                    %40 : int = prim::GetAttr[name="sampling_ratio"](%self)
                                                                    %41 : bool = prim::GetAttr[name="aligned"](%self)
                                                                    %42 : int, %43 : int = prim::TupleUnpack(%38)
                                                                    %44 : int[] = prim::ListConstruct(%42, %43)
                                                                    %46 : Tensor = prim::CallFunction(%45, %input, %37, %44, %39, %40, %41) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:58:15
                                                                    return (%46)
                                                              
                                                                }
                                                              }
                                                              submodules {
                                                              }
                                                            }
                                                            module __torch__.detectron2.layers.roi_align.ROIAlign {
                                                              parameters {
                                                              }
                                                              attributes {
                                                                _is_full_backward_hook = None
                                                                output_size = (7, 7)
                                                                spatial_scale = 0.0625
                                                                sampling_ratio = 0
                                                                aligned = True
                                                              }
                                                              methods {
                                                                method forward {
                                                                  graph(%self : __torch__.detectron2.layers.roi_align.ROIAlign,
                                                                        %input.1 : Tensor,
                                                                        %rois.1 : Tensor):
                                                                    %45 : Function = prim::Constant[name="roi_align"]()
                                                                    %36 : None = prim::Constant()
                                                                    %59 : str = prim::Constant[value="AssertionError: "]()
                                                                    %15 : bool = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                    %6 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:29
                                                                    %10 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:45
                                                                    %12 : int = prim::Constant[value=5]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:51
                                                                    %5 : int = aten::dim(%rois.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                    %7 : bool = aten::eq(%5, %6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                    %16 : bool = prim::If(%7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                      block0():
                                                                        %11 : int = aten::size(%rois.1, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
                                                                        %13 : bool = aten::eq(%11, %12) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
                                                                        -> (%13)
                                                                      block1():
                                                                        -> (%15)
                                                                     = prim::If(%16) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
                                                                      block0():
                                                                        -> ()
                                                                      block1():
                                                                         = prim::RaiseException(%59) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
                                                                        -> ()
                                                                    %22 : bool = prim::is_quantized(%input.1)
                                                                    %input : Tensor = prim::If(%22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
                                                                      block0():
                                                                        %input.4 : Tensor = aten::dequantize(%input.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
                                                                        -> (%input.4)
                                                                      block1():
                                                                        -> (%input.1)
                                                                    %33 : int = prim::dtype(%input)
                                                                    %37 : Tensor = aten::to(%rois.1, %33, %15, %15, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
                                                                    %38 : (int, int) = prim::GetAttr[name="output_size"](%self)
                                                                    %39 : float = prim::GetAttr[name="spatial_scale"](%self)
                                                                    %40 : int = prim::GetAttr[name="sampling_ratio"](%self)
                                                                    %41 : bool = prim::GetAttr[name="aligned"](%self)
                                                                    %42 : int, %43 : int = prim::TupleUnpack(%38)
                                                                    %44 : int[] = prim::ListConstruct(%42, %43)
                                                                    %46 : Tensor = prim::CallFunction(%45, %input, %37, %44, %39, %40, %41) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:58:15
                                                                    return (%46)
                                                              
                                                                }
                                                              }
                                                              submodules {
                                                              }
                                                            }
                                                            module __torch__.detectron2.layers.roi_align.ROIAlign {
                                                              parameters {
                                                              }
                                                              attributes {
                                                                _is_full_backward_hook = None
                                                                output_size = (7, 7)
                                                                spatial_scale = 0.03125
                                                                sampling_ratio = 0
                                                                aligned = True
                                                              }
                                                              methods {
                                                                method forward {
                                                                  graph(%self : __torch__.detectron2.layers.roi_align.ROIAlign,
                                                                        %input.1 : Tensor,
                                                                        %rois.1 : Tensor):
                                                                    %45 : Function = prim::Constant[name="roi_align"]()
                                                                    %36 : None = prim::Constant()
                                                                    %59 : str = prim::Constant[value="AssertionError: "]()
                                                                    %15 : bool = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                    %6 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:29
                                                                    %10 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:45
                                                                    %12 : int = prim::Constant[value=5]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:51
                                                                    %5 : int = aten::dim(%rois.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                    %7 : bool = aten::eq(%5, %6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                    %16 : bool = prim::If(%7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:15
                                                                      block0():
                                                                        %11 : int = aten::size(%rois.1, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
                                                                        %13 : bool = aten::eq(%11, %12) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:35
                                                                        -> (%13)
                                                                      block1():
                                                                        -> (%15)
                                                                     = prim::If(%16) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
                                                                      block0():
                                                                        -> ()
                                                                      block1():
                                                                         = prim::RaiseException(%59) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:55:8
                                                                        -> ()
                                                                    %22 : bool = prim::is_quantized(%input.1)
                                                                    %input : Tensor = prim::If(%22) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:56:8
                                                                      block0():
                                                                        %input.4 : Tensor = aten::dequantize(%input.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:57:20
                                                                        -> (%input.4)
                                                                      block1():
                                                                        -> (%input.1)
                                                                    %33 : int = prim::dtype(%input)
                                                                    %37 : Tensor = aten::to(%rois.1, %33, %15, %15, %36) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:60:12
                                                                    %38 : (int, int) = prim::GetAttr[name="output_size"](%self)
                                                                    %39 : float = prim::GetAttr[name="spatial_scale"](%self)
                                                                    %40 : int = prim::GetAttr[name="sampling_ratio"](%self)
                                                                    %41 : bool = prim::GetAttr[name="aligned"](%self)
                                                                    %42 : int, %43 : int = prim::TupleUnpack(%38)
                                                                    %44 : int[] = prim::ListConstruct(%42, %43)
                                                                    %46 : Tensor = prim::CallFunction(%45, %input, %37, %44, %39, %40, %41) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/layers/roi_align.py:58:15
                                                                    return (%46)
                                                              
                                                                }
                                                              }
                                                              submodules {
                                                              }
                                                            }
                                          }
                                        }
                          }
                        }
                        module __torch__.detectron2.modeling.roi_heads.box_head.FastRCNNConvFCHead {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            _output_size = 1024
                            flatten = <__torch__.torch.nn.modules.flatten.Flatten object at 0x56163b0e04c0>
                            fc1 = <__torch__.torch.nn.modules.linear.Linear object at 0x56163b422c50>
                            fc_relu1 = <__torch__.torch.nn.modules.activation.ReLU object at 0x56163b071470>
                            fc2 = <__torch__.torch.nn.modules.linear.___torch_mangle_39.Linear object at 0x56163b093eb0>
                            fc_relu2 = <__torch__.torch.nn.modules.activation.ReLU object at 0x56163b0f5810>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.roi_heads.box_head.FastRCNNConvFCHead,
                                    %x.1 : Tensor):
                                %3 : __torch__.torch.nn.modules.flatten.Flatten = prim::GetAttr[name="flatten"](%self)
                                %5 : __torch__.torch.nn.modules.linear.Linear = prim::GetAttr[name="fc1"](%self)
                                %7 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="fc_relu1"](%self)
                                %9 : __torch__.torch.nn.modules.linear.___torch_mangle_39.Linear = prim::GetAttr[name="fc2"](%self)
                                %11 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="fc_relu2"](%self)
                                %x.3 : Tensor = prim::CallMethod[name="forward"](%3, %x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/box_head.py:96:16
                                %x.5 : Tensor = prim::CallMethod[name="forward"](%5, %x.3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/box_head.py:96:16
                                %x.7 : Tensor = prim::CallMethod[name="forward"](%7, %x.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/box_head.py:96:16
                                %x.9 : Tensor = prim::CallMethod[name="forward"](%9, %x.7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/box_head.py:96:16
                                %x.11 : Tensor = prim::CallMethod[name="forward"](%11, %x.9) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/box_head.py:96:16
                                return (%x.11)
                          
                            }
                            method __len__ {
                              graph(%self : __torch__.detectron2.modeling.roi_heads.box_head.FastRCNNConvFCHead):
                                %1 : int = prim::Constant[value=5]() # <string>:2:10
                                return (%1)
                          
                            }
                          }
                          submodules {
                                        module __torch__.torch.nn.modules.flatten.Flatten {
                                          parameters {
                                          }
                                          attributes {
                                            training = False
                                            _is_full_backward_hook = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.torch.nn.modules.flatten.Flatten,
                                                    %input.1 : Tensor):
                                                %4 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/flatten.py:40:45
                                                %3 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/flatten.py:40:29
                                                %5 : Tensor = aten::flatten(%input.1, %3, %4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/flatten.py:40:15
                                                return (%5)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                                        module __torch__.torch.nn.modules.linear.Linear {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.torch.nn.modules.linear.Linear,
                                                    %input.1 : Tensor):
                                                %5 : Function = prim::Constant[name="linear"]()
                                                %3 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %4 : Tensor = prim::GetAttr[name="bias"](%self)
                                                %6 : Tensor = prim::CallFunction(%5, %input.1, %3, %4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/linear.py:94:15
                                                return (%6)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                                        module __torch__.torch.nn.modules.activation.ReLU {
                                          parameters {
                                          }
                                          attributes {
                                            training = False
                                            _is_full_backward_hook = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.torch.nn.modules.activation.ReLU,
                                                    %input.1 : Tensor):
                                                %4 : Function = prim::Constant[name="relu"]()
                                                %3 : bool = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/activation.py:102:37
                                                %5 : Tensor = prim::CallFunction(%4, %input.1, %3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/activation.py:102:15
                                                return (%5)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                                        module __torch__.torch.nn.modules.linear.___torch_mangle_39.Linear {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.torch.nn.modules.linear.___torch_mangle_39.Linear,
                                                    %input.1 : Tensor):
                                                %5 : Function = prim::Constant[name="linear"]()
                                                %3 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %4 : Tensor = prim::GetAttr[name="bias"](%self)
                                                %6 : Tensor = prim::CallFunction(%5, %input.1, %3, %4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/linear.py:94:15
                                                return (%6)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                                        module __torch__.torch.nn.modules.activation.ReLU {
                                          parameters {
                                          }
                                          attributes {
                                            training = False
                                            _is_full_backward_hook = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.torch.nn.modules.activation.ReLU,
                                                    %input.1 : Tensor):
                                                %4 : Function = prim::Constant[name="relu"]()
                                                %3 : bool = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/activation.py:102:37
                                                %5 : Tensor = prim::CallFunction(%4, %input.1, %3) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/activation.py:102:15
                                                return (%5)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                          }
                        }
                        module __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers {
                          parameters {
                          }
                          attributes {
                            _is_full_backward_hook = None
                            num_classes = 1
                            box2box_transform = <__torch__.detectron2.modeling.box_regression.Box2BoxTransform object at 0x56163af9f5b0>
                            smooth_l1_beta = 0.
                            test_score_thresh = 0.050000000000000003
                            test_nms_thresh = 0.5
                            test_topk_per_image = 100
                            box_reg_loss_type = smooth_l1
                            loss_weight = {loss_box_reg: 1.}
                            cls_score = <__torch__.torch.nn.modules.linear.___torch_mangle_40.Linear object at 0x56163b29e9f0>
                            bbox_pred = <__torch__.torch.nn.modules.linear.___torch_mangle_41.Linear object at 0x56163df05370>
                          }
                          methods {
                            method forward {
                              graph(%self : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers,
                                    %x.1 : Tensor):
                                %10 : int = prim::Constant[value=-1]()
                                %5 : int = prim::Constant[value=2]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:281:21
                                %9 : int = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:282:43
                                %4 : int = aten::dim(%x.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:281:11
                                %6 : bool = aten::gt(%4, %5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:281:11
                                %x : Tensor = prim::If(%6) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:281:8
                                  block0():
                                    %x.4 : Tensor = aten::flatten(%x.1, %9, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:282:16
                                    -> (%x.4)
                                  block1():
                                    -> (%x.1)
                                %16 : __torch__.torch.nn.modules.linear.___torch_mangle_40.Linear = prim::GetAttr[name="cls_score"](%self)
                                %scores.1 : Tensor = prim::CallMethod[name="forward"](%16, %x) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:283:17
                                %19 : __torch__.torch.nn.modules.linear.___torch_mangle_41.Linear = prim::GetAttr[name="bbox_pred"](%self)
                                %proposal_deltas.1 : Tensor = prim::CallMethod[name="forward"](%19, %x) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:284:26
                                %24 : (Tensor, Tensor) = prim::TupleConstruct(%scores.1, %proposal_deltas.1)
                                return (%24)
                          
                            }
                            method inference {
                              graph(%self : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers,
                                    %predictions.1 : (Tensor, Tensor),
                                    %proposals.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[]):
                                %25 : Function = prim::Constant[name="fast_rcnn_inference"]()
                                %13 : bool = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:397:23
                                %boxes.1 : Tensor[] = prim::CallMethod[name="predict_boxes"](%self, %predictions.1, %proposals.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:395:16
                                %scores.1 : Tensor[] = prim::CallMethod[name="predict_probs"](%self, %predictions.1, %proposals.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:396:17
                                %image_shapes.1 : (int, int)[] = prim::ListConstruct()
                                %12 : int = aten::len(%proposals.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:397:23
                                 = prim::Loop(%12, %13) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:397:23
                                  block0(%14 : int):
                                    %x.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.1, %14) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:397:23
                                    %17 : (int, int) = prim::GetAttr[name="image_size"](%x.1)
                                    %18 : (int, int)[] = aten::append(%image_shapes.1, %17) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:397:23
                                    -> (%13)
                                %22 : float = prim::GetAttr[name="test_score_thresh"](%self)
                                %23 : float = prim::GetAttr[name="test_nms_thresh"](%self)
                                %24 : int = prim::GetAttr[name="test_topk_per_image"](%self)
                                %26 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Tensor[]) = prim::CallFunction(%25, %boxes.1, %scores.1, %image_shapes.1, %22, %23, %24) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:398:15
                                return (%26)
                          
                            }
                            method predict_boxes {
                              graph(%self : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers,
                                    %predictions.1 : (Tensor, Tensor),
                                    %proposals.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[]):
                                %74 : Function = prim::Constant[name="cat"]()
                                %61 : bool = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:460:29
                                %32 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:461:79
                                %5 : int = aten::len(%proposals.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:457:15
                                %7 : bool = aten::Bool(%5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:457:15
                                %8 : bool = aten::__not__(%7) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:457:11
                                %81 : Tensor[] = prim::If(%8) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:457:8
                                  block0():
                                    %9 : Tensor[] = prim::ListConstruct()
                                    -> (%9)
                                  block1():
                                    %57 : Tensor, %proposal_deltas.2 : Tensor = prim::TupleUnpack(%predictions.1)
                                    %num_prop_per_image.2 : int[] = prim::ListConstruct()
                                    %60 : int = aten::len(%proposals.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:460:29
                                     = prim::Loop(%60, %61) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:460:29
                                      block0(%62 : int):
                                        %p.2 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.1, %62) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:460:29
                                        %64 : int = prim::CallMethod[name="__len__"](%p.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:460:30
                                        %65 : int[] = aten::append(%num_prop_per_image.2, %64) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:460:29
                                        -> (%61)
                                    %66 : Tensor[] = prim::ListConstruct()
                                    %67 : int = aten::len(%proposals.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:461:29
                                     = prim::Loop(%67, %61) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:461:29
                                      block0(%69 : int):
                                        %p.5 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.1, %69) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:461:29
                                        %71 : __torch__.detectron2.structures.boxes.Boxes = prim::CallMethod[name="__proposal_boxes_getter"](%p.5) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:461:30
                                        %72 : Tensor = prim::GetAttr[name="tensor"](%71)
                                        %73 : Tensor[] = aten::append(%66, %72) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:461:29
                                        -> (%61)
                                    %proposal_boxes.2 : Tensor = prim::CallFunction(%74, %66, %32) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:461:25
                                    %76 : __torch__.detectron2.modeling.box_regression.Box2BoxTransform = prim::GetAttr[name="box2box_transform"](%self)
                                    %predict_boxes.2 : Tensor = prim::CallMethod[name="apply_deltas"](%76, %proposal_deltas.2, %proposal_boxes.2) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:462:24
                                    %79 : Tensor[] = aten::split(%predict_boxes.2, %num_prop_per_image.2, %32) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:466:15
                                    -> (%79)
                                return (%81)
                          
                            }
                            method predict_probs {
                              graph(%self : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers,
                                    %predictions.1 : (Tensor, Tensor),
                                    %proposals.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[]):
                                %22 : Function = prim::Constant[name="softmax"]()
                                %21 : None = prim::Constant()
                                %20 : int = prim::Constant[value=3]()
                                %19 : int = prim::Constant[value=-1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:484:38
                                %10 : bool = prim::Constant[value=1]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:483:29
                                %26 : int = prim::Constant[value=0]() # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:485:51
                                %scores.1 : Tensor, %6 : Tensor = prim::TupleUnpack(%predictions.1)
                                %num_inst_per_image.1 : int[] = prim::ListConstruct()
                                %9 : int = aten::len(%proposals.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:483:29
                                 = prim::Loop(%9, %10) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:483:29
                                  block0(%11 : int):
                                    %p.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.1, %11) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:483:29
                                    %14 : int = prim::CallMethod[name="__len__"](%p.1) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:483:30
                                    %15 : int[] = aten::append(%num_inst_per_image.1, %14) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:483:29
                                    -> (%10)
                                %probs.1 : Tensor = prim::CallFunction(%22, %scores.1, %19, %20, %21) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:484:16
                                %27 : Tensor[] = aten::split(%probs.1, %num_inst_per_image.1, %26) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:485:15
                                return (%27)
                          
                            }
                          }
                          submodules {
                                        module __torch__.torch.nn.modules.linear.___torch_mangle_40.Linear {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.torch.nn.modules.linear.___torch_mangle_40.Linear,
                                                    %input.1 : Tensor):
                                                %5 : Function = prim::Constant[name="linear"]()
                                                %3 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %4 : Tensor = prim::GetAttr[name="bias"](%self)
                                                %6 : Tensor = prim::CallFunction(%5, %input.1, %3, %4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/linear.py:94:15
                                                return (%6)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                                        module __torch__.torch.nn.modules.linear.___torch_mangle_41.Linear {
                                          parameters {
                                            weight = ...
                                            bias = ...
                                          }
                                          attributes {
                                            weight = ...
                                            bias = ...
                                            training = False
                                            _is_full_backward_hook = None
                                          }
                                          methods {
                                            method forward {
                                              graph(%self : __torch__.torch.nn.modules.linear.___torch_mangle_41.Linear,
                                                    %input.1 : Tensor):
                                                %5 : Function = prim::Constant[name="linear"]()
                                                %3 : Tensor = prim::GetAttr[name="weight"](%self)
                                                %4 : Tensor = prim::GetAttr[name="bias"](%self)
                                                %6 : Tensor = prim::CallFunction(%5, %input.1, %3, %4) # /home/arnab/anaconda3/envs/uos_mde/lib/python3.8/site-packages/torch/nn/modules/linear.py:94:15
                                                return (%6)
                                          
                                            }
                                          }
                                          submodules {
                                          }
                                        }
                          }
                        }
              }
            }
      }
    }
  }
}
